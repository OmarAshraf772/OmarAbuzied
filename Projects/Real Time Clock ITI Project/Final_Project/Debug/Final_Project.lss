
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00006522  000065b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  008000ce  008000ce  00006624  2**0
                  ALLOC
  3 .stab         00005e08  00000000  00000000  00006624  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b61  00000000  00000000  0000c42c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000df8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e23d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000fe86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000126db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_1>
       8:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_2>
       c:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_9>
      28:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_10>
      2c:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 18 	call	0x3122	; 0x3122 <main>
      8a:	0c 94 8f 32 	jmp	0x651e	; 0x651e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 32 	jmp	0x64b0	; 0x64b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa eb       	ldi	r26, 0xBA	; 186
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 32 	jmp	0x64e8	; 0x64e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 32 	jmp	0x64c8	; 0x64c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 32 	jmp	0x64c8	; 0x64c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 32 	jmp	0x64b0	; 0x64b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a eb       	ldi	r24, 0xBA	; 186
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 32 	jmp	0x64e8	; 0x64e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 32 	jmp	0x64c8	; 0x64c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 32 	jmp	0x64c8	; 0x64c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 32 	jmp	0x64c8	; 0x64c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 32 	jmp	0x6500	; 0x6500 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 68 32 	jmp	0x64d0	; 0x64d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 84 32 	jmp	0x6508	; 0x6508 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer2_overflow_init_interrupt>:
#include "../../LIB/BIT_MATH.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer2_overflow_init_interrupt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* select timer clock */
	SET_BIT(ASSR,AS2);
     b4e:	a2 e4       	ldi	r26, 0x42	; 66
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e2 e4       	ldi	r30, 0x42	; 66
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS20);
     b5c:	a5 e4       	ldi	r26, 0x45	; 69
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e5 e4       	ldi	r30, 0x45	; 69
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
     b6a:	a5 e4       	ldi	r26, 0x45	; 69
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e5 e4       	ldi	r30, 0x45	; 69
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
     b78:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
     b7a:	a9 e5       	ldi	r26, 0x59	; 89
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e9 e5       	ldi	r30, 0x59	; 89
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	8c 93       	st	X, r24
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <timer_CTC_init_interrupt>:
void timer_CTC_init_interrupt(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     b96:	a3 e5       	ldi	r26, 0x53	; 83
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e3 e5       	ldi	r30, 0x53	; 83
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 60       	ori	r24, 0x08	; 8
     ba2:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=80;
     ba4:	ec e5       	ldi	r30, 0x5C	; 92
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 e5       	ldi	r24, 0x50	; 80
     baa:	80 83       	st	Z, r24
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
     bac:	a3 e5       	ldi	r26, 0x53	; 83
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e3 e5       	ldi	r30, 0x53	; 83
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     bba:	a3 e5       	ldi	r26, 0x53	; 83
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e3 e5       	ldi	r30, 0x53	; 83
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
     bc8:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
     bca:	a9 e5       	ldi	r26, 0x59	; 89
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e9 e5       	ldi	r30, 0x59	; 89
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	8c 93       	st	X, r24
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     be6:	a7 e3       	ldi	r26, 0x37	; 55
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e3       	ldi	r30, 0x37	; 55
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	8c 93       	st	X, r24
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     bf4:	a3 e5       	ldi	r26, 0x53	; 83
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e3 e5       	ldi	r30, 0x53	; 83
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     c02:	ec e5       	ldi	r30, 0x5C	; 92
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 e4       	ldi	r24, 0x40	; 64
     c08:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     c18:	a3 e5       	ldi	r26, 0x53	; 83
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e3 e5       	ldi	r30, 0x53	; 83
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	84 60       	ori	r24, 0x04	; 4
     c24:	8c 93       	st	X, r24
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
     c26:	a3 e5       	ldi	r26, 0x53	; 83
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e3 e5       	ldi	r30, 0x53	; 83
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	8c 93       	st	X, r24
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     c42:	a7 e3       	ldi	r26, 0x37	; 55
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e3       	ldi	r30, 0x37	; 55
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	88 60       	ori	r24, 0x08	; 8
     c4e:	8c 93       	st	X, r24
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
     c50:	a3 e5       	ldi	r26, 0x53	; 83
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e3 e5       	ldi	r30, 0x53	; 83
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	80 64       	ori	r24, 0x40	; 64
     c5c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
     c5e:	a3 e5       	ldi	r26, 0x53	; 83
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e3 e5       	ldi	r30, 0x53	; 83
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	88 60       	ori	r24, 0x08	; 8
     c6a:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     c6c:	ec e5       	ldi	r30, 0x5C	; 92
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     c74:	a3 e5       	ldi	r26, 0x53	; 83
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e3 e5       	ldi	r30, 0x53	; 83
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     c82:	a3 e5       	ldi	r26, 0x53	; 83
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	8c 93       	st	X, r24
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
     c90:	a3 e5       	ldi	r26, 0x53	; 83
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e3 e5       	ldi	r30, 0x53	; 83
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	80 61       	ori	r24, 0x10	; 16
     c9c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 62       	ori	r24, 0x20	; 32
     caa:	8c 93       	st	X, r24
}
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     cba:	a7 e3       	ldi	r26, 0x37	; 55
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e7 e3       	ldi	r30, 0x37	; 55
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	8c 93       	st	X, r24
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 64       	ori	r24, 0x40	; 64
     cd4:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     cd6:	ec e5       	ldi	r30, 0x5C	; 92
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	8c 93       	st	X, r24
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 61       	ori	r24, 0x10	; 16
     d06:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     d08:	a3 e5       	ldi	r26, 0x53	; 83
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e3 e5       	ldi	r30, 0x53	; 83
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <MWDT_vEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"
#include "WDT_Interface.h"

void MWDT_vEnable(void){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDP2);
     d24:	a1 e4       	ldi	r26, 0x41	; 65
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e1 e4       	ldi	r30, 0x41	; 65
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	84 60       	ori	r24, 0x04	; 4
     d30:	8c 93       	st	X, r24
	SET_BIT(WDTCR,WDP1);
     d32:	a1 e4       	ldi	r26, 0x41	; 65
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e1 e4       	ldi	r30, 0x41	; 65
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	82 60       	ori	r24, 0x02	; 2
     d3e:	8c 93       	st	X, r24
	SET_BIT(WDTCR,WDP0);
     d40:	a1 e4       	ldi	r26, 0x41	; 65
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e1 e4       	ldi	r30, 0x41	; 65
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	8c 93       	st	X, r24
	SET_BIT(WDTCR,WDE);
     d4e:	a1 e4       	ldi	r26, 0x41	; 65
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e1 e4       	ldi	r30, 0x41	; 65
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 60       	ori	r24, 0x08	; 8
     d5a:	8c 93       	st	X, r24
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <MWDT_vDisable>:
void MWDT_vDisable(void){
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR = (1<<WDTOE) | (1<<WDE);
     d6a:	e1 e4       	ldi	r30, 0x41	; 65
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	88 e1       	ldi	r24, 0x18	; 24
     d70:	80 83       	st	Z, r24
	/* Turn off WDT */
	WDTCR = 0x00;
     d72:	e1 e4       	ldi	r30, 0x41	; 65
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	10 82       	st	Z, r1
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <MUSART_vInit>:

/*
 * Init : baud rate - enbale reciever and trans - frame format
 * transmit - recieve
 * */
void MUSART_vInit(u16 A_u16Baud){
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <MUSART_vInit+0x6>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	/* Enable of transmitter and receiver */
	SET_BIT(UCSRB,RXEN);
     d8c:	aa e2       	ldi	r26, 0x2A	; 42
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	ea e2       	ldi	r30, 0x2A	; 42
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	80 61       	ori	r24, 0x10	; 16
     d98:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
     d9a:	aa e2       	ldi	r26, 0x2A	; 42
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e2       	ldi	r30, 0x2A	; 42
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	8c 93       	st	X, r24
	/* Baud rate */
	UBRRH = (u8)(A_u16Baud>>8);
     da8:	e0 e4       	ldi	r30, 0x40	; 64
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	89 2f       	mov	r24, r25
     db2:	99 27       	eor	r25, r25
     db4:	80 83       	st	Z, r24
	UBRRL = (u8)A_u16Baud;
     db6:	e9 e2       	ldi	r30, 0x29	; 41
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	80 83       	st	Z, r24
	/* Frame format configuration */
	UCSRC = UCSRC_CONFIG;
     dbe:	e0 e4       	ldi	r30, 0x40	; 64
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	86 e8       	ldi	r24, 0x86	; 134
     dc4:	80 83       	st	Z, r24
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <MUSART_u8ReceiveData>:
u8 MUSART_u8ReceiveData(void){
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA,RXC)==0);
     dd8:	eb e2       	ldi	r30, 0x2B	; 43
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	dc f7       	brge	.-10     	; 0xdd8 <MUSART_u8ReceiveData+0x8>
	return UDR;
     de2:	ec e2       	ldi	r30, 0x2C	; 44
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <MUSART_vTransmitData>:
void MUSART_vTransmitData(u8 A_u8Data){
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA,UDRE)==0);
     dfa:	eb e2       	ldi	r30, 0x2B	; 43
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	82 95       	swap	r24
     e02:	86 95       	lsr	r24
     e04:	87 70       	andi	r24, 0x07	; 7
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	81 70       	andi	r24, 0x01	; 1
     e0c:	90 70       	andi	r25, 0x00	; 0
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	a1 f3       	breq	.-24     	; 0xdfa <MUSART_vTransmitData+0xc>
	UDR = A_u8Data;
     e12:	ec e2       	ldi	r30, 0x2C	; 44
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	80 83       	st	Z, r24
}
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <MTWI_vInitMaster>:

#include "TWI_CONFIG.h"
#include "TWI_INT.h"
#include "TWI_PRIV.h"

void MTWI_vInitMaster(u8 A_u8MasterAddress){
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,TWEA);
     e2e:	a6 e5       	ldi	r26, 0x56	; 86
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e5       	ldi	r30, 0x56	; 86
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	80 64       	ori	r24, 0x40	; 64
     e3a:	8c 93       	st	X, r24

	TWBR=SCL_TWBR_VAL;
     e3c:	e0 e2       	ldi	r30, 0x20	; 32
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	80 83       	st	Z, r24
	CLR_BIT(TWSR,TWPS0);
     e44:	a1 e2       	ldi	r26, 0x21	; 33
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 e2       	ldi	r30, 0x21	; 33
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWPS1);
     e52:	a1 e2       	ldi	r26, 0x21	; 33
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e1 e2       	ldi	r30, 0x21	; 33
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8d 7f       	andi	r24, 0xFD	; 253
     e5e:	8c 93       	st	X, r24

	if(A_u8MasterAddress == 0){
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	88 23       	and	r24, r24
     e64:	29 f0       	breq	.+10     	; 0xe70 <MTWI_vInitMaster+0x4e>

	}else{
		TWAR=A_u8MasterAddress<<1;
     e66:	e2 e2       	ldi	r30, 0x22	; 34
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	88 0f       	add	r24, r24
     e6e:	80 83       	st	Z, r24
	}
	SET_BIT(TWCR,TWEN);
     e70:	a6 e5       	ldi	r26, 0x56	; 86
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e6 e5       	ldi	r30, 0x56	; 86
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	84 60       	ori	r24, 0x04	; 4
     e7c:	8c 93       	st	X, r24

}
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <MTWI_vInitSlave>:

void MTWI_vInitSlave(u8 A_u8SlaveAddress){
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	89 83       	std	Y+1, r24	; 0x01
	TWAR= A_u8SlaveAddress<<1;
     e92:	e2 e2       	ldi	r30, 0x22	; 34
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	88 0f       	add	r24, r24
     e9a:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWEA);
     e9c:	a6 e5       	ldi	r26, 0x56	; 86
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e6 e5       	ldi	r30, 0x56	; 86
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 64       	ori	r24, 0x40	; 64
     ea8:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWEN);
     eaa:	a6 e5       	ldi	r26, 0x56	; 86
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e6 e5       	ldi	r30, 0x56	; 86
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	8c 93       	st	X, r24
}
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <MTWI_TwiErrorSendStartCondition>:

TWI_ERROR_e MTWI_TwiErrorSendStartCondition(void){
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_e local_TwiError= NO_ERROR;
     eca:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TWCR,TWEN);
     ecc:	a6 e5       	ldi	r26, 0x56	; 86
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e6 e5       	ldi	r30, 0x56	; 86
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWSTA);
     eda:	a6 e5       	ldi	r26, 0x56	; 86
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e6 e5       	ldi	r30, 0x56	; 86
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 62       	ori	r24, 0x20	; 32
     ee6:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
     ee8:	a6 e5       	ldi	r26, 0x56	; 86
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e6 e5       	ldi	r30, 0x56	; 86
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 68       	ori	r24, 0x80	; 128
     ef4:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWINT)==0);
     ef6:	e6 e5       	ldi	r30, 0x56	; 86
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	dc f7       	brge	.-10     	; 0xef6 <MTWI_TwiErrorSendStartCondition+0x36>

	if ((TWSR & STATUS_MASK) != START_ACK){
     f00:	e1 e2       	ldi	r30, 0x21	; 33
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 2f       	mov	r24, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	88 7f       	andi	r24, 0xF8	; 248
     f0c:	90 70       	andi	r25, 0x00	; 0
     f0e:	88 30       	cpi	r24, 0x08	; 8
     f10:	91 05       	cpc	r25, r1
     f12:	11 f0       	breq	.+4      	; 0xf18 <MTWI_TwiErrorSendStartCondition+0x58>
		local_TwiError=START_CONDITION_ERROR;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_TwiError;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
}
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <MTWI_TwiErrorSendRepeatedStartCondition>:

TWI_ERROR_e MTWI_TwiErrorSendRepeatedStartCondition(void){
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_e local_TwiError= NO_ERROR;
     f2c:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(TWCR,TWEN);
     f2e:	a6 e5       	ldi	r26, 0x56	; 86
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e5       	ldi	r30, 0x56	; 86
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	84 60       	ori	r24, 0x04	; 4
     f3a:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWSTA);
     f3c:	a6 e5       	ldi	r26, 0x56	; 86
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e6 e5       	ldi	r30, 0x56	; 86
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
     f4a:	a6 e5       	ldi	r26, 0x56	; 86
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e6 e5       	ldi	r30, 0x56	; 86
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWINT)==0);
     f58:	e6 e5       	ldi	r30, 0x56	; 86
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	88 23       	and	r24, r24
     f60:	dc f7       	brge	.-10     	; 0xf58 <MTWI_TwiErrorSendRepeatedStartCondition+0x36>

	if ((TWSR & STATUS_MASK) != REPEATED_START_ACK){
     f62:	e1 e2       	ldi	r30, 0x21	; 33
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 7f       	andi	r24, 0xF8	; 248
     f6e:	90 70       	andi	r25, 0x00	; 0
     f70:	80 31       	cpi	r24, 0x10	; 16
     f72:	91 05       	cpc	r25, r1
     f74:	11 f0       	breq	.+4      	; 0xf7a <MTWI_TwiErrorSendRepeatedStartCondition+0x58>
		local_TwiError=REPEATED_START_CONDITION_ERROR;
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_TwiError;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <MTWI_TwiErrorSendSlaveAddresswithWrite>:

TWI_ERROR_e MTWI_TwiErrorSendSlaveAddresswithWrite(u8 A_u8SlaveAddress){
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <MTWI_TwiErrorSendSlaveAddresswithWrite+0x6>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_e local_TwiError= NO_ERROR;
     f90:	19 82       	std	Y+1, r1	; 0x01

	TWDR=A_u8SlaveAddress<<1;
     f92:	e3 e2       	ldi	r30, 0x23	; 35
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	88 0f       	add	r24, r24
     f9a:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWEN);
     f9c:	a6 e5       	ldi	r26, 0x56	; 86
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e6 e5       	ldi	r30, 0x56	; 86
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	84 60       	ori	r24, 0x04	; 4
     fa8:	8c 93       	st	X, r24
	CLR_BIT(TWDR,TWD0);
     faa:	a3 e2       	ldi	r26, 0x23	; 35
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e3 e2       	ldi	r30, 0x23	; 35
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8e 7f       	andi	r24, 0xFE	; 254
     fb6:	8c 93       	st	X, r24

	SET_BIT(TWCR,TWINT);
     fb8:	a6 e5       	ldi	r26, 0x56	; 86
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e6 e5       	ldi	r30, 0x56	; 86
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWINT)==0);
     fc6:	e6 e5       	ldi	r30, 0x56	; 86
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 23       	and	r24, r24
     fce:	dc f7       	brge	.-10     	; 0xfc6 <MTWI_TwiErrorSendSlaveAddresswithWrite+0x42>

	if ((TWSR & STATUS_MASK) != SLAVE_W_ACK){
     fd0:	e1 e2       	ldi	r30, 0x21	; 33
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	88 7f       	andi	r24, 0xF8	; 248
     fdc:	90 70       	andi	r25, 0x00	; 0
     fde:	88 31       	cpi	r24, 0x18	; 24
     fe0:	91 05       	cpc	r25, r1
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <MTWI_TwiErrorSendSlaveAddresswithWrite+0x64>
		local_TwiError=SLAVE_W_ACCESS_ERROR;
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_TwiError;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <MTWI_TwiErrorSendSlaveAddresswithRead>:

TWI_ERROR_e MTWI_TwiErrorSendSlaveAddresswithRead(u8 A_u8SlaveAddress){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <MTWI_TwiErrorSendSlaveAddresswithRead+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_e local_TwiError= NO_ERROR;
    1000:	19 82       	std	Y+1, r1	; 0x01

	TWDR=A_u8SlaveAddress<<1;
    1002:	e3 e2       	ldi	r30, 0x23	; 35
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	88 0f       	add	r24, r24
    100a:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWEN);
    100c:	a6 e5       	ldi	r26, 0x56	; 86
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e6 e5       	ldi	r30, 0x56	; 86
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	8c 93       	st	X, r24

	SET_BIT(TWDR,TWD0);
    101a:	a3 e2       	ldi	r26, 0x23	; 35
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e2       	ldi	r30, 0x23	; 35
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	8c 93       	st	X, r24

	SET_BIT(TWCR,TWINT);
    1028:	a6 e5       	ldi	r26, 0x56	; 86
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e6 e5       	ldi	r30, 0x56	; 86
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 68       	ori	r24, 0x80	; 128
    1034:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWINT)==0);
    1036:	e6 e5       	ldi	r30, 0x56	; 86
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 23       	and	r24, r24
    103e:	dc f7       	brge	.-10     	; 0x1036 <MTWI_TwiErrorSendSlaveAddresswithRead+0x42>

	if ((TWSR & STATUS_MASK) != SLAVE_R_ACK){
    1040:	e1 e2       	ldi	r30, 0x21	; 33
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	88 7f       	andi	r24, 0xF8	; 248
    104c:	90 70       	andi	r25, 0x00	; 0
    104e:	80 34       	cpi	r24, 0x40	; 64
    1050:	91 05       	cpc	r25, r1
    1052:	11 f0       	breq	.+4      	; 0x1058 <MTWI_TwiErrorSendSlaveAddresswithRead+0x64>
		local_TwiError=SLAVE_R_ACCESS_ERROR;
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_TwiError;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <MTWI_TwiErrorMasterWriteByte>:

TWI_ERROR_e MTWI_TwiErrorMasterWriteByte(u8 A_u8Data){
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <MTWI_TwiErrorMasterWriteByte+0x6>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_e local_TwiError= NO_ERROR;
    1070:	19 82       	std	Y+1, r1	; 0x01

	TWDR=A_u8Data;
    1072:	e3 e2       	ldi	r30, 0x23	; 35
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWEN);
    107a:	a6 e5       	ldi	r26, 0x56	; 86
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e6 e5       	ldi	r30, 0x56	; 86
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	84 60       	ori	r24, 0x04	; 4
    1086:	8c 93       	st	X, r24

	SET_BIT(TWDR,TWD0);
    1088:	a3 e2       	ldi	r26, 0x23	; 35
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e3 e2       	ldi	r30, 0x23	; 35
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	8c 93       	st	X, r24

	SET_BIT(TWCR,TWINT);
    1096:	a6 e5       	ldi	r26, 0x56	; 86
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e6 e5       	ldi	r30, 0x56	; 86
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWINT)==0);
    10a4:	e6 e5       	ldi	r30, 0x56	; 86
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	88 23       	and	r24, r24
    10ac:	dc f7       	brge	.-10     	; 0x10a4 <MTWI_TwiErrorMasterWriteByte+0x40>

	if ((TWSR & STATUS_MASK) != MSTR_W_BYTE_ACK){
    10ae:	e1 e2       	ldi	r30, 0x21	; 33
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	88 7f       	andi	r24, 0xF8	; 248
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	88 32       	cpi	r24, 0x28	; 40
    10be:	91 05       	cpc	r25, r1
    10c0:	11 f0       	breq	.+4      	; 0x10c6 <MTWI_TwiErrorMasterWriteByte+0x62>
		local_TwiError=MASTER_W_BYTE_ERROR;
    10c2:	85 e0       	ldi	r24, 0x05	; 5
    10c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_TwiError;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <MTWI_TwiErrorMasterReadByte>:

TWI_ERROR_e MTWI_TwiErrorMasterReadByte(u8* A_u8Data){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <MTWI_TwiErrorMasterReadByte+0x6>
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	9b 83       	std	Y+3, r25	; 0x03
    10e0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_e local_TwiError= NO_ERROR;
    10e2:	19 82       	std	Y+1, r1	; 0x01


	SET_BIT(TWCR,TWEN);
    10e4:	a6 e5       	ldi	r26, 0x56	; 86
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e6 e5       	ldi	r30, 0x56	; 86
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	84 60       	ori	r24, 0x04	; 4
    10f0:	8c 93       	st	X, r24

	SET_BIT(TWDR,TWD0);
    10f2:	a3 e2       	ldi	r26, 0x23	; 35
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e3 e2       	ldi	r30, 0x23	; 35
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	81 60       	ori	r24, 0x01	; 1
    10fe:	8c 93       	st	X, r24

	SET_BIT(TWCR,TWINT);
    1100:	a6 e5       	ldi	r26, 0x56	; 86
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e5       	ldi	r30, 0x56	; 86
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 68       	ori	r24, 0x80	; 128
    110c:	8c 93       	st	X, r24
	while (GET_BIT(TWCR,TWINT)==0);
    110e:	e6 e5       	ldi	r30, 0x56	; 86
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	88 23       	and	r24, r24
    1116:	dc f7       	brge	.-10     	; 0x110e <MTWI_TwiErrorMasterReadByte+0x3c>

	if ((TWSR & STATUS_MASK) != MSTR_R_BYTE_ACK){
    1118:	e1 e2       	ldi	r30, 0x21	; 33
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	88 7f       	andi	r24, 0xF8	; 248
    1124:	90 70       	andi	r25, 0x00	; 0
    1126:	80 35       	cpi	r24, 0x50	; 80
    1128:	91 05       	cpc	r25, r1
    112a:	19 f0       	breq	.+6      	; 0x1132 <MTWI_TwiErrorMasterReadByte+0x60>
		local_TwiError=MASTER_R_BYTE_ERROR;
    112c:	86 e0       	ldi	r24, 0x06	; 6
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	06 c0       	rjmp	.+12     	; 0x113e <MTWI_TwiErrorMasterReadByte+0x6c>
	}else {
		*A_u8Data=TWDR;
    1132:	e3 e2       	ldi	r30, 0x23	; 35
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	ea 81       	ldd	r30, Y+2	; 0x02
    113a:	fb 81       	ldd	r31, Y+3	; 0x03
    113c:	80 83       	st	Z, r24
	}
	return local_TwiError;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <MTWI_vSendStopCondition>:

void MTWI_vSendStopCondition(void){
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1154:	e6 e5       	ldi	r30, 0x56	; 86
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	84 e9       	ldi	r24, 0x94	; 148
    115a:	80 83       	st	Z, r24
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <MTIMER1_vInit>:

#include "TIMER1_Config.h"
#include "TIMER1_Private.h"
#include "TIMER1_Interface.h"

void MTIMER1_vInit(void){
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	/* Non inverting mode : OC1A, OC1B */
	SET_BIT(TCCR1A,COM1A1);
    116a:	af e4       	ldi	r26, 0x4F	; 79
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ef e4       	ldi	r30, 0x4F	; 79
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 68       	ori	r24, 0x80	; 128
    1176:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    1178:	af e4       	ldi	r26, 0x4F	; 79
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 62       	ori	r24, 0x20	; 32
    1184:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1A0);
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 7b       	andi	r24, 0xBF	; 191
    1192:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1B0);
    1194:	af e4       	ldi	r26, 0x4F	; 79
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e4       	ldi	r30, 0x4F	; 79
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7e       	andi	r24, 0xEF	; 239
    11a0:	8c 93       	st	X, r24
	/* FAST PWM MODE : TOP ICR1 */
	SET_BIT(TCCR1A,WGM11);
    11a2:	af e4       	ldi	r26, 0x4F	; 79
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ef e4       	ldi	r30, 0x4F	; 79
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	82 60       	ori	r24, 0x02	; 2
    11ae:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM10);
    11b0:	af e4       	ldi	r26, 0x4F	; 79
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	ef e4       	ldi	r30, 0x4F	; 79
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8e 7f       	andi	r24, 0xFE	; 254
    11bc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    11be:	ae e4       	ldi	r26, 0x4E	; 78
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	ee e4       	ldi	r30, 0x4E	; 78
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 61       	ori	r24, 0x10	; 16
    11ca:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    11cc:	ae e4       	ldi	r26, 0x4E	; 78
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ee e4       	ldi	r30, 0x4E	; 78
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	88 60       	ori	r24, 0x08	; 8
    11d8:	8c 93       	st	X, r24
	/* prescaling : /8 */
	CLR_BIT(TCCR1B,CS12);
    11da:	ae e4       	ldi	r26, 0x4E	; 78
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ee e4       	ldi	r30, 0x4E	; 78
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    11e8:	ae e4       	ldi	r26, 0x4E	; 78
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	ee e4       	ldi	r30, 0x4E	; 78
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	82 60       	ori	r24, 0x02	; 2
    11f4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    11f6:	ae e4       	ldi	r26, 0x4E	; 78
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	ee e4       	ldi	r30, 0x4E	; 78
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	8e 7f       	andi	r24, 0xFE	; 254
    1202:	8c 93       	st	X, r24
	OCR1A = 0;
    1204:	ea e4       	ldi	r30, 0x4A	; 74
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	11 82       	std	Z+1, r1	; 0x01
    120a:	10 82       	st	Z, r1
	OCR1B = 0;
    120c:	e8 e4       	ldi	r30, 0x48	; 72
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	11 82       	std	Z+1, r1	; 0x01
    1212:	10 82       	st	Z, r1
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <MTIMER1_vSetOCR1AValue>:
void MTIMER1_vSetOCR1AValue(u16 A_u16Val){
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <MTIMER1_vSetOCR1AValue+0x6>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	9a 83       	std	Y+2, r25	; 0x02
    1226:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16Val;
    1228:	ea e4       	ldi	r30, 0x4A	; 74
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	80 83       	st	Z, r24
}
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <MTIMER1_vSetOCR1BValue>:
void MTIMER1_vSetOCR1BValue(u16 A_u16Val){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <MTIMER1_vSetOCR1BValue+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = A_u16Val;
    124c:	e8 e4       	ldi	r30, 0x48	; 72
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <MTIMER1_vSetICR1Value>:
void MTIMER1_vSetICR1Value(u16 A_u16Val){
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <MTIMER1_vSetICR1Value+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
	ICR1  = A_u16Val;
    1270:	e6 e4       	ldi	r30, 0x46	; 70
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	80 83       	st	Z, r24
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <MTIMER0_vInit>:
#define NULL 0

void (*TIMER0_OV)(void) = NULL;
void (*TIMER0_CTC)(void) = NULL;

void MTIMER0_vInit(void){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == NORMAL_MODE
	/* Normal mode  */
	CLR_BIT(TCCR0,WGM01);
    128e:	a3 e5       	ldi	r26, 0x53	; 83
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e3 e5       	ldi	r30, 0x53	; 83
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8f 7b       	andi	r24, 0xBF	; 191
    129a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM00);
    129c:	a3 e5       	ldi	r26, 0x53	; 83
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e3 e5       	ldi	r30, 0x53	; 83
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	87 7f       	andi	r24, 0xF7	; 247
    12a8:	8c 93       	st	X, r24

	/* Prescalar : /8 */
	CLR_BIT(TCCR0,CS02);
    12aa:	a3 e5       	ldi	r26, 0x53	; 83
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e3 e5       	ldi	r30, 0x53	; 83
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	8b 7f       	andi	r24, 0xFB	; 251
    12b6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    12b8:	a3 e5       	ldi	r26, 0x53	; 83
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e3 e5       	ldi	r30, 0x53	; 83
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	82 60       	ori	r24, 0x02	; 2
    12c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    12c6:	a3 e5       	ldi	r26, 0x53	; 83
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e3 e5       	ldi	r30, 0x53	; 83
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	8c 93       	st	X, r24

	/* Turn on interrupt */
	SET_BIT(TIMSK,TOIE0);
    12d4:	a9 e5       	ldi	r26, 0x59	; 89
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e9 e5       	ldi	r30, 0x59	; 89
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	81 60       	ori	r24, 0x01	; 1
    12e0:	8c 93       	st	X, r24
	OCR0 = 0;
	/* Disable interrupts */
	CLR_BIT(TIMSK,TOIE0);
	CLR_BIT(TIMSK,OCIE0);
#endif
}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <MTIMER0_vSetCallBackOv>:
void MTIMER0_vSetCallBackOv(void (*ptr_to_fun)(void)){
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <MTIMER0_vSetCallBackOv+0x6>
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OV = ptr_to_fun;
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	90 93 cf 00 	sts	0x00CF, r25
    12fe:	80 93 ce 00 	sts	0x00CE, r24
}
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <MTIMER0_vSetCallBackCTC>:
void MTIMER0_vSetCallBackCTC(void (*ptr_to_fun)(void)){
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <MTIMER0_vSetCallBackCTC+0x6>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CTC = ptr_to_fun;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	90 93 d1 00 	sts	0x00D1, r25
    1322:	80 93 d0 00 	sts	0x00D0, r24
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <MTIMER0_vSetPreloadValue>:
void MTIMER0_vSetPreloadValue(u8 A_u8Preload){
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8Preload;
    133c:	e2 e5       	ldi	r30, 0x52	; 82
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	80 83       	st	Z, r24
}
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <MTIMER0_vSetOCR0>:
void MTIMER0_vSetOCR0(u8 A_u8Value){
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	0f 92       	push	r0
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8Value;
    1358:	ec e5       	ldi	r30, 0x5C	; 92
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	80 83       	st	Z, r24
}
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <__vector_11>:

void __vector_11(){
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	2f 93       	push	r18
    1374:	3f 93       	push	r19
    1376:	4f 93       	push	r20
    1378:	5f 93       	push	r21
    137a:	6f 93       	push	r22
    137c:	7f 93       	push	r23
    137e:	8f 93       	push	r24
    1380:	9f 93       	push	r25
    1382:	af 93       	push	r26
    1384:	bf 93       	push	r27
    1386:	ef 93       	push	r30
    1388:	ff 93       	push	r31
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OV != NULL){
    1392:	80 91 ce 00 	lds	r24, 0x00CE
    1396:	90 91 cf 00 	lds	r25, 0x00CF
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	29 f0       	breq	.+10     	; 0x13a8 <__vector_11+0x40>
		TIMER0_OV();
    139e:	e0 91 ce 00 	lds	r30, 0x00CE
    13a2:	f0 91 cf 00 	lds	r31, 0x00CF
    13a6:	09 95       	icall
	}
}
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_10>:
void __vector_10(){
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_CTC != NULL){
    13f8:	80 91 d0 00 	lds	r24, 0x00D0
    13fc:	90 91 d1 00 	lds	r25, 0x00D1
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	29 f0       	breq	.+10     	; 0x140e <__vector_10+0x40>
		TIMER0_CTC();
    1404:	e0 91 d0 00 	lds	r30, 0x00D0
    1408:	f0 91 d1 00 	lds	r31, 0x00D1
    140c:	09 95       	icall
	}
}
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	ff 91       	pop	r31
    1414:	ef 91       	pop	r30
    1416:	bf 91       	pop	r27
    1418:	af 91       	pop	r26
    141a:	9f 91       	pop	r25
    141c:	8f 91       	pop	r24
    141e:	7f 91       	pop	r23
    1420:	6f 91       	pop	r22
    1422:	5f 91       	pop	r21
    1424:	4f 91       	pop	r20
    1426:	3f 91       	pop	r19
    1428:	2f 91       	pop	r18
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <MSPI_vMasterInit>:

#include "SPI_Config.h"
#include "SPI_Private.h"
#include "SPI_Interface.h"
void MSPI_vMasterInit(void)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    143c:	ed e2       	ldi	r30, 0x2D	; 45
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	81 e5       	ldi	r24, 0x51	; 81
    1442:	80 83       	st	Z, r24
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <MSPI_vMasterTransmit>:
void MSPI_vMasterTransmit(u8 A_u8Data)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = A_u8Data;
    1456:	ef e2       	ldi	r30, 0x2F	; 47
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(GET_BIT(SPSR,SPIF)==0);
    145e:	ee e2       	ldi	r30, 0x2E	; 46
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	88 23       	and	r24, r24
    1466:	dc f7       	brge	.-10     	; 0x145e <MSPI_vMasterTransmit+0x14>
}
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <MSPI_vSlaveInit>:
void MSPI_vSlaveInit(void)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    /* Set MISO output, all others input */
	/* Enable SPI */
	SPCR = (1<<SPE);
    1478:	ed e2       	ldi	r30, 0x2D	; 45
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 e4       	ldi	r24, 0x40	; 64
    147e:	80 83       	st	Z, r24
}
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <MSPI_u8SlaveReceive>:
u8 MSPI_u8SlaveReceive(void)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(GET_BIT(SPSR,SPIF)==0);
    148e:	ee e2       	ldi	r30, 0x2E	; 46
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	88 23       	and	r24, r24
    1496:	dc f7       	brge	.-10     	; 0x148e <MSPI_u8SlaveReceive+0x8>
	;
	/* Return data register */
	return SPDR;
    1498:	ef e2       	ldi	r30, 0x2F	; 47
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
}
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <MICU_vInit>:
static u32 global_u32TOvCnt = 0;
static u32 global_u32Capture1 = 0;
static u32 global_u32Capture2 = 0;
static u32 global_u32Capture3 = 0;
static u8  global_u8Flag = 0;
void MICU_vInit(void){
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
	/* Normal / Overflow mode */
	CLR_BIT(TCCR1A,WGM11);
    14ac:	af e4       	ldi	r26, 0x4F	; 79
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ef e4       	ldi	r30, 0x4F	; 79
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8d 7f       	andi	r24, 0xFD	; 253
    14b8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,WGM10);
    14ba:	af e4       	ldi	r26, 0x4F	; 79
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	ef e4       	ldi	r30, 0x4F	; 79
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8e 7f       	andi	r24, 0xFE	; 254
    14c6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM13);
    14c8:	ae e4       	ldi	r26, 0x4E	; 78
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ee e4       	ldi	r30, 0x4E	; 78
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7e       	andi	r24, 0xEF	; 239
    14d4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM12);
    14d6:	ae e4       	ldi	r26, 0x4E	; 78
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	ee e4       	ldi	r30, 0x4E	; 78
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	8c 93       	st	X, r24
	/* Trigger on rising edge */
	SET_BIT(TCCR1B,ICES1);
    14e4:	ae e4       	ldi	r26, 0x4E	; 78
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ee e4       	ldi	r30, 0x4E	; 78
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 64       	ori	r24, 0x40	; 64
    14f0:	8c 93       	st	X, r24
	/* Clock : /8 */
	CLR_BIT(TCCR1B,CS12);
    14f2:	ae e4       	ldi	r26, 0x4E	; 78
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ee e4       	ldi	r30, 0x4E	; 78
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8b 7f       	andi	r24, 0xFB	; 251
    14fe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    1500:	ae e4       	ldi	r26, 0x4E	; 78
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ee e4       	ldi	r30, 0x4E	; 78
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 60       	ori	r24, 0x02	; 2
    150c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,CS10);
    150e:	ae e4       	ldi	r26, 0x4E	; 78
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ee e4       	ldi	r30, 0x4E	; 78
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8e 7f       	andi	r24, 0xFE	; 254
    151a:	8c 93       	st	X, r24
	/* ICU Interrupt enable */
	SET_BIT(TIMSK,TICIE1);
    151c:	a9 e5       	ldi	r26, 0x59	; 89
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e9 e5       	ldi	r30, 0x59	; 89
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 62       	ori	r24, 0x20	; 32
    1528:	8c 93       	st	X, r24
	/* Overflow Interrupt enable */
	SET_BIT(TIMSK,TOIE1);
    152a:	a9 e5       	ldi	r26, 0x59	; 89
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e9 e5       	ldi	r30, 0x59	; 89
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	84 60       	ori	r24, 0x04	; 4
    1536:	8c 93       	st	X, r24
}
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <__vector_9>:
/* Overflow ISR */
void __vector_9(){
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	af 93       	push	r26
    154e:	bf 93       	push	r27
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
	global_u32TOvCnt++;
    1558:	80 91 da 00 	lds	r24, 0x00DA
    155c:	90 91 db 00 	lds	r25, 0x00DB
    1560:	a0 91 dc 00 	lds	r26, 0x00DC
    1564:	b0 91 dd 00 	lds	r27, 0x00DD
    1568:	01 96       	adiw	r24, 0x01	; 1
    156a:	a1 1d       	adc	r26, r1
    156c:	b1 1d       	adc	r27, r1
    156e:	80 93 da 00 	sts	0x00DA, r24
    1572:	90 93 db 00 	sts	0x00DB, r25
    1576:	a0 93 dc 00 	sts	0x00DC, r26
    157a:	b0 93 dd 00 	sts	0x00DD, r27
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	bf 91       	pop	r27
    1584:	af 91       	pop	r26
    1586:	9f 91       	pop	r25
    1588:	8f 91       	pop	r24
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	0f 90       	pop	r0
    1590:	1f 90       	pop	r1
    1592:	18 95       	reti

00001594 <MICU_vSelectEdge>:
void MICU_vSelectEdge(ICU_EDGE_e A_ICUEdge){
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <MICU_vSelectEdge+0x6>
    159a:	0f 92       	push	r0
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	89 83       	std	Y+1, r24	; 0x01
	switch(A_ICUEdge){
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3b 83       	std	Y+3, r19	; 0x03
    15aa:	2a 83       	std	Y+2, r18	; 0x02
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	69 f0       	breq	.+26     	; 0x15ce <MICU_vSelectEdge+0x3a>
    15b4:	2a 81       	ldd	r18, Y+2	; 0x02
    15b6:	3b 81       	ldd	r19, Y+3	; 0x03
    15b8:	21 30       	cpi	r18, 0x01	; 1
    15ba:	31 05       	cpc	r19, r1
    15bc:	79 f4       	brne	.+30     	; 0x15dc <MICU_vSelectEdge+0x48>
	case RISING:  SET_BIT(TCCR1B,ICES1);break;
    15be:	ae e4       	ldi	r26, 0x4E	; 78
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ee e4       	ldi	r30, 0x4E	; 78
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	80 64       	ori	r24, 0x40	; 64
    15ca:	8c 93       	st	X, r24
    15cc:	07 c0       	rjmp	.+14     	; 0x15dc <MICU_vSelectEdge+0x48>
	case FALLING: CLR_BIT(TCCR1B,ICES1);break;
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 7b       	andi	r24, 0xBF	; 191
    15da:	8c 93       	st	X, r24
	}
}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <__vector_6>:
/* ICU ISR */
void __vector_6(){
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	4f 93       	push	r20
    1600:	5f 93       	push	r21
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	ef 93       	push	r30
    160c:	ff 93       	push	r31
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	if (global_u8Flag == 0){
    1616:	80 91 ea 00 	lds	r24, 0x00EA
    161a:	88 23       	and	r24, r24
    161c:	b1 f5       	brne	.+108    	; 0x168a <__vector_6+0xa2>
		global_u32Capture1 = ICR1;
    161e:	e6 e4       	ldi	r30, 0x46	; 70
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	91 81       	ldd	r25, Z+1	; 0x01
    1626:	cc 01       	movw	r24, r24
    1628:	a0 e0       	ldi	r26, 0x00	; 0
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	80 93 de 00 	sts	0x00DE, r24
    1630:	90 93 df 00 	sts	0x00DF, r25
    1634:	a0 93 e0 00 	sts	0x00E0, r26
    1638:	b0 93 e1 00 	sts	0x00E1, r27
		TCNT1 = 0;
    163c:	ec e4       	ldi	r30, 0x4C	; 76
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	11 82       	std	Z+1, r1	; 0x01
    1642:	10 82       	st	Z, r1
		global_u32TOvCnt = 0;
    1644:	10 92 da 00 	sts	0x00DA, r1
    1648:	10 92 db 00 	sts	0x00DB, r1
    164c:	10 92 dc 00 	sts	0x00DC, r1
    1650:	10 92 dd 00 	sts	0x00DD, r1
		global_u8Flag = 1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	80 93 ea 00 	sts	0x00EA, r24
		CLR_BIT(TCCR1B,ICES1);
    165a:	ae e4       	ldi	r26, 0x4E	; 78
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ee e4       	ldi	r30, 0x4E	; 78
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8f 7b       	andi	r24, 0xBF	; 191
    1666:	8c 93       	st	X, r24
		global_u32TOn = 0;
    1668:	10 92 d2 00 	sts	0x00D2, r1
    166c:	10 92 d3 00 	sts	0x00D3, r1
    1670:	10 92 d4 00 	sts	0x00D4, r1
    1674:	10 92 d5 00 	sts	0x00D5, r1
		global_u32Ttotal = 0;
    1678:	10 92 d6 00 	sts	0x00D6, r1
    167c:	10 92 d7 00 	sts	0x00D7, r1
    1680:	10 92 d8 00 	sts	0x00D8, r1
    1684:	10 92 d9 00 	sts	0x00D9, r1
    1688:	93 c0       	rjmp	.+294    	; 0x17b0 <__vector_6+0x1c8>
	}else if (global_u8Flag == 1){
    168a:	80 91 ea 00 	lds	r24, 0x00EA
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	09 f0       	breq	.+2      	; 0x1694 <__vector_6+0xac>
    1692:	49 c0       	rjmp	.+146    	; 0x1726 <__vector_6+0x13e>
		global_u32Capture2 = ICR1;
    1694:	e6 e4       	ldi	r30, 0x46	; 70
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	91 81       	ldd	r25, Z+1	; 0x01
    169c:	cc 01       	movw	r24, r24
    169e:	a0 e0       	ldi	r26, 0x00	; 0
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	80 93 e2 00 	sts	0x00E2, r24
    16a6:	90 93 e3 00 	sts	0x00E3, r25
    16aa:	a0 93 e4 00 	sts	0x00E4, r26
    16ae:	b0 93 e5 00 	sts	0x00E5, r27
		global_u32TOn = global_u32Capture2 + global_u32TOvCnt*65536 -
    16b2:	80 91 da 00 	lds	r24, 0x00DA
    16b6:	90 91 db 00 	lds	r25, 0x00DB
    16ba:	a0 91 dc 00 	lds	r26, 0x00DC
    16be:	b0 91 dd 00 	lds	r27, 0x00DD
    16c2:	ac 01       	movw	r20, r24
    16c4:	33 27       	eor	r19, r19
    16c6:	22 27       	eor	r18, r18
    16c8:	80 91 e2 00 	lds	r24, 0x00E2
    16cc:	90 91 e3 00 	lds	r25, 0x00E3
    16d0:	a0 91 e4 00 	lds	r26, 0x00E4
    16d4:	b0 91 e5 00 	lds	r27, 0x00E5
    16d8:	28 0f       	add	r18, r24
    16da:	39 1f       	adc	r19, r25
    16dc:	4a 1f       	adc	r20, r26
    16de:	5b 1f       	adc	r21, r27
    16e0:	80 91 de 00 	lds	r24, 0x00DE
    16e4:	90 91 df 00 	lds	r25, 0x00DF
    16e8:	a0 91 e0 00 	lds	r26, 0x00E0
    16ec:	b0 91 e1 00 	lds	r27, 0x00E1
    16f0:	79 01       	movw	r14, r18
    16f2:	8a 01       	movw	r16, r20
    16f4:	e8 1a       	sub	r14, r24
    16f6:	f9 0a       	sbc	r15, r25
    16f8:	0a 0b       	sbc	r16, r26
    16fa:	1b 0b       	sbc	r17, r27
    16fc:	d8 01       	movw	r26, r16
    16fe:	c7 01       	movw	r24, r14
    1700:	80 93 d2 00 	sts	0x00D2, r24
    1704:	90 93 d3 00 	sts	0x00D3, r25
    1708:	a0 93 d4 00 	sts	0x00D4, r26
    170c:	b0 93 d5 00 	sts	0x00D5, r27
				global_u32Capture1;
		global_u8Flag = 2;
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	80 93 ea 00 	sts	0x00EA, r24
		SET_BIT(TCCR1B,ICES1);
    1716:	ae e4       	ldi	r26, 0x4E	; 78
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ee e4       	ldi	r30, 0x4E	; 78
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	8c 93       	st	X, r24
    1724:	45 c0       	rjmp	.+138    	; 0x17b0 <__vector_6+0x1c8>
	}else if (global_u8Flag == 2){
    1726:	80 91 ea 00 	lds	r24, 0x00EA
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	09 f0       	breq	.+2      	; 0x1730 <__vector_6+0x148>
    172e:	40 c0       	rjmp	.+128    	; 0x17b0 <__vector_6+0x1c8>
		global_u32Capture3 = ICR1;
    1730:	e6 e4       	ldi	r30, 0x46	; 70
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	cc 01       	movw	r24, r24
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	80 93 e6 00 	sts	0x00E6, r24
    1742:	90 93 e7 00 	sts	0x00E7, r25
    1746:	a0 93 e8 00 	sts	0x00E8, r26
    174a:	b0 93 e9 00 	sts	0x00E9, r27
		global_u32Ttotal = global_u32Capture3 + global_u32TOvCnt*65536 -
    174e:	80 91 da 00 	lds	r24, 0x00DA
    1752:	90 91 db 00 	lds	r25, 0x00DB
    1756:	a0 91 dc 00 	lds	r26, 0x00DC
    175a:	b0 91 dd 00 	lds	r27, 0x00DD
    175e:	ac 01       	movw	r20, r24
    1760:	33 27       	eor	r19, r19
    1762:	22 27       	eor	r18, r18
    1764:	80 91 e6 00 	lds	r24, 0x00E6
    1768:	90 91 e7 00 	lds	r25, 0x00E7
    176c:	a0 91 e8 00 	lds	r26, 0x00E8
    1770:	b0 91 e9 00 	lds	r27, 0x00E9
    1774:	28 0f       	add	r18, r24
    1776:	39 1f       	adc	r19, r25
    1778:	4a 1f       	adc	r20, r26
    177a:	5b 1f       	adc	r21, r27
    177c:	80 91 de 00 	lds	r24, 0x00DE
    1780:	90 91 df 00 	lds	r25, 0x00DF
    1784:	a0 91 e0 00 	lds	r26, 0x00E0
    1788:	b0 91 e1 00 	lds	r27, 0x00E1
    178c:	79 01       	movw	r14, r18
    178e:	8a 01       	movw	r16, r20
    1790:	e8 1a       	sub	r14, r24
    1792:	f9 0a       	sbc	r15, r25
    1794:	0a 0b       	sbc	r16, r26
    1796:	1b 0b       	sbc	r17, r27
    1798:	d8 01       	movw	r26, r16
    179a:	c7 01       	movw	r24, r14
    179c:	80 93 d6 00 	sts	0x00D6, r24
    17a0:	90 93 d7 00 	sts	0x00D7, r25
    17a4:	a0 93 d8 00 	sts	0x00D8, r26
    17a8:	b0 93 d9 00 	sts	0x00D9, r27
						global_u32Capture1;
		global_u8Flag = 0;
    17ac:	10 92 ea 00 	sts	0x00EA, r1
	}
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti

000017da <MICU_u32GetTimeOn>:
u32 MICU_u32GetTimeOn(){
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
	return global_u32TOn;
    17e2:	80 91 d2 00 	lds	r24, 0x00D2
    17e6:	90 91 d3 00 	lds	r25, 0x00D3
    17ea:	a0 91 d4 00 	lds	r26, 0x00D4
    17ee:	b0 91 d5 00 	lds	r27, 0x00D5
}
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <MICU_u32GetTimeTotal>:
u32 MICU_u32GetTimeTotal(){
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	return global_u32Ttotal;
    1804:	80 91 d6 00 	lds	r24, 0x00D6
    1808:	90 91 d7 00 	lds	r25, 0x00D7
    180c:	a0 91 d8 00 	lds	r26, 0x00D8
    1810:	b0 91 d9 00 	lds	r27, 0x00D9
}
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <MGIE_vEnableInterrupts>:
#include "../../LIB/BIT_MATH.h"

#include "GIE_Interface.h"
#include "GIE_Private.h"

void MGIE_vEnableInterrupts(void){
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE_PIN);
    1826:	af e5       	ldi	r26, 0x5F	; 95
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	ef e5       	ldi	r30, 0x5F	; 95
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 68       	ori	r24, 0x80	; 128
    1832:	8c 93       	st	X, r24
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <MGIE_vDisableInterrupts>:

void MGIE_vDisableInterrupts(void){
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GIE_PIN);
    1842:	af e5       	ldi	r26, 0x5F	; 95
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ef e5       	ldi	r30, 0x5F	; 95
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8f 77       	andi	r24, 0x7F	; 127
    184e:	8c 93       	st	X, r24
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <MEXTI_vInit>:

void (*Ptr_To_Int0)(void) = NULL;
void (*Ptr_To_Int1)(void) = NULL;
void (*Ptr_To_Int2)(void) = NULL;

void MEXTI_vInit(){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
#if (INT1_ENABLED == ENABLE)
	/* SET INTERRUPT 1 TO FALLING EDGE */
	SET_BIT(MCUCR,ISC11);
    185e:	a5 e5       	ldi	r26, 0x55	; 85
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e5       	ldi	r30, 0x55	; 85
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC10);
    186c:	a5 e5       	ldi	r26, 0x55	; 85
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e5 e5       	ldi	r30, 0x55	; 85
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8b 7f       	andi	r24, 0xFB	; 251
    1878:	8c 93       	st	X, r24
	/* Enable INT1 */
	SET_BIT(GICR,INT1);
    187a:	ab e5       	ldi	r26, 0x5B	; 91
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e5       	ldi	r30, 0x5B	; 91
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 68       	ori	r24, 0x80	; 128
    1886:	8c 93       	st	X, r24
#endif
#if (INT0_ENABLED == ENABLE)
	/* SET INTERRUPT 0 TO falling EDGE */
	SET_BIT(MCUCR,ISC01);
    1888:	a5 e5       	ldi	r26, 0x55	; 85
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e5 e5       	ldi	r30, 0x55	; 85
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	82 60       	ori	r24, 0x02	; 2
    1894:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC00);
    1896:	a5 e5       	ldi	r26, 0x55	; 85
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e5       	ldi	r30, 0x55	; 85
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	8e 7f       	andi	r24, 0xFE	; 254
    18a2:	8c 93       	st	X, r24
	/* Enable INT0 */
	SET_BIT(GICR,INT0);
    18a4:	ab e5       	ldi	r26, 0x5B	; 91
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	eb e5       	ldi	r30, 0x5B	; 91
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 64       	ori	r24, 0x40	; 64
    18b0:	8c 93       	st	X, r24
#endif
#if (INT2_ENABLED == ENABLE)
	/* SET INTERRUPT 2 TO RISING EDGE */
	SET_BIT(MCUCSR,ISC2);
    18b2:	a4 e5       	ldi	r26, 0x54	; 84
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e4 e5       	ldi	r30, 0x54	; 84
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 64       	ori	r24, 0x40	; 64
    18be:	8c 93       	st	X, r24
	/* Enable INT0 */
	SET_BIT(GICR,INT2);
    18c0:	ab e5       	ldi	r26, 0x5B	; 91
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e5       	ldi	r30, 0x5B	; 91
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	8c 93       	st	X, r24
#endif
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <MEXTI_vSetCallBack>:
void MEXTI_vSetCallBack(void (*ptr_to_fun)(void), u8 A_IntID){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <MEXTI_vSetCallBack+0x6>
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	6b 83       	std	Y+3, r22	; 0x03
	if (A_IntID == 0){
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	88 23       	and	r24, r24
    18ea:	39 f4       	brne	.+14     	; 0x18fa <MEXTI_vSetCallBack+0x26>
		Ptr_To_Int0 = ptr_to_fun;
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	90 93 ec 00 	sts	0x00EC, r25
    18f4:	80 93 eb 00 	sts	0x00EB, r24
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <MEXTI_vSetCallBack+0x4c>
	}else if (A_IntID == 1){
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	39 f4       	brne	.+14     	; 0x190e <MEXTI_vSetCallBack+0x3a>
		Ptr_To_Int1 = ptr_to_fun;
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	90 93 ee 00 	sts	0x00EE, r25
    1908:	80 93 ed 00 	sts	0x00ED, r24
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <MEXTI_vSetCallBack+0x4c>
	}else if (A_IntID == 2){
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	82 30       	cpi	r24, 0x02	; 2
    1912:	31 f4       	brne	.+12     	; 0x1920 <MEXTI_vSetCallBack+0x4c>
		Ptr_To_Int2 = ptr_to_fun;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	90 93 f0 00 	sts	0x00F0, r25
    191c:	80 93 ef 00 	sts	0x00EF, r24
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <__vector_1>:
// INT 0
void __vector_1(){
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	2f 93       	push	r18
    1938:	3f 93       	push	r19
    193a:	4f 93       	push	r20
    193c:	5f 93       	push	r21
    193e:	6f 93       	push	r22
    1940:	7f 93       	push	r23
    1942:	8f 93       	push	r24
    1944:	9f 93       	push	r25
    1946:	af 93       	push	r26
    1948:	bf 93       	push	r27
    194a:	ef 93       	push	r30
    194c:	ff 93       	push	r31
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_To_Int0 != NULL){
    1956:	80 91 eb 00 	lds	r24, 0x00EB
    195a:	90 91 ec 00 	lds	r25, 0x00EC
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	29 f0       	breq	.+10     	; 0x196c <__vector_1+0x40>
		Ptr_To_Int0();
    1962:	e0 91 eb 00 	lds	r30, 0x00EB
    1966:	f0 91 ec 00 	lds	r31, 0x00EC
    196a:	09 95       	icall
	}
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <__vector_2>:
// INT 1
void __vector_2(){
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	2f 93       	push	r18
    199e:	3f 93       	push	r19
    19a0:	4f 93       	push	r20
    19a2:	5f 93       	push	r21
    19a4:	6f 93       	push	r22
    19a6:	7f 93       	push	r23
    19a8:	8f 93       	push	r24
    19aa:	9f 93       	push	r25
    19ac:	af 93       	push	r26
    19ae:	bf 93       	push	r27
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_To_Int1 != NULL){
    19bc:	80 91 ed 00 	lds	r24, 0x00ED
    19c0:	90 91 ee 00 	lds	r25, 0x00EE
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	29 f0       	breq	.+10     	; 0x19d2 <__vector_2+0x40>
		Ptr_To_Int1();
    19c8:	e0 91 ed 00 	lds	r30, 0x00ED
    19cc:	f0 91 ee 00 	lds	r31, 0x00EE
    19d0:	09 95       	icall
	}
}
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	ff 91       	pop	r31
    19d8:	ef 91       	pop	r30
    19da:	bf 91       	pop	r27
    19dc:	af 91       	pop	r26
    19de:	9f 91       	pop	r25
    19e0:	8f 91       	pop	r24
    19e2:	7f 91       	pop	r23
    19e4:	6f 91       	pop	r22
    19e6:	5f 91       	pop	r21
    19e8:	4f 91       	pop	r20
    19ea:	3f 91       	pop	r19
    19ec:	2f 91       	pop	r18
    19ee:	0f 90       	pop	r0
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	0f 90       	pop	r0
    19f4:	1f 90       	pop	r1
    19f6:	18 95       	reti

000019f8 <__vector_3>:
// INT 2
void __vector_3(){
    19f8:	1f 92       	push	r1
    19fa:	0f 92       	push	r0
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	0f 92       	push	r0
    1a00:	11 24       	eor	r1, r1
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
    1a18:	ff 93       	push	r31
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	if (Ptr_To_Int2 != NULL){
    1a22:	80 91 ef 00 	lds	r24, 0x00EF
    1a26:	90 91 f0 00 	lds	r25, 0x00F0
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <__vector_3+0x40>
		Ptr_To_Int2();
    1a2e:	e0 91 ef 00 	lds	r30, 0x00EF
    1a32:	f0 91 f0 00 	lds	r31, 0x00F0
    1a36:	09 95       	icall
	}
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <MDIO_vSetPinDirection>:

/* Set pin direction */
/* A_u8portNumber :  0 - 3 (PORTA - PORTB - PORTC - PORTD) */
/* A_u8pinNumber  :  0 - 7 (PIN0 - PIN1 ---- PIN7) */
/* A_u8dir        : 0 - 1 (INPUT - OUTPUT) */
void MDIO_vSetPinDirection(u8 A_u8portNumber, u8 A_u8pinNumber, u8 A_u8dir){
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	27 97       	sbiw	r28, 0x07	; 7
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	6a 83       	std	Y+2, r22	; 0x02
    1a76:	4b 83       	std	Y+3, r20	; 0x03
	if (A_u8dir == INPUT){
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f0       	breq	.+2      	; 0x1a80 <MDIO_vSetPinDirection+0x22>
    1a7e:	74 c0       	rjmp	.+232    	; 0x1b68 <MDIO_vSetPinDirection+0x10a>
		switch(A_u8portNumber){
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3f 83       	std	Y+7, r19	; 0x07
    1a88:	2e 83       	std	Y+6, r18	; 0x06
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	59 f1       	breq	.+86     	; 0x1aea <MDIO_vSetPinDirection+0x8c>
    1a94:	2e 81       	ldd	r18, Y+6	; 0x06
    1a96:	3f 81       	ldd	r19, Y+7	; 0x07
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <MDIO_vSetPinDirection+0x4a>
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f0       	breq	.+26     	; 0x1ac0 <MDIO_vSetPinDirection+0x62>
    1aa6:	d2 c0       	rjmp	.+420    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
    1aa8:	2e 81       	ldd	r18, Y+6	; 0x06
    1aaa:	3f 81       	ldd	r19, Y+7	; 0x07
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	89 f1       	breq	.+98     	; 0x1b14 <MDIO_vSetPinDirection+0xb6>
    1ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	09 f4       	brne	.+2      	; 0x1abe <MDIO_vSetPinDirection+0x60>
    1abc:	40 c0       	rjmp	.+128    	; 0x1b3e <MDIO_vSetPinDirection+0xe0>
    1abe:	c6 c0       	rjmp	.+396    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_A:
			CLR_BIT(DDRA,A_u8pinNumber);break;
    1ac0:	aa e3       	ldi	r26, 0x3A	; 58
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	ea e3       	ldi	r30, 0x3A	; 58
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <MDIO_vSetPinDirection+0x80>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <MDIO_vSetPinDirection+0x7c>
    1ae2:	80 95       	com	r24
    1ae4:	84 23       	and	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	b1 c0       	rjmp	.+354    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_B:
			CLR_BIT(DDRB,A_u8pinNumber);break;
    1aea:	a7 e3       	ldi	r26, 0x37	; 55
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e7 e3       	ldi	r30, 0x37	; 55
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <MDIO_vSetPinDirection+0xaa>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <MDIO_vSetPinDirection+0xa6>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	9c c0       	rjmp	.+312    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_C:
			CLR_BIT(DDRC,A_u8pinNumber);break;
    1b14:	a4 e3       	ldi	r26, 0x34	; 52
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e4 e3       	ldi	r30, 0x34	; 52
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <MDIO_vSetPinDirection+0xd4>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <MDIO_vSetPinDirection+0xd0>
    1b36:	80 95       	com	r24
    1b38:	84 23       	and	r24, r20
    1b3a:	8c 93       	st	X, r24
    1b3c:	87 c0       	rjmp	.+270    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_D:
			CLR_BIT(DDRD,A_u8pinNumber);break;
    1b3e:	a1 e3       	ldi	r26, 0x31	; 49
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e1 e3       	ldi	r30, 0x31	; 49
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	48 2f       	mov	r20, r24
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <MDIO_vSetPinDirection+0xfe>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <MDIO_vSetPinDirection+0xfa>
    1b60:	80 95       	com	r24
    1b62:	84 23       	and	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	72 c0       	rjmp	.+228    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		}
	}else if (A_u8dir == OUTPUT){
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <MDIO_vSetPinDirection+0x112>
    1b6e:	6e c0       	rjmp	.+220    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		switch(A_u8portNumber){
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	3d 83       	std	Y+5, r19	; 0x05
    1b78:	2c 83       	std	Y+4, r18	; 0x04
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	49 f1       	breq	.+82     	; 0x1bd6 <MDIO_vSetPinDirection+0x178>
    1b84:	2c 81       	ldd	r18, Y+4	; 0x04
    1b86:	3d 81       	ldd	r19, Y+5	; 0x05
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <MDIO_vSetPinDirection+0x13a>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	61 f0       	breq	.+24     	; 0x1bae <MDIO_vSetPinDirection+0x150>
    1b96:	5a c0       	rjmp	.+180    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
    1b98:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	71 f1       	breq	.+92     	; 0x1bfe <MDIO_vSetPinDirection+0x1a0>
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	91 05       	cpc	r25, r1
    1baa:	e9 f1       	breq	.+122    	; 0x1c26 <MDIO_vSetPinDirection+0x1c8>
    1bac:	4f c0       	rjmp	.+158    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_A:
			SET_BIT(DDRA,A_u8pinNumber);break;
    1bae:	aa e3       	ldi	r26, 0x3A	; 58
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ea e3       	ldi	r30, 0x3A	; 58
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	48 2f       	mov	r20, r24
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <MDIO_vSetPinDirection+0x16e>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	0a 94       	dec	r0
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <MDIO_vSetPinDirection+0x16a>
    1bd0:	84 2b       	or	r24, r20
    1bd2:	8c 93       	st	X, r24
    1bd4:	3b c0       	rjmp	.+118    	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_B:
			SET_BIT(DDRB,A_u8pinNumber);break;
    1bd6:	a7 e3       	ldi	r26, 0x37	; 55
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e7 e3       	ldi	r30, 0x37	; 55
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <MDIO_vSetPinDirection+0x196>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <MDIO_vSetPinDirection+0x192>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	27 c0       	rjmp	.+78     	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_C:
			SET_BIT(DDRC,A_u8pinNumber);break;
    1bfe:	a4 e3       	ldi	r26, 0x34	; 52
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e4 e3       	ldi	r30, 0x34	; 52
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <MDIO_vSetPinDirection+0x1be>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <MDIO_vSetPinDirection+0x1ba>
    1c20:	84 2b       	or	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	13 c0       	rjmp	.+38     	; 0x1c4c <MDIO_vSetPinDirection+0x1ee>
		case PORT_D:
			SET_BIT(DDRD,A_u8pinNumber);break;
    1c26:	a1 e3       	ldi	r26, 0x31	; 49
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e1 e3       	ldi	r30, 0x31	; 49
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <MDIO_vSetPinDirection+0x1e6>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <MDIO_vSetPinDirection+0x1e2>
    1c48:	84 2b       	or	r24, r20
    1c4a:	8c 93       	st	X, r24
		}
	}else {
		/* Do nothing */
	}
}
    1c4c:	27 96       	adiw	r28, 0x07	; 7
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <MDIO_vSetPortDirection>:

/* DDRA = 90; */

void MDIO_vSetPortDirection(u8 A_u8portNumber, u8 A_u8dir){
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <MDIO_vSetPortDirection+0x6>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <MDIO_vSetPortDirection+0x8>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8portNumber){
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3c 83       	std	Y+4, r19	; 0x04
    1c76:	2b 83       	std	Y+3, r18	; 0x03
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	d1 f0       	breq	.+52     	; 0x1cb6 <MDIO_vSetPortDirection+0x58>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <MDIO_vSetPortDirection+0x38>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	61 f0       	breq	.+24     	; 0x1cac <MDIO_vSetPortDirection+0x4e>
    1c94:	1e c0       	rjmp	.+60     	; 0x1cd2 <MDIO_vSetPortDirection+0x74>
    1c96:	2b 81       	ldd	r18, Y+3	; 0x03
    1c98:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <MDIO_vSetPortDirection+0x62>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	81 f0       	breq	.+32     	; 0x1cca <MDIO_vSetPortDirection+0x6c>
    1caa:	13 c0       	rjmp	.+38     	; 0x1cd2 <MDIO_vSetPortDirection+0x74>
	case PORT_A:
		DDRA = A_u8dir;break;
    1cac:	ea e3       	ldi	r30, 0x3A	; 58
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 83       	st	Z, r24
    1cb4:	0e c0       	rjmp	.+28     	; 0x1cd2 <MDIO_vSetPortDirection+0x74>
	case PORT_B:
		DDRB = A_u8dir;break;
    1cb6:	e7 e3       	ldi	r30, 0x37	; 55
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 83       	st	Z, r24
    1cbe:	09 c0       	rjmp	.+18     	; 0x1cd2 <MDIO_vSetPortDirection+0x74>
	case PORT_C:
		DDRC = A_u8dir;break;
    1cc0:	e4 e3       	ldi	r30, 0x34	; 52
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 83       	st	Z, r24
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <MDIO_vSetPortDirection+0x74>
	case PORT_D:
		DDRD = A_u8dir;break;
    1cca:	e1 e3       	ldi	r30, 0x31	; 49
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	80 83       	st	Z, r24
	}
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <MDIO_vSetPinValue>:
/* pin high/low */
void MDIO_vSetPinValue(u8 A_u8portNumber, u8 A_u8pinNumber, u8 A_u8val){
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	27 97       	sbiw	r28, 0x07	; 7
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	6a 83       	std	Y+2, r22	; 0x02
    1cf8:	4b 83       	std	Y+3, r20	; 0x03
	// if it is output high
	if (A_u8val == HIGH){
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <MDIO_vSetPinValue+0x22>
    1d00:	6f c0       	rjmp	.+222    	; 0x1de0 <MDIO_vSetPinValue+0x100>
		switch(A_u8portNumber){
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	3f 83       	std	Y+7, r19	; 0x07
    1d0a:	2e 83       	std	Y+6, r18	; 0x06
    1d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	91 05       	cpc	r25, r1
    1d14:	49 f1       	breq	.+82     	; 0x1d68 <MDIO_vSetPinValue+0x88>
    1d16:	2e 81       	ldd	r18, Y+6	; 0x06
    1d18:	3f 81       	ldd	r19, Y+7	; 0x07
    1d1a:	22 30       	cpi	r18, 0x02	; 2
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <MDIO_vSetPinValue+0x4a>
    1d20:	8e 81       	ldd	r24, Y+6	; 0x06
    1d22:	9f 81       	ldd	r25, Y+7	; 0x07
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	61 f0       	breq	.+24     	; 0x1d40 <MDIO_vSetPinValue+0x60>
    1d28:	d2 c0       	rjmp	.+420    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
    1d2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d2e:	22 30       	cpi	r18, 0x02	; 2
    1d30:	31 05       	cpc	r19, r1
    1d32:	71 f1       	breq	.+92     	; 0x1d90 <MDIO_vSetPinValue+0xb0>
    1d34:	8e 81       	ldd	r24, Y+6	; 0x06
    1d36:	9f 81       	ldd	r25, Y+7	; 0x07
    1d38:	83 30       	cpi	r24, 0x03	; 3
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	e9 f1       	breq	.+122    	; 0x1db8 <MDIO_vSetPinValue+0xd8>
    1d3e:	c7 c0       	rjmp	.+398    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_A: SET_BIT(PORTA,A_u8pinNumber);break;
    1d40:	ab e3       	ldi	r26, 0x3B	; 59
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	eb e3       	ldi	r30, 0x3B	; 59
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <MDIO_vSetPinValue+0x7e>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <MDIO_vSetPinValue+0x7a>
    1d62:	84 2b       	or	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	b3 c0       	rjmp	.+358    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_B: SET_BIT(PORTB,A_u8pinNumber);break;
    1d68:	a8 e3       	ldi	r26, 0x38	; 56
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e8 e3       	ldi	r30, 0x38	; 56
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <MDIO_vSetPinValue+0xa6>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <MDIO_vSetPinValue+0xa2>
    1d8a:	84 2b       	or	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	9f c0       	rjmp	.+318    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_C: SET_BIT(PORTC,A_u8pinNumber);break;
    1d90:	a5 e3       	ldi	r26, 0x35	; 53
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e3       	ldi	r30, 0x35	; 53
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <MDIO_vSetPinValue+0xce>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <MDIO_vSetPinValue+0xca>
    1db2:	84 2b       	or	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	8b c0       	rjmp	.+278    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_D: SET_BIT(PORTD,A_u8pinNumber);break;
    1db8:	a2 e3       	ldi	r26, 0x32	; 50
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <MDIO_vSetPinValue+0xf6>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <MDIO_vSetPinValue+0xf2>
    1dda:	84 2b       	or	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	77 c0       	rjmp	.+238    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		}
	}else if (A_u8val == LOW){
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	88 23       	and	r24, r24
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <MDIO_vSetPinValue+0x108>
    1de6:	73 c0       	rjmp	.+230    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		switch(A_u8portNumber){
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	3d 83       	std	Y+5, r19	; 0x05
    1df0:	2c 83       	std	Y+4, r18	; 0x04
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	9d 81       	ldd	r25, Y+5	; 0x05
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 05       	cpc	r25, r1
    1dfa:	59 f1       	breq	.+86     	; 0x1e52 <MDIO_vSetPinValue+0x172>
    1dfc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfe:	3d 81       	ldd	r19, Y+5	; 0x05
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <MDIO_vSetPinValue+0x130>
    1e06:	8c 81       	ldd	r24, Y+4	; 0x04
    1e08:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f0       	breq	.+26     	; 0x1e28 <MDIO_vSetPinValue+0x148>
    1e0e:	5f c0       	rjmp	.+190    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
    1e10:	2c 81       	ldd	r18, Y+4	; 0x04
    1e12:	3d 81       	ldd	r19, Y+5	; 0x05
    1e14:	22 30       	cpi	r18, 0x02	; 2
    1e16:	31 05       	cpc	r19, r1
    1e18:	89 f1       	breq	.+98     	; 0x1e7c <MDIO_vSetPinValue+0x19c>
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	83 30       	cpi	r24, 0x03	; 3
    1e20:	91 05       	cpc	r25, r1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <MDIO_vSetPinValue+0x146>
    1e24:	40 c0       	rjmp	.+128    	; 0x1ea6 <MDIO_vSetPinValue+0x1c6>
    1e26:	53 c0       	rjmp	.+166    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_A: CLR_BIT(PORTA,A_u8pinNumber);break;
    1e28:	ab e3       	ldi	r26, 0x3B	; 59
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	eb e3       	ldi	r30, 0x3B	; 59
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <MDIO_vSetPinValue+0x166>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <MDIO_vSetPinValue+0x162>
    1e4a:	80 95       	com	r24
    1e4c:	84 23       	and	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	3e c0       	rjmp	.+124    	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_B: CLR_BIT(PORTB,A_u8pinNumber);break;
    1e52:	a8 e3       	ldi	r26, 0x38	; 56
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e8 e3       	ldi	r30, 0x38	; 56
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <MDIO_vSetPinValue+0x190>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <MDIO_vSetPinValue+0x18c>
    1e74:	80 95       	com	r24
    1e76:	84 23       	and	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	29 c0       	rjmp	.+82     	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_C: CLR_BIT(PORTC,A_u8pinNumber);break;
    1e7c:	a5 e3       	ldi	r26, 0x35	; 53
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e5 e3       	ldi	r30, 0x35	; 53
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <MDIO_vSetPinValue+0x1ba>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <MDIO_vSetPinValue+0x1b6>
    1e9e:	80 95       	com	r24
    1ea0:	84 23       	and	r24, r20
    1ea2:	8c 93       	st	X, r24
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <MDIO_vSetPinValue+0x1ee>
		case PORT_D: CLR_BIT(PORTD,A_u8pinNumber);break;
    1ea6:	a2 e3       	ldi	r26, 0x32	; 50
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e2 e3       	ldi	r30, 0x32	; 50
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	48 2f       	mov	r20, r24
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	02 2e       	mov	r0, r18
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <MDIO_vSetPinValue+0x1e4>
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	0a 94       	dec	r0
    1ec6:	e2 f7       	brpl	.-8      	; 0x1ec0 <MDIO_vSetPinValue+0x1e0>
    1ec8:	80 95       	com	r24
    1eca:	84 23       	and	r24, r20
    1ecc:	8c 93       	st	X, r24
		}
	}else {
		/* Do nothing */
	}
}
    1ece:	27 96       	adiw	r28, 0x07	; 7
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <MDIO_vSetPortValue>:
/* port pins ===> val  */
void MDIO_vSetPortValue(u8 A_u8portNumber, u8 A_u8val){
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <MDIO_vSetPortValue+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <MDIO_vSetPortValue+0x8>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8portNumber){
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	3c 83       	std	Y+4, r19	; 0x04
    1ef8:	2b 83       	std	Y+3, r18	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	91 05       	cpc	r25, r1
    1f02:	d1 f0       	breq	.+52     	; 0x1f38 <MDIO_vSetPortValue+0x58>
    1f04:	2b 81       	ldd	r18, Y+3	; 0x03
    1f06:	3c 81       	ldd	r19, Y+4	; 0x04
    1f08:	22 30       	cpi	r18, 0x02	; 2
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <MDIO_vSetPortValue+0x38>
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	61 f0       	breq	.+24     	; 0x1f2e <MDIO_vSetPortValue+0x4e>
    1f16:	1e c0       	rjmp	.+60     	; 0x1f54 <MDIO_vSetPortValue+0x74>
    1f18:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1c:	22 30       	cpi	r18, 0x02	; 2
    1f1e:	31 05       	cpc	r19, r1
    1f20:	81 f0       	breq	.+32     	; 0x1f42 <MDIO_vSetPortValue+0x62>
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	83 30       	cpi	r24, 0x03	; 3
    1f28:	91 05       	cpc	r25, r1
    1f2a:	81 f0       	breq	.+32     	; 0x1f4c <MDIO_vSetPortValue+0x6c>
    1f2c:	13 c0       	rjmp	.+38     	; 0x1f54 <MDIO_vSetPortValue+0x74>
	case PORT_A: PORTA = A_u8val;break;
    1f2e:	eb e3       	ldi	r30, 0x3B	; 59
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	80 83       	st	Z, r24
    1f36:	0e c0       	rjmp	.+28     	; 0x1f54 <MDIO_vSetPortValue+0x74>
	case PORT_B: PORTB = A_u8val;break;
    1f38:	e8 e3       	ldi	r30, 0x38	; 56
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	80 83       	st	Z, r24
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <MDIO_vSetPortValue+0x74>
	case PORT_C: PORTC = A_u8val;break;
    1f42:	e5 e3       	ldi	r30, 0x35	; 53
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	80 83       	st	Z, r24
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <MDIO_vSetPortValue+0x74>
	case PORT_D: PORTD = A_u8val;break;
    1f4c:	e2 e3       	ldi	r30, 0x32	; 50
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	80 83       	st	Z, r24
	}
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <MDIO_vTogglePinValue>:
/* high ==> low, low ===> high */
void MDIO_vTogglePinValue(u8 A_u8portNumber, u8 A_u8pinNumber){
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <MDIO_vTogglePinValue+0x6>
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <MDIO_vTogglePinValue+0x8>
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8portNumber){
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	3c 83       	std	Y+4, r19	; 0x04
    1f7a:	2b 83       	std	Y+3, r18	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	91 05       	cpc	r25, r1
    1f84:	49 f1       	breq	.+82     	; 0x1fd8 <MDIO_vTogglePinValue+0x76>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <MDIO_vTogglePinValue+0x38>
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	61 f0       	breq	.+24     	; 0x1fb0 <MDIO_vTogglePinValue+0x4e>
    1f98:	5a c0       	rjmp	.+180    	; 0x204e <MDIO_vTogglePinValue+0xec>
    1f9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f9e:	22 30       	cpi	r18, 0x02	; 2
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	71 f1       	breq	.+92     	; 0x2000 <MDIO_vTogglePinValue+0x9e>
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	83 30       	cpi	r24, 0x03	; 3
    1faa:	91 05       	cpc	r25, r1
    1fac:	e9 f1       	breq	.+122    	; 0x2028 <MDIO_vTogglePinValue+0xc6>
    1fae:	4f c0       	rjmp	.+158    	; 0x204e <MDIO_vTogglePinValue+0xec>
	case PORT_A: TOGGLE_BIT(PORTA,A_u8pinNumber);break;
    1fb0:	ab e3       	ldi	r26, 0x3B	; 59
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	eb e3       	ldi	r30, 0x3B	; 59
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <MDIO_vTogglePinValue+0x6c>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <MDIO_vTogglePinValue+0x68>
    1fd2:	84 27       	eor	r24, r20
    1fd4:	8c 93       	st	X, r24
    1fd6:	3b c0       	rjmp	.+118    	; 0x204e <MDIO_vTogglePinValue+0xec>
	case PORT_B: TOGGLE_BIT(PORTB,A_u8pinNumber);break;
    1fd8:	a8 e3       	ldi	r26, 0x38	; 56
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <MDIO_vTogglePinValue+0x94>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <MDIO_vTogglePinValue+0x90>
    1ffa:	84 27       	eor	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	27 c0       	rjmp	.+78     	; 0x204e <MDIO_vTogglePinValue+0xec>
	case PORT_C: TOGGLE_BIT(PORTC,A_u8pinNumber);break;
    2000:	a5 e3       	ldi	r26, 0x35	; 53
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e5 e3       	ldi	r30, 0x35	; 53
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <MDIO_vTogglePinValue+0xbc>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <MDIO_vTogglePinValue+0xb8>
    2022:	84 27       	eor	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	13 c0       	rjmp	.+38     	; 0x204e <MDIO_vTogglePinValue+0xec>
	case PORT_D: TOGGLE_BIT(PORTD,A_u8pinNumber);break;
    2028:	a2 e3       	ldi	r26, 0x32	; 50
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e2 e3       	ldi	r30, 0x32	; 50
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 2e       	mov	r0, r18
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <MDIO_vTogglePinValue+0xe4>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0a 94       	dec	r0
    2048:	e2 f7       	brpl	.-8      	; 0x2042 <MDIO_vTogglePinValue+0xe0>
    204a:	84 27       	eor	r24, r20
    204c:	8c 93       	st	X, r24
	}
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <MDIO_U8GetPinValue>:
/* return high/low */
u8 MDIO_U8GetPinValue(u8 A_u8portNumber, u8 A_u8pinNumber){
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <MDIO_U8GetPinValue+0x6>
    2062:	00 d0       	rcall	.+0      	; 0x2064 <MDIO_U8GetPinValue+0x8>
    2064:	0f 92       	push	r0
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Value = 255;
    206e:	8f ef       	ldi	r24, 0xFF	; 255
    2070:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8portNumber){
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	3d 83       	std	Y+5, r19	; 0x05
    207a:	2c 83       	std	Y+4, r18	; 0x04
    207c:	4c 81       	ldd	r20, Y+4	; 0x04
    207e:	5d 81       	ldd	r21, Y+5	; 0x05
    2080:	41 30       	cpi	r20, 0x01	; 1
    2082:	51 05       	cpc	r21, r1
    2084:	41 f1       	breq	.+80     	; 0x20d6 <MDIO_U8GetPinValue+0x7a>
    2086:	8c 81       	ldd	r24, Y+4	; 0x04
    2088:	9d 81       	ldd	r25, Y+5	; 0x05
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	91 05       	cpc	r25, r1
    208e:	34 f4       	brge	.+12     	; 0x209c <MDIO_U8GetPinValue+0x40>
    2090:	2c 81       	ldd	r18, Y+4	; 0x04
    2092:	3d 81       	ldd	r19, Y+5	; 0x05
    2094:	21 15       	cp	r18, r1
    2096:	31 05       	cpc	r19, r1
    2098:	61 f0       	breq	.+24     	; 0x20b2 <MDIO_U8GetPinValue+0x56>
    209a:	52 c0       	rjmp	.+164    	; 0x2140 <MDIO_U8GetPinValue+0xe4>
    209c:	4c 81       	ldd	r20, Y+4	; 0x04
    209e:	5d 81       	ldd	r21, Y+5	; 0x05
    20a0:	42 30       	cpi	r20, 0x02	; 2
    20a2:	51 05       	cpc	r21, r1
    20a4:	51 f1       	breq	.+84     	; 0x20fa <MDIO_U8GetPinValue+0x9e>
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	83 30       	cpi	r24, 0x03	; 3
    20ac:	91 05       	cpc	r25, r1
    20ae:	b9 f1       	breq	.+110    	; 0x211e <MDIO_U8GetPinValue+0xc2>
    20b0:	47 c0       	rjmp	.+142    	; 0x2140 <MDIO_U8GetPinValue+0xe4>
	case PORT_A: local_u8Value = GET_BIT(PINA,A_u8pinNumber);break;
    20b2:	e9 e3       	ldi	r30, 0x39	; 57
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a9 01       	movw	r20, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <MDIO_U8GetPinValue+0x6e>
    20c6:	55 95       	asr	r21
    20c8:	47 95       	ror	r20
    20ca:	8a 95       	dec	r24
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <MDIO_U8GetPinValue+0x6a>
    20ce:	ca 01       	movw	r24, r20
    20d0:	81 70       	andi	r24, 0x01	; 1
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	35 c0       	rjmp	.+106    	; 0x2140 <MDIO_U8GetPinValue+0xe4>
	case PORT_B: local_u8Value = GET_BIT(PINB,A_u8pinNumber);break;
    20d6:	e6 e3       	ldi	r30, 0x36	; 54
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	88 2f       	mov	r24, r24
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	a9 01       	movw	r20, r18
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <MDIO_U8GetPinValue+0x92>
    20ea:	55 95       	asr	r21
    20ec:	47 95       	ror	r20
    20ee:	8a 95       	dec	r24
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <MDIO_U8GetPinValue+0x8e>
    20f2:	ca 01       	movw	r24, r20
    20f4:	81 70       	andi	r24, 0x01	; 1
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	23 c0       	rjmp	.+70     	; 0x2140 <MDIO_U8GetPinValue+0xe4>
	case PORT_C: local_u8Value = GET_BIT(PINC,A_u8pinNumber);break;
    20fa:	e3 e3       	ldi	r30, 0x33	; 51
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a9 01       	movw	r20, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <MDIO_U8GetPinValue+0xb6>
    210e:	55 95       	asr	r21
    2110:	47 95       	ror	r20
    2112:	8a 95       	dec	r24
    2114:	e2 f7       	brpl	.-8      	; 0x210e <MDIO_U8GetPinValue+0xb2>
    2116:	ca 01       	movw	r24, r20
    2118:	81 70       	andi	r24, 0x01	; 1
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	11 c0       	rjmp	.+34     	; 0x2140 <MDIO_U8GetPinValue+0xe4>
	case PORT_D: local_u8Value = GET_BIT(PIND,A_u8pinNumber);break;
    211e:	e0 e3       	ldi	r30, 0x30	; 48
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a9 01       	movw	r20, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <MDIO_U8GetPinValue+0xda>
    2132:	55 95       	asr	r21
    2134:	47 95       	ror	r20
    2136:	8a 95       	dec	r24
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <MDIO_U8GetPinValue+0xd6>
    213a:	ca 01       	movw	r24, r20
    213c:	81 70       	andi	r24, 0x01	; 1
    213e:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8Value;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <MADC_vInit>:
/*
 * Init (voltage source - prescalar - auto trigger - Data direction)
 * read (Enable ADC - Start conversion - wait for flag - return reading)
 * */

void MADC_vInit(void){
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	/* voltage source */
	SET_BIT(ADMUX,REFS0);
    215a:	a7 e2       	ldi	r26, 0x27	; 39
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e7 e2       	ldi	r30, 0x27	; 39
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	80 64       	ori	r24, 0x40	; 64
    2166:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    2168:	a7 e2       	ldi	r26, 0x27	; 39
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e7 e2       	ldi	r30, 0x27	; 39
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8f 77       	andi	r24, 0x7F	; 127
    2174:	8c 93       	st	X, r24
	/* Data direction : Right */
	CLR_BIT(ADMUX,ADLAR);
    2176:	a7 e2       	ldi	r26, 0x27	; 39
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e7 e2       	ldi	r30, 0x27	; 39
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8f 7d       	andi	r24, 0xDF	; 223
    2182:	8c 93       	st	X, r24
	/* no auto trigger */
	CLR_BIT(ADCSRA,ADATE);
    2184:	a6 e2       	ldi	r26, 0x26	; 38
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e6 e2       	ldi	r30, 0x26	; 38
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8f 7d       	andi	r24, 0xDF	; 223
    2190:	8c 93       	st	X, r24
	/* Prescalar ==> /8 */
	SET_BIT(ADCSRA,ADPS2);
    2192:	a6 e2       	ldi	r26, 0x26	; 38
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e6 e2       	ldi	r30, 0x26	; 38
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	84 60       	ori	r24, 0x04	; 4
    219e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    21a0:	a6 e2       	ldi	r26, 0x26	; 38
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 e2       	ldi	r30, 0x26	; 38
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	82 60       	ori	r24, 0x02	; 2
    21ac:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS0);
    21ae:	a6 e2       	ldi	r26, 0x26	; 38
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e6 e2       	ldi	r30, 0x26	; 38
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	8e 7f       	andi	r24, 0xFE	; 254
    21ba:	8c 93       	st	X, r24
}
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <MADC_u8GetDigitalValue>:
/* 00000 ====> 11111  0===>31 */
/* 00011111 */
u16 MADC_u8GetDigitalValue(u8 A_u8Channel){
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
	A_u8Channel &= CHANNEL_MASK; /* channel 5 bits */
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	8f 71       	andi	r24, 0x1F	; 31
    21d2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= ADMUX_MASK; /* save last 3 bits, clear right 5 bits */
    21d4:	a7 e2       	ldi	r26, 0x27	; 39
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e7 e2       	ldi	r30, 0x27	; 39
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	80 7e       	andi	r24, 0xE0	; 224
    21e0:	8c 93       	st	X, r24
	ADMUX |= A_u8Channel;
    21e2:	a7 e2       	ldi	r26, 0x27	; 39
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e7 e2       	ldi	r30, 0x27	; 39
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	90 81       	ld	r25, Z
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	89 2b       	or	r24, r25
    21f0:	8c 93       	st	X, r24
	/* ENALBE ADC */
	SET_BIT(ADCSRA,ADEN);
    21f2:	a6 e2       	ldi	r26, 0x26	; 38
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e6 e2       	ldi	r30, 0x26	; 38
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	8c 93       	st	X, r24
	/* Start conversion */
	SET_BIT(ADCSRA,ADSC);
    2200:	a6 e2       	ldi	r26, 0x26	; 38
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e6 e2       	ldi	r30, 0x26	; 38
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 64       	ori	r24, 0x40	; 64
    220c:	8c 93       	st	X, r24
	/* Pooling on flag */
	while (GET_BIT(ADCSRA,ADIF)==0);
    220e:	e6 e2       	ldi	r30, 0x26	; 38
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	82 95       	swap	r24
    2216:	8f 70       	andi	r24, 0x0F	; 15
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	81 70       	andi	r24, 0x01	; 1
    221e:	90 70       	andi	r25, 0x00	; 0
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	a9 f3       	breq	.-22     	; 0x220e <MADC_u8GetDigitalValue+0x4c>
	SET_BIT(ADCSRA,ADIF);
    2224:	a6 e2       	ldi	r26, 0x26	; 38
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e6 e2       	ldi	r30, 0x26	; 38
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	80 61       	ori	r24, 0x10	; 16
    2230:	8c 93       	st	X, r24
	/* Reading value */
	return ADC;
    2232:	e4 e2       	ldi	r30, 0x24	; 36
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
}
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <HLCD_vInit>:
#include "../../MCAL/DIO/DIO_INT.h"

#include "LCD_INT.h"


void HLCD_vInit(void){
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	c6 54       	subi	r28, 0x46	; 70
    2250:	d0 40       	sbci	r29, 0x00	; 0
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
	/* RS output */
	MDIO_vSetPinDirection(CONTROL_PORT,RS,OUTPUT);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	64 e0       	ldi	r22, 0x04	; 4
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
	/* RW output */
	MDIO_vSetPinDirection(CONTROL_PORT,RW,OUTPUT);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	65 e0       	ldi	r22, 0x05	; 5
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
	/* En output */
	MDIO_vSetPinDirection(CONTROL_PORT,EN,OUTPUT);
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	66 e0       	ldi	r22, 0x06	; 6
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
	/* data port output */
	MDIO_vSetPortDirection(DATA_PORT,OUTPUT);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	61 e0       	ldi	r22, 0x01	; 1
    227e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <MDIO_vSetPortDirection>
    2282:	fe 01       	movw	r30, r28
    2284:	ed 5b       	subi	r30, 0xBD	; 189
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a8 e4       	ldi	r26, 0x48	; 72
    228e:	b2 e4       	ldi	r27, 0x42	; 66
    2290:	80 83       	st	Z, r24
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	a2 83       	std	Z+2, r26	; 0x02
    2296:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	8e 01       	movw	r16, r28
    229a:	01 5c       	subi	r16, 0xC1	; 193
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	ed 5b       	subi	r30, 0xBD	; 189
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a ef       	ldi	r20, 0xFA	; 250
    22b2:	54 e4       	ldi	r21, 0x44	; 68
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22c6:	fe 01       	movw	r30, r28
    22c8:	ff 96       	adiw	r30, 0x3f	; 63
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e8       	ldi	r20, 0x80	; 128
    22d8:	5f e3       	ldi	r21, 0x3F	; 63
    22da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22de:	88 23       	and	r24, r24
    22e0:	2c f4       	brge	.+10     	; 0x22ec <HLCD_vInit+0xaa>
		__ticks = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9e af       	std	Y+62, r25	; 0x3e
    22e8:	8d af       	std	Y+61, r24	; 0x3d
    22ea:	46 c0       	rjmp	.+140    	; 0x2378 <HLCD_vInit+0x136>
	else if (__tmp > 65535)
    22ec:	fe 01       	movw	r30, r28
    22ee:	ff 96       	adiw	r30, 0x3f	; 63
    22f0:	60 81       	ld	r22, Z
    22f2:	71 81       	ldd	r23, Z+1	; 0x01
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	3f ef       	ldi	r19, 0xFF	; 255
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	57 e4       	ldi	r21, 0x47	; 71
    2300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	64 f5       	brge	.+88     	; 0x2360 <HLCD_vInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2308:	fe 01       	movw	r30, r28
    230a:	ed 5b       	subi	r30, 0xBD	; 189
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e af       	std	Y+62, r25	; 0x3e
    2334:	8d af       	std	Y+61, r24	; 0x3d
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <HLCD_vInit+0x114>
    2338:	88 ec       	ldi	r24, 0xC8	; 200
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c af       	std	Y+60, r25	; 0x3c
    233e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2340:	8b ad       	ldd	r24, Y+59	; 0x3b
    2342:	9c ad       	ldd	r25, Y+60	; 0x3c
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <HLCD_vInit+0x102>
    2348:	9c af       	std	Y+60, r25	; 0x3c
    234a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d ad       	ldd	r24, Y+61	; 0x3d
    234e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e af       	std	Y+62, r25	; 0x3e
    2354:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d ad       	ldd	r24, Y+61	; 0x3d
    2358:	9e ad       	ldd	r25, Y+62	; 0x3e
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <HLCD_vInit+0xf6>
    235e:	16 c0       	rjmp	.+44     	; 0x238c <HLCD_vInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	fe 01       	movw	r30, r28
    2362:	ff 96       	adiw	r30, 0x3f	; 63
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e af       	std	Y+62, r25	; 0x3e
    2376:	8d af       	std	Y+61, r24	; 0x3d
    2378:	8d ad       	ldd	r24, Y+61	; 0x3d
    237a:	9e ad       	ldd	r25, Y+62	; 0x3e
    237c:	9a af       	std	Y+58, r25	; 0x3a
    237e:	89 af       	std	Y+57, r24	; 0x39
    2380:	89 ad       	ldd	r24, Y+57	; 0x39
    2382:	9a ad       	ldd	r25, Y+58	; 0x3a
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <HLCD_vInit+0x142>
    2388:	9a af       	std	Y+58, r25	; 0x3a
    238a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	/* Function set */
	HLCD_vSendCommand(FUNCTION_SET);
    238c:	88 e3       	ldi	r24, 0x38	; 56
    238e:	0e 94 a6 13 	call	0x274c	; 0x274c <HLCD_vSendCommand>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e8       	ldi	r26, 0x80	; 128
    2398:	bf e3       	ldi	r27, 0x3F	; 63
    239a:	8d ab       	std	Y+53, r24	; 0x35
    239c:	9e ab       	std	Y+54, r25	; 0x36
    239e:	af ab       	std	Y+55, r26	; 0x37
    23a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	6d a9       	ldd	r22, Y+53	; 0x35
    23a4:	7e a9       	ldd	r23, Y+54	; 0x36
    23a6:	8f a9       	ldd	r24, Y+55	; 0x37
    23a8:	98 ad       	ldd	r25, Y+56	; 0x38
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	89 ab       	std	Y+49, r24	; 0x31
    23bc:	9a ab       	std	Y+50, r25	; 0x32
    23be:	ab ab       	std	Y+51, r26	; 0x33
    23c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23c2:	69 a9       	ldd	r22, Y+49	; 0x31
    23c4:	7a a9       	ldd	r23, Y+50	; 0x32
    23c6:	8b a9       	ldd	r24, Y+51	; 0x33
    23c8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <HLCD_vInit+0x1a2>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	98 ab       	std	Y+48, r25	; 0x30
    23e0:	8f a7       	std	Y+47, r24	; 0x2f
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <HLCD_vInit+0x220>
	else if (__tmp > 65535)
    23e4:	69 a9       	ldd	r22, Y+49	; 0x31
    23e6:	7a a9       	ldd	r23, Y+50	; 0x32
    23e8:	8b a9       	ldd	r24, Y+51	; 0x33
    23ea:	9c a9       	ldd	r25, Y+52	; 0x34
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <HLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	6d a9       	ldd	r22, Y+53	; 0x35
    23fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2400:	8f a9       	ldd	r24, Y+55	; 0x37
    2402:	98 ad       	ldd	r25, Y+56	; 0x38
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	98 ab       	std	Y+48, r25	; 0x30
    2422:	8f a7       	std	Y+47, r24	; 0x2f
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <HLCD_vInit+0x202>
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9e a7       	std	Y+46, r25	; 0x2e
    242c:	8d a7       	std	Y+45, r24	; 0x2d
    242e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2430:	9e a5       	ldd	r25, Y+46	; 0x2e
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <HLCD_vInit+0x1f0>
    2436:	9e a7       	std	Y+46, r25	; 0x2e
    2438:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	98 ab       	std	Y+48, r25	; 0x30
    2442:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8f a5       	ldd	r24, Y+47	; 0x2f
    2446:	98 a9       	ldd	r25, Y+48	; 0x30
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <HLCD_vInit+0x1e4>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <HLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	98 ab       	std	Y+48, r25	; 0x30
    2460:	8f a7       	std	Y+47, r24	; 0x2f
    2462:	8f a5       	ldd	r24, Y+47	; 0x2f
    2464:	98 a9       	ldd	r25, Y+48	; 0x30
    2466:	9c a7       	std	Y+44, r25	; 0x2c
    2468:	8b a7       	std	Y+43, r24	; 0x2b
    246a:	8b a5       	ldd	r24, Y+43	; 0x2b
    246c:	9c a5       	ldd	r25, Y+44	; 0x2c
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <HLCD_vInit+0x22c>
    2472:	9c a7       	std	Y+44, r25	; 0x2c
    2474:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/* DISPLAY_ON */
	HLCD_vSendCommand(DISPLAY_ON);
    2476:	8f e0       	ldi	r24, 0x0F	; 15
    2478:	0e 94 a6 13 	call	0x274c	; 0x274c <HLCD_vSendCommand>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e8       	ldi	r26, 0x80	; 128
    2482:	bf e3       	ldi	r27, 0x3F	; 63
    2484:	8f a3       	std	Y+39, r24	; 0x27
    2486:	98 a7       	std	Y+40, r25	; 0x28
    2488:	a9 a7       	std	Y+41, r26	; 0x29
    248a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	6f a1       	ldd	r22, Y+39	; 0x27
    248e:	78 a5       	ldd	r23, Y+40	; 0x28
    2490:	89 a5       	ldd	r24, Y+41	; 0x29
    2492:	9a a5       	ldd	r25, Y+42	; 0x2a
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a ef       	ldi	r20, 0xFA	; 250
    249a:	54 e4       	ldi	r21, 0x44	; 68
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	8b a3       	std	Y+35, r24	; 0x23
    24a6:	9c a3       	std	Y+36, r25	; 0x24
    24a8:	ad a3       	std	Y+37, r26	; 0x25
    24aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24ac:	6b a1       	ldd	r22, Y+35	; 0x23
    24ae:	7c a1       	ldd	r23, Y+36	; 0x24
    24b0:	8d a1       	ldd	r24, Y+37	; 0x25
    24b2:	9e a1       	ldd	r25, Y+38	; 0x26
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e8       	ldi	r20, 0x80	; 128
    24ba:	5f e3       	ldi	r21, 0x3F	; 63
    24bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c0:	88 23       	and	r24, r24
    24c2:	2c f4       	brge	.+10     	; 0x24ce <HLCD_vInit+0x28c>
		__ticks = 1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9a a3       	std	Y+34, r25	; 0x22
    24ca:	89 a3       	std	Y+33, r24	; 0x21
    24cc:	3f c0       	rjmp	.+126    	; 0x254c <HLCD_vInit+0x30a>
	else if (__tmp > 65535)
    24ce:	6b a1       	ldd	r22, Y+35	; 0x23
    24d0:	7c a1       	ldd	r23, Y+36	; 0x24
    24d2:	8d a1       	ldd	r24, Y+37	; 0x25
    24d4:	9e a1       	ldd	r25, Y+38	; 0x26
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	3f ef       	ldi	r19, 0xFF	; 255
    24da:	4f e7       	ldi	r20, 0x7F	; 127
    24dc:	57 e4       	ldi	r21, 0x47	; 71
    24de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e2:	18 16       	cp	r1, r24
    24e4:	4c f5       	brge	.+82     	; 0x2538 <HLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e6:	6f a1       	ldd	r22, Y+39	; 0x27
    24e8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ea:	89 a5       	ldd	r24, Y+41	; 0x29
    24ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9a a3       	std	Y+34, r25	; 0x22
    250c:	89 a3       	std	Y+33, r24	; 0x21
    250e:	0f c0       	rjmp	.+30     	; 0x252e <HLCD_vInit+0x2ec>
    2510:	88 ec       	ldi	r24, 0xC8	; 200
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	98 a3       	std	Y+32, r25	; 0x20
    2516:	8f 8f       	std	Y+31, r24	; 0x1f
    2518:	8f 8d       	ldd	r24, Y+31	; 0x1f
    251a:	98 a1       	ldd	r25, Y+32	; 0x20
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <HLCD_vInit+0x2da>
    2520:	98 a3       	std	Y+32, r25	; 0x20
    2522:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	89 a1       	ldd	r24, Y+33	; 0x21
    2526:	9a a1       	ldd	r25, Y+34	; 0x22
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9a a3       	std	Y+34, r25	; 0x22
    252c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	89 a1       	ldd	r24, Y+33	; 0x21
    2530:	9a a1       	ldd	r25, Y+34	; 0x22
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <HLCD_vInit+0x2ce>
    2536:	14 c0       	rjmp	.+40     	; 0x2560 <HLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	6b a1       	ldd	r22, Y+35	; 0x23
    253a:	7c a1       	ldd	r23, Y+36	; 0x24
    253c:	8d a1       	ldd	r24, Y+37	; 0x25
    253e:	9e a1       	ldd	r25, Y+38	; 0x26
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	9a a3       	std	Y+34, r25	; 0x22
    254a:	89 a3       	std	Y+33, r24	; 0x21
    254c:	89 a1       	ldd	r24, Y+33	; 0x21
    254e:	9a a1       	ldd	r25, Y+34	; 0x22
    2550:	9e 8f       	std	Y+30, r25	; 0x1e
    2552:	8d 8f       	std	Y+29, r24	; 0x1d
    2554:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2556:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <HLCD_vInit+0x316>
    255c:	9e 8f       	std	Y+30, r25	; 0x1e
    255e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/* DISPLAY_CLEAR */
	HLCD_vSendCommand(DISPLAY_CLEAR);
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	0e 94 a6 13 	call	0x274c	; 0x274c <HLCD_vSendCommand>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a0 e4       	ldi	r26, 0x40	; 64
    256c:	b0 e4       	ldi	r27, 0x40	; 64
    256e:	89 8f       	std	Y+25, r24	; 0x19
    2570:	9a 8f       	std	Y+26, r25	; 0x1a
    2572:	ab 8f       	std	Y+27, r26	; 0x1b
    2574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	69 8d       	ldd	r22, Y+25	; 0x19
    2578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    257a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	4a ef       	ldi	r20, 0xFA	; 250
    2584:	54 e4       	ldi	r21, 0x44	; 68
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	8d 8b       	std	Y+21, r24	; 0x15
    2590:	9e 8b       	std	Y+22, r25	; 0x16
    2592:	af 8b       	std	Y+23, r26	; 0x17
    2594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2596:	6d 89       	ldd	r22, Y+21	; 0x15
    2598:	7e 89       	ldd	r23, Y+22	; 0x16
    259a:	8f 89       	ldd	r24, Y+23	; 0x17
    259c:	98 8d       	ldd	r25, Y+24	; 0x18
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	2c f4       	brge	.+10     	; 0x25b8 <HLCD_vInit+0x376>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	3f c0       	rjmp	.+126    	; 0x2636 <HLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    25b8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ba:	7e 89       	ldd	r23, Y+22	; 0x16
    25bc:	8f 89       	ldd	r24, Y+23	; 0x17
    25be:	98 8d       	ldd	r25, Y+24	; 0x18
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	3f ef       	ldi	r19, 0xFF	; 255
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	57 e4       	ldi	r21, 0x47	; 71
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	4c f5       	brge	.+82     	; 0x2622 <HLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d0:	69 8d       	ldd	r22, Y+25	; 0x19
    25d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e2       	ldi	r20, 0x20	; 32
    25de:	51 e4       	ldi	r21, 0x41	; 65
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	bc 01       	movw	r22, r24
    25ea:	cd 01       	movw	r24, r26
    25ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9c 8b       	std	Y+20, r25	; 0x14
    25f6:	8b 8b       	std	Y+19, r24	; 0x13
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <HLCD_vInit+0x3d6>
    25fa:	88 ec       	ldi	r24, 0xC8	; 200
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9a 8b       	std	Y+18, r25	; 0x12
    2600:	89 8b       	std	Y+17, r24	; 0x11
    2602:	89 89       	ldd	r24, Y+17	; 0x11
    2604:	9a 89       	ldd	r25, Y+18	; 0x12
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <HLCD_vInit+0x3c4>
    260a:	9a 8b       	std	Y+18, r25	; 0x12
    260c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	9c 8b       	std	Y+20, r25	; 0x14
    2616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	69 f7       	brne	.-38     	; 0x25fa <HLCD_vInit+0x3b8>
    2620:	14 c0       	rjmp	.+40     	; 0x264a <HLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	6d 89       	ldd	r22, Y+21	; 0x15
    2624:	7e 89       	ldd	r23, Y+22	; 0x16
    2626:	8f 89       	ldd	r24, Y+23	; 0x17
    2628:	98 8d       	ldd	r25, Y+24	; 0x18
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	8b 89       	ldd	r24, Y+19	; 0x13
    2638:	9c 89       	ldd	r25, Y+20	; 0x14
    263a:	98 8b       	std	Y+16, r25	; 0x10
    263c:	8f 87       	std	Y+15, r24	; 0x0f
    263e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <HLCD_vInit+0x400>
    2646:	98 8b       	std	Y+16, r25	; 0x10
    2648:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	/* ENTRY_MODE_SET */
	HLCD_vSendCommand(ENTRY_MODE_SET);
    264a:	86 e0       	ldi	r24, 0x06	; 6
    264c:	0e 94 a6 13 	call	0x274c	; 0x274c <HLCD_vSendCommand>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e8       	ldi	r26, 0x80	; 128
    2656:	bf e3       	ldi	r27, 0x3F	; 63
    2658:	8b 87       	std	Y+11, r24	; 0x0b
    265a:	9c 87       	std	Y+12, r25	; 0x0c
    265c:	ad 87       	std	Y+13, r26	; 0x0d
    265e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	6b 85       	ldd	r22, Y+11	; 0x0b
    2662:	7c 85       	ldd	r23, Y+12	; 0x0c
    2664:	8d 85       	ldd	r24, Y+13	; 0x0d
    2666:	9e 85       	ldd	r25, Y+14	; 0x0e
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8f 83       	std	Y+7, r24	; 0x07
    267a:	98 87       	std	Y+8, r25	; 0x08
    267c:	a9 87       	std	Y+9, r26	; 0x09
    267e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <HLCD_vInit+0x460>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <HLCD_vInit+0x4de>
	else if (__tmp > 65535)
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <HLCD_vInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    26bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26be:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <HLCD_vInit+0x4c0>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <HLCD_vInit+0x4ae>
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <HLCD_vInit+0x4a2>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <HLCD_vInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6f 81       	ldd	r22, Y+7	; 0x07
    270e:	78 85       	ldd	r23, Y+8	; 0x08
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <HLCD_vInit+0x4ea>
    2730:	9a 83       	std	Y+2, r25	; 0x02
    2732:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2734:	ca 5b       	subi	r28, 0xBA	; 186
    2736:	df 4f       	sbci	r29, 0xFF	; 255
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	08 95       	ret

0000274c <HLCD_vSendCommand>:
void HLCD_vSendCommand(u8 A_u8Command){
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	6d 97       	sbiw	r28, 0x1d	; 29
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 0 (Command mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RS,LOW);
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	64 e0       	ldi	r22, 0x04	; 4
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
	/* RW = 0 (Write mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RW,LOW);
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	65 e0       	ldi	r22, 0x05	; 5
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
	/* send command through the port */
	MDIO_vSetPortValue(DATA_PORT,A_u8Command);
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	6d 8d       	ldd	r22, Y+29	; 0x1d
    277a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
	/* Enable sequence */
	MDIO_vSetPinValue(CONTROL_PORT,EN,HIGH);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	66 e0       	ldi	r22, 0x06	; 6
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 e8       	ldi	r26, 0x80	; 128
    278e:	bf e3       	ldi	r27, 0x3F	; 63
    2790:	89 8f       	std	Y+25, r24	; 0x19
    2792:	9a 8f       	std	Y+26, r25	; 0x1a
    2794:	ab 8f       	std	Y+27, r26	; 0x1b
    2796:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	69 8d       	ldd	r22, Y+25	; 0x19
    279a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a ef       	ldi	r20, 0xFA	; 250
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8d 8b       	std	Y+21, r24	; 0x15
    27b2:	9e 8b       	std	Y+22, r25	; 0x16
    27b4:	af 8b       	std	Y+23, r26	; 0x17
    27b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <HLCD_vSendCommand+0x8e>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <HLCD_vSendCommand+0x10c>
	else if (__tmp > 65535)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <HLCD_vSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	69 8d       	ldd	r22, Y+25	; 0x19
    27f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	0f c0       	rjmp	.+30     	; 0x283a <HLCD_vSendCommand+0xee>
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9a 8b       	std	Y+18, r25	; 0x12
    2822:	89 8b       	std	Y+17, r24	; 0x11
    2824:	89 89       	ldd	r24, Y+17	; 0x11
    2826:	9a 89       	ldd	r25, Y+18	; 0x12
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <HLCD_vSendCommand+0xdc>
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8b 89       	ldd	r24, Y+19	; 0x13
    2832:	9c 89       	ldd	r25, Y+20	; 0x14
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <HLCD_vSendCommand+0xd0>
    2842:	14 c0       	rjmp	.+40     	; 0x286c <HLCD_vSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9c 8b       	std	Y+20, r25	; 0x14
    2856:	8b 8b       	std	Y+19, r24	; 0x13
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	98 8b       	std	Y+16, r25	; 0x10
    285e:	8f 87       	std	Y+15, r24	; 0x0f
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	98 89       	ldd	r25, Y+16	; 0x10
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <HLCD_vSendCommand+0x118>
    2868:	98 8b       	std	Y+16, r25	; 0x10
    286a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinValue(CONTROL_PORT,EN,LOW);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	66 e0       	ldi	r22, 0x06	; 6
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a0 e8       	ldi	r26, 0x80	; 128
    287c:	bf e3       	ldi	r27, 0x3F	; 63
    287e:	8b 87       	std	Y+11, r24	; 0x0b
    2880:	9c 87       	std	Y+12, r25	; 0x0c
    2882:	ad 87       	std	Y+13, r26	; 0x0d
    2884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a ef       	ldi	r20, 0xFA	; 250
    2894:	54 e4       	ldi	r21, 0x44	; 68
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8f 83       	std	Y+7, r24	; 0x07
    28a0:	98 87       	std	Y+8, r25	; 0x08
    28a2:	a9 87       	std	Y+9, r26	; 0x09
    28a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <HLCD_vSendCommand+0x17c>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <HLCD_vSendCommand+0x1fa>
	else if (__tmp > 65535)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <HLCD_vSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <HLCD_vSendCommand+0x1dc>
    290a:	88 ec       	ldi	r24, 0xC8	; 200
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <HLCD_vSendCommand+0x1ca>
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <HLCD_vSendCommand+0x1be>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <HLCD_vSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <HLCD_vSendCommand+0x206>
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    295a:	6d 96       	adiw	r28, 0x1d	; 29
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <HLCD_vSendData>:
void HLCD_vSendData(u8 A_u8Data){
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	6d 97       	sbiw	r28, 0x1d	; 29
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	8d 8f       	std	Y+29, r24	; 0x1d
	/* RS = 1 (Data mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RS,HIGH);
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	64 e0       	ldi	r22, 0x04	; 4
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
	/* RW = 0 (Write mode) */
	MDIO_vSetPinValue(CONTROL_PORT,RW,LOW);
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	65 e0       	ldi	r22, 0x05	; 5
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
	/* send command through the port */
	MDIO_vSetPortValue(DATA_PORT,A_u8Data);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	6d 8d       	ldd	r22, Y+29	; 0x1d
    299a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
	/* Enable sequence */
	MDIO_vSetPinValue(CONTROL_PORT,EN,HIGH);
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	66 e0       	ldi	r22, 0x06	; 6
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	a0 e8       	ldi	r26, 0x80	; 128
    29ae:	bf e3       	ldi	r27, 0x3F	; 63
    29b0:	89 8f       	std	Y+25, r24	; 0x19
    29b2:	9a 8f       	std	Y+26, r25	; 0x1a
    29b4:	ab 8f       	std	Y+27, r26	; 0x1b
    29b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	4a ef       	ldi	r20, 0xFA	; 250
    29c6:	54 e4       	ldi	r21, 0x44	; 68
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	8d 8b       	std	Y+21, r24	; 0x15
    29d2:	9e 8b       	std	Y+22, r25	; 0x16
    29d4:	af 8b       	std	Y+23, r26	; 0x17
    29d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29d8:	6d 89       	ldd	r22, Y+21	; 0x15
    29da:	7e 89       	ldd	r23, Y+22	; 0x16
    29dc:	8f 89       	ldd	r24, Y+23	; 0x17
    29de:	98 8d       	ldd	r25, Y+24	; 0x18
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e8       	ldi	r20, 0x80	; 128
    29e6:	5f e3       	ldi	r21, 0x3F	; 63
    29e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ec:	88 23       	and	r24, r24
    29ee:	2c f4       	brge	.+10     	; 0x29fa <HLCD_vSendData+0x8e>
		__ticks = 1;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	9c 8b       	std	Y+20, r25	; 0x14
    29f6:	8b 8b       	std	Y+19, r24	; 0x13
    29f8:	3f c0       	rjmp	.+126    	; 0x2a78 <HLCD_vSendData+0x10c>
	else if (__tmp > 65535)
    29fa:	6d 89       	ldd	r22, Y+21	; 0x15
    29fc:	7e 89       	ldd	r23, Y+22	; 0x16
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	4f e7       	ldi	r20, 0x7F	; 127
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	4c f5       	brge	.+82     	; 0x2a64 <HLCD_vSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a12:	69 8d       	ldd	r22, Y+25	; 0x19
    2a14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e2       	ldi	r20, 0x20	; 32
    2a20:	51 e4       	ldi	r21, 0x41	; 65
    2a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	9c 8b       	std	Y+20, r25	; 0x14
    2a38:	8b 8b       	std	Y+19, r24	; 0x13
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <HLCD_vSendData+0xee>
    2a3c:	88 ec       	ldi	r24, 0xC8	; 200
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	9a 8b       	std	Y+18, r25	; 0x12
    2a42:	89 8b       	std	Y+17, r24	; 0x11
    2a44:	89 89       	ldd	r24, Y+17	; 0x11
    2a46:	9a 89       	ldd	r25, Y+18	; 0x12
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <HLCD_vSendData+0xdc>
    2a4c:	9a 8b       	std	Y+18, r25	; 0x12
    2a4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a50:	8b 89       	ldd	r24, Y+19	; 0x13
    2a52:	9c 89       	ldd	r25, Y+20	; 0x14
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	9c 8b       	std	Y+20, r25	; 0x14
    2a58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	69 f7       	brne	.-38     	; 0x2a3c <HLCD_vSendData+0xd0>
    2a62:	14 c0       	rjmp	.+40     	; 0x2a8c <HLCD_vSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a64:	6d 89       	ldd	r22, Y+21	; 0x15
    2a66:	7e 89       	ldd	r23, Y+22	; 0x16
    2a68:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9c 8b       	std	Y+20, r25	; 0x14
    2a76:	8b 8b       	std	Y+19, r24	; 0x13
    2a78:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7c:	98 8b       	std	Y+16, r25	; 0x10
    2a7e:	8f 87       	std	Y+15, r24	; 0x0f
    2a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a82:	98 89       	ldd	r25, Y+16	; 0x10
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <HLCD_vSendData+0x118>
    2a88:	98 8b       	std	Y+16, r25	; 0x10
    2a8a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vSetPinValue(CONTROL_PORT,EN,LOW);
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	66 e0       	ldi	r22, 0x06	; 6
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e8       	ldi	r26, 0x80	; 128
    2a9c:	bf e3       	ldi	r27, 0x3F	; 63
    2a9e:	8b 87       	std	Y+11, r24	; 0x0b
    2aa0:	9c 87       	std	Y+12, r25	; 0x0c
    2aa2:	ad 87       	std	Y+13, r26	; 0x0d
    2aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8f 83       	std	Y+7, r24	; 0x07
    2ac0:	98 87       	std	Y+8, r25	; 0x08
    2ac2:	a9 87       	std	Y+9, r26	; 0x09
    2ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	5f e3       	ldi	r21, 0x3F	; 63
    2ad6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ada:	88 23       	and	r24, r24
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <HLCD_vSendData+0x17c>
		__ticks = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <HLCD_vSendData+0x1fa>
	else if (__tmp > 65535)
    2ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aea:	78 85       	ldd	r23, Y+8	; 0x08
    2aec:	89 85       	ldd	r24, Y+9	; 0x09
    2aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	4c f5       	brge	.+82     	; 0x2b52 <HLCD_vSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	51 e4       	ldi	r21, 0x41	; 65
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <HLCD_vSendData+0x1dc>
    2b2a:	88 ec       	ldi	r24, 0xC8	; 200
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9c 83       	std	Y+4, r25	; 0x04
    2b30:	8b 83       	std	Y+3, r24	; 0x03
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <HLCD_vSendData+0x1ca>
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <HLCD_vSendData+0x1be>
    2b50:	14 c0       	rjmp	.+40     	; 0x2b7a <HLCD_vSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	6f 81       	ldd	r22, Y+7	; 0x07
    2b54:	78 85       	ldd	r23, Y+8	; 0x08
    2b56:	89 85       	ldd	r24, Y+9	; 0x09
    2b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9e 83       	std	Y+6, r25	; 0x06
    2b64:	8d 83       	std	Y+5, r24	; 0x05
    2b66:	8d 81       	ldd	r24, Y+5	; 0x05
    2b68:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6a:	9a 83       	std	Y+2, r25	; 0x02
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	9a 81       	ldd	r25, Y+2	; 0x02
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <HLCD_vSendData+0x206>
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2b7a:	6d 96       	adiw	r28, 0x1d	; 29
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	cf 91       	pop	r28
    2b88:	df 91       	pop	r29
    2b8a:	08 95       	ret

00002b8c <HLCD_vSendString>:
void HLCD_vSendString(u8 * A_ptrToString){
    2b8c:	df 93       	push	r29
    2b8e:	cf 93       	push	r28
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <HLCD_vSendString+0x6>
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	0a c0       	rjmp	.+20     	; 0x2bb0 <HLCD_vSendString+0x24>

	while (*A_ptrToString!='\0'){
		HLCD_vSendData(*A_ptrToString);
    2b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba0:	80 81       	ld	r24, Z
    2ba2:	0e 94 b6 14 	call	0x296c	; 0x296c <HLCD_vSendData>
		A_ptrToString++;
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vSetPinValue(CONTROL_PORT,EN,LOW);
	_delay_ms(1);
}
void HLCD_vSendString(u8 * A_ptrToString){

	while (*A_ptrToString!='\0'){
    2bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 23       	and	r24, r24
    2bb8:	89 f7       	brne	.-30     	; 0x2b9c <HLCD_vSendString+0x10>
		HLCD_vSendData(*A_ptrToString);
		A_ptrToString++;
	}
}
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <HLCD_vMoveTo>:
/* 0-1 (0 - 15) */
void HLCD_vMoveTo(u8 A_u8Row, u8 A_u8Col){
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	00 d0       	rcall	.+0      	; 0x2bca <HLCD_vMoveTo+0x6>
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <HLCD_vMoveTo+0x8>
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8Row){
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	3c 83       	std	Y+4, r19	; 0x04
    2bdc:	2b 83       	std	Y+3, r18	; 0x03
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	9c 81       	ldd	r25, Y+4	; 0x04
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	31 f0       	breq	.+12     	; 0x2bf2 <HLCD_vMoveTo+0x2e>
    2be6:	2b 81       	ldd	r18, Y+3	; 0x03
    2be8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bea:	21 30       	cpi	r18, 0x01	; 1
    2bec:	31 05       	cpc	r19, r1
    2bee:	31 f0       	breq	.+12     	; 0x2bfc <HLCD_vMoveTo+0x38>
    2bf0:	09 c0       	rjmp	.+18     	; 0x2c04 <HLCD_vMoveTo+0x40>
	case 0:
		HLCD_vSendCommand(128 + A_u8Col);break;
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	80 58       	subi	r24, 0x80	; 128
    2bf6:	0e 94 a6 13 	call	0x274c	; 0x274c <HLCD_vSendCommand>
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <HLCD_vMoveTo+0x40>
	case 1:
		HLCD_vSendCommand(192 + A_u8Col);break;
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	80 54       	subi	r24, 0x40	; 64
    2c00:	0e 94 a6 13 	call	0x274c	; 0x274c <HLCD_vSendCommand>
	}
}
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	cf 91       	pop	r28
    2c0e:	df 91       	pop	r29
    2c10:	08 95       	ret

00002c12 <HLCD_vDisplayClear>:
void HLCD_vDisplayClear(void){
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	HLCD_vSendCommand(DISPLAY_CLEAR);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	0e 94 a6 13 	call	0x274c	; 0x274c <HLCD_vSendCommand>
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <HLCD_s32ReverseNumber>:
s32 static HLCD_s32ReverseNumber(s32 A_s32Number){
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	2c 97       	sbiw	r28, 0x0c	; 12
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	69 87       	std	Y+9, r22	; 0x09
    2c3c:	7a 87       	std	Y+10, r23	; 0x0a
    2c3e:	8b 87       	std	Y+11, r24	; 0x0b
    2c40:	9c 87       	std	Y+12, r25	; 0x0c
	s32 local_s32Rev = 1;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a0 e0       	ldi	r26, 0x00	; 0
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	9e 83       	std	Y+6, r25	; 0x06
    2c4e:	af 83       	std	Y+7, r26	; 0x07
    2c50:	b8 87       	std	Y+8, r27	; 0x08
    2c52:	3e c0       	rjmp	.+124    	; 0x2cd0 <HLCD_s32ReverseNumber+0xaa>
	while (A_s32Number != 0){
		s32 local_s32Digit = A_s32Number%10;
    2c54:	89 85       	ldd	r24, Y+9	; 0x09
    2c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c58:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c5a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c5c:	2a e0       	ldi	r18, 0x0A	; 10
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	bc 01       	movw	r22, r24
    2c66:	cd 01       	movw	r24, r26
    2c68:	0e 94 1b 32 	call	0x6436	; 0x6436 <__divmodsi4>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	9a 83       	std	Y+2, r25	; 0x02
    2c74:	ab 83       	std	Y+3, r26	; 0x03
    2c76:	bc 83       	std	Y+4, r27	; 0x04
		local_s32Rev = local_s32Rev*10 + local_s32Digit;
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	af 81       	ldd	r26, Y+7	; 0x07
    2c7e:	b8 85       	ldd	r27, Y+8	; 0x08
    2c80:	2a e0       	ldi	r18, 0x0A	; 10
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <__mulsi3>
    2c90:	9b 01       	movw	r18, r22
    2c92:	ac 01       	movw	r20, r24
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	ab 81       	ldd	r26, Y+3	; 0x03
    2c9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c9c:	82 0f       	add	r24, r18
    2c9e:	93 1f       	adc	r25, r19
    2ca0:	a4 1f       	adc	r26, r20
    2ca2:	b5 1f       	adc	r27, r21
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	af 83       	std	Y+7, r26	; 0x07
    2caa:	b8 87       	std	Y+8, r27	; 0x08
		A_s32Number /= 10;
    2cac:	89 85       	ldd	r24, Y+9	; 0x09
    2cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb0:	ab 85       	ldd	r26, Y+11	; 0x0b
    2cb2:	bc 85       	ldd	r27, Y+12	; 0x0c
    2cb4:	2a e0       	ldi	r18, 0x0A	; 10
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 1b 32 	call	0x6436	; 0x6436 <__divmodsi4>
    2cc4:	da 01       	movw	r26, r20
    2cc6:	c9 01       	movw	r24, r18
    2cc8:	89 87       	std	Y+9, r24	; 0x09
    2cca:	9a 87       	std	Y+10, r25	; 0x0a
    2ccc:	ab 87       	std	Y+11, r26	; 0x0b
    2cce:	bc 87       	std	Y+12, r27	; 0x0c
void HLCD_vDisplayClear(void){
	HLCD_vSendCommand(DISPLAY_CLEAR);
}
s32 static HLCD_s32ReverseNumber(s32 A_s32Number){
	s32 local_s32Rev = 1;
	while (A_s32Number != 0){
    2cd0:	89 85       	ldd	r24, Y+9	; 0x09
    2cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd4:	ab 85       	ldd	r26, Y+11	; 0x0b
    2cd6:	bc 85       	ldd	r27, Y+12	; 0x0c
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	a1 05       	cpc	r26, r1
    2cdc:	b1 05       	cpc	r27, r1
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <HLCD_s32ReverseNumber+0xbc>
    2ce0:	b9 cf       	rjmp	.-142    	; 0x2c54 <HLCD_s32ReverseNumber+0x2e>
		s32 local_s32Digit = A_s32Number%10;
		local_s32Rev = local_s32Rev*10 + local_s32Digit;
		A_s32Number /= 10;
	}
	return local_s32Rev;
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce6:	af 81       	ldd	r26, Y+7	; 0x07
    2ce8:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2cea:	bc 01       	movw	r22, r24
    2cec:	cd 01       	movw	r24, r26
    2cee:	2c 96       	adiw	r28, 0x0c	; 12
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <HLCD_vSendNumber>:
void HLCD_vSendNumber(s32 A_s32Number){
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	28 97       	sbiw	r28, 0x08	; 8
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	6d 83       	std	Y+5, r22	; 0x05
    2d16:	7e 83       	std	Y+6, r23	; 0x06
    2d18:	8f 83       	std	Y+7, r24	; 0x07
    2d1a:	98 87       	std	Y+8, r25	; 0x08
	if (A_s32Number < 0){
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	af 81       	ldd	r26, Y+7	; 0x07
    2d22:	b8 85       	ldd	r27, Y+8	; 0x08
    2d24:	bb 23       	and	r27, r27
    2d26:	94 f4       	brge	.+36     	; 0x2d4c <HLCD_vSendNumber+0x4c>
		HLCD_vSendData('-');
    2d28:	8d e2       	ldi	r24, 0x2D	; 45
    2d2a:	0e 94 b6 14 	call	0x296c	; 0x296c <HLCD_vSendData>
		A_s32Number *= -1;
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	af 81       	ldd	r26, Y+7	; 0x07
    2d34:	b8 85       	ldd	r27, Y+8	; 0x08
    2d36:	b0 95       	com	r27
    2d38:	a0 95       	com	r26
    2d3a:	90 95       	com	r25
    2d3c:	81 95       	neg	r24
    2d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d40:	af 4f       	sbci	r26, 0xFF	; 255
    2d42:	bf 4f       	sbci	r27, 0xFF	; 255
    2d44:	8d 83       	std	Y+5, r24	; 0x05
    2d46:	9e 83       	std	Y+6, r25	; 0x06
    2d48:	af 83       	std	Y+7, r26	; 0x07
    2d4a:	b8 87       	std	Y+8, r27	; 0x08
	}
	if (A_s32Number == 0){
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	af 81       	ldd	r26, Y+7	; 0x07
    2d52:	b8 85       	ldd	r27, Y+8	; 0x08
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	a1 05       	cpc	r26, r1
    2d58:	b1 05       	cpc	r27, r1
    2d5a:	21 f4       	brne	.+8      	; 0x2d64 <HLCD_vSendNumber+0x64>
		HLCD_vSendData('0');
    2d5c:	80 e3       	ldi	r24, 0x30	; 48
    2d5e:	0e 94 b6 14 	call	0x296c	; 0x296c <HLCD_vSendData>
    2d62:	3b c0       	rjmp	.+118    	; 0x2dda <HLCD_vSendNumber+0xda>
		return;
	}
	// reverse number
	s32 cur = HLCD_s32ReverseNumber(A_s32Number);
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	af 81       	ldd	r26, Y+7	; 0x07
    2d6a:	b8 85       	ldd	r27, Y+8	; 0x08
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 13 16 	call	0x2c26	; 0x2c26 <HLCD_s32ReverseNumber>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	ab 83       	std	Y+3, r26	; 0x03
    2d7e:	bc 83       	std	Y+4, r27	; 0x04
    2d80:	23 c0       	rjmp	.+70     	; 0x2dc8 <HLCD_vSendNumber+0xc8>
	// apply alogrithm
	while (cur != 1){
		HLCD_vSendData(cur%10 + '0'); //===> HLCD_vSendData('1') '1' ===> 1 + '0'
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	ab 81       	ldd	r26, Y+3	; 0x03
    2d88:	bc 81       	ldd	r27, Y+4	; 0x04
    2d8a:	2a e0       	ldi	r18, 0x0A	; 10
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 1b 32 	call	0x6436	; 0x6436 <__divmodsi4>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	80 5d       	subi	r24, 0xD0	; 208
    2da0:	0e 94 b6 14 	call	0x296c	; 0x296c <HLCD_vSendData>
		cur /= 10;
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	9a 81       	ldd	r25, Y+2	; 0x02
    2da8:	ab 81       	ldd	r26, Y+3	; 0x03
    2daa:	bc 81       	ldd	r27, Y+4	; 0x04
    2dac:	2a e0       	ldi	r18, 0x0A	; 10
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 1b 32 	call	0x6436	; 0x6436 <__divmodsi4>
    2dbc:	da 01       	movw	r26, r20
    2dbe:	c9 01       	movw	r24, r18
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	9a 83       	std	Y+2, r25	; 0x02
    2dc4:	ab 83       	std	Y+3, r26	; 0x03
    2dc6:	bc 83       	std	Y+4, r27	; 0x04
		return;
	}
	// reverse number
	s32 cur = HLCD_s32ReverseNumber(A_s32Number);
	// apply alogrithm
	while (cur != 1){
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	9a 81       	ldd	r25, Y+2	; 0x02
    2dcc:	ab 81       	ldd	r26, Y+3	; 0x03
    2dce:	bc 81       	ldd	r27, Y+4	; 0x04
    2dd0:	81 30       	cpi	r24, 0x01	; 1
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	a1 05       	cpc	r26, r1
    2dd6:	b1 05       	cpc	r27, r1
    2dd8:	a1 f6       	brne	.-88     	; 0x2d82 <HLCD_vSendNumber+0x82>
		HLCD_vSendData(cur%10 + '0'); //===> HLCD_vSendData('1') '1' ===> 1 + '0'
		cur /= 10;
	}
}
    2dda:	28 96       	adiw	r28, 0x08	; 8
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <HKPD_vInit>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_INT.h"
#include "KPD_INT.h"
#include <util/delay.h>

void HKPD_vInit(void){
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDirection(KPD_PORT,0b11110000);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	60 ef       	ldi	r22, 0xF0	; 240
    2df8:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <MDIO_vSetPortDirection>
	MDIO_vSetPortValue(KPD_PORT,0b11111111);
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	6f ef       	ldi	r22, 0xFF	; 255
    2e00:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
}
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <HKPD_U8GetPressedKey>:
u8 HKPD_U8GetPressedKey(void){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	62 97       	sbiw	r28, 0x12	; 18
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Key= 50;
    2e1e:	82 e3       	ldi	r24, 0x32	; 50
    2e20:	8a 8b       	std	Y+18, r24	; 0x12
	for (u8 col = 0; col < 4; col++){
    2e22:	19 8a       	std	Y+17, r1	; 0x11
    2e24:	a8 c0       	rjmp	.+336    	; 0x2f76 <HKPD_U8GetPressedKey+0x16c>
		MDIO_vSetPinValue(KPD_PORT,col+4,LOW);
    2e26:	89 89       	ldd	r24, Y+17	; 0x11
    2e28:	98 2f       	mov	r25, r24
    2e2a:	9c 5f       	subi	r25, 0xFC	; 252
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	69 2f       	mov	r22, r25
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
		for (u8 row = 0; row < 4; ++row){
    2e36:	18 8a       	std	Y+16, r1	; 0x10
    2e38:	8f c0       	rjmp	.+286    	; 0x2f58 <HKPD_U8GetPressedKey+0x14e>
			u8 local_u8tmp = MDIO_U8GetPinValue(KPD_PORT,row);
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	68 89       	ldd	r22, Y+16	; 0x10
    2e3e:	0e 94 2e 10 	call	0x205c	; 0x205c <MDIO_U8GetPinValue>
    2e42:	8f 87       	std	Y+15, r24	; 0x0f
			if (local_u8tmp == 0){
    2e44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e46:	88 23       	and	r24, r24
    2e48:	09 f0       	breq	.+2      	; 0x2e4c <HKPD_U8GetPressedKey+0x42>
    2e4a:	83 c0       	rjmp	.+262    	; 0x2f52 <HKPD_U8GetPressedKey+0x148>
				local_u8Key = (row * 4) + col;
    2e4c:	88 89       	ldd	r24, Y+16	; 0x10
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	98 2f       	mov	r25, r24
    2e5c:	89 89       	ldd	r24, Y+17	; 0x11
    2e5e:	89 0f       	add	r24, r25
    2e60:	8a 8b       	std	Y+18, r24	; 0x12
				while (MDIO_U8GetPinValue(KPD_PORT,row) == 0);
    2e62:	82 e0       	ldi	r24, 0x02	; 2
    2e64:	68 89       	ldd	r22, Y+16	; 0x10
    2e66:	0e 94 2e 10 	call	0x205c	; 0x205c <MDIO_U8GetPinValue>
    2e6a:	88 23       	and	r24, r24
    2e6c:	d1 f3       	breq	.-12     	; 0x2e62 <HKPD_U8GetPressedKey+0x58>
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	a0 ef       	ldi	r26, 0xF0	; 240
    2e74:	b1 e4       	ldi	r27, 0x41	; 65
    2e76:	8b 87       	std	Y+11, r24	; 0x0b
    2e78:	9c 87       	std	Y+12, r25	; 0x0c
    2e7a:	ad 87       	std	Y+13, r26	; 0x0d
    2e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a ef       	ldi	r20, 0xFA	; 250
    2e8c:	54 e4       	ldi	r21, 0x44	; 68
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	8f 83       	std	Y+7, r24	; 0x07
    2e98:	98 87       	std	Y+8, r25	; 0x08
    2e9a:	a9 87       	std	Y+9, r26	; 0x09
    2e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea0:	78 85       	ldd	r23, Y+8	; 0x08
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e8       	ldi	r20, 0x80	; 128
    2eac:	5f e3       	ldi	r21, 0x3F	; 63
    2eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eb2:	88 23       	and	r24, r24
    2eb4:	2c f4       	brge	.+10     	; 0x2ec0 <HKPD_U8GetPressedKey+0xb6>
		__ticks = 1;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	3f c0       	rjmp	.+126    	; 0x2f3e <HKPD_U8GetPressedKey+0x134>
	else if (__tmp > 65535)
    2ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec2:	78 85       	ldd	r23, Y+8	; 0x08
    2ec4:	89 85       	ldd	r24, Y+9	; 0x09
    2ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	4c f5       	brge	.+82     	; 0x2f2a <HKPD_U8GetPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	cd 01       	movw	r24, r26
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e 83       	std	Y+6, r25	; 0x06
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <HKPD_U8GetPressedKey+0x116>
    2f02:	88 ec       	ldi	r24, 0xC8	; 200
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <HKPD_U8GetPressedKey+0x104>
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	9e 83       	std	Y+6, r25	; 0x06
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f20:	8d 81       	ldd	r24, Y+5	; 0x05
    2f22:	9e 81       	ldd	r25, Y+6	; 0x06
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	69 f7       	brne	.-38     	; 0x2f02 <HKPD_U8GetPressedKey+0xf8>
    2f28:	14 c0       	rjmp	.+40     	; 0x2f52 <HKPD_U8GetPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2c:	78 85       	ldd	r23, Y+8	; 0x08
    2f2e:	89 85       	ldd	r24, Y+9	; 0x09
    2f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9e 83       	std	Y+6, r25	; 0x06
    2f3c:	8d 83       	std	Y+5, r24	; 0x05
    2f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f40:	9e 81       	ldd	r25, Y+6	; 0x06
    2f42:	9a 83       	std	Y+2, r25	; 0x02
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <HKPD_U8GetPressedKey+0x140>
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
}
u8 HKPD_U8GetPressedKey(void){
	u8 local_u8Key= 50;
	for (u8 col = 0; col < 4; col++){
		MDIO_vSetPinValue(KPD_PORT,col+4,LOW);
		for (u8 row = 0; row < 4; ++row){
    2f52:	88 89       	ldd	r24, Y+16	; 0x10
    2f54:	8f 5f       	subi	r24, 0xFF	; 255
    2f56:	88 8b       	std	Y+16, r24	; 0x10
    2f58:	88 89       	ldd	r24, Y+16	; 0x10
    2f5a:	84 30       	cpi	r24, 0x04	; 4
    2f5c:	08 f4       	brcc	.+2      	; 0x2f60 <HKPD_U8GetPressedKey+0x156>
    2f5e:	6d cf       	rjmp	.-294    	; 0x2e3a <HKPD_U8GetPressedKey+0x30>
				local_u8Key = (row * 4) + col;
				while (MDIO_U8GetPinValue(KPD_PORT,row) == 0);
				_delay_ms(30);
			}
		}
		MDIO_vSetPinValue(KPD_PORT,col + 4,HIGH);
    2f60:	89 89       	ldd	r24, Y+17	; 0x11
    2f62:	98 2f       	mov	r25, r24
    2f64:	9c 5f       	subi	r25, 0xFC	; 252
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	69 2f       	mov	r22, r25
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
	MDIO_vSetPortDirection(KPD_PORT,0b11110000);
	MDIO_vSetPortValue(KPD_PORT,0b11111111);
}
u8 HKPD_U8GetPressedKey(void){
	u8 local_u8Key= 50;
	for (u8 col = 0; col < 4; col++){
    2f70:	89 89       	ldd	r24, Y+17	; 0x11
    2f72:	8f 5f       	subi	r24, 0xFF	; 255
    2f74:	89 8b       	std	Y+17, r24	; 0x11
    2f76:	89 89       	ldd	r24, Y+17	; 0x11
    2f78:	84 30       	cpi	r24, 0x04	; 4
    2f7a:	08 f4       	brcc	.+2      	; 0x2f7e <HKPD_U8GetPressedKey+0x174>
    2f7c:	54 cf       	rjmp	.-344    	; 0x2e26 <HKPD_U8GetPressedKey+0x1c>
				_delay_ms(30);
			}
		}
		MDIO_vSetPinValue(KPD_PORT,col + 4,HIGH);
	}
	return local_u8Key;
    2f7e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2f80:	62 96       	adiw	r28, 0x12	; 18
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <HAT24C08_vSendData>:
#include "../../MCAL/TWI/TWI_INT.h"
#include "AT24C08_CONFIG.h"
#include "AT24C08_INT.h"
#include "AT24C08_PRIV.h"

void HAT24C08_vSendData(u16 A_u16Location ,u8 A_u8Data){
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <HAT24C08_vSendData+0x6>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <HAT24C08_vSendData+0x8>
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
    2fa2:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8SlaveAddress=(FIXED_ADDRESS)|(CHIP_EN_CONFIG<<2) |(A_u16Location>>8);
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	89 2f       	mov	r24, r25
    2faa:	99 27       	eor	r25, r25
    2fac:	8a 60       	ori	r24, 0x0A	; 10
    2fae:	89 83       	std	Y+1, r24	; 0x01
	MTWI_TwiErrorSendStartCondition();
    2fb0:	0e 94 60 07 	call	0xec0	; 0xec0 <MTWI_TwiErrorSendStartCondition>
	MTWI_TwiErrorSendSlaveAddresswithWrite(local_u8SlaveAddress);
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	0e 94 c2 07 	call	0xf84	; 0xf84 <MTWI_TwiErrorSendSlaveAddresswithWrite>
	MTWI_TwiErrorMasterWriteByte((u8)A_u16Location);
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	0e 94 32 08 	call	0x1064	; 0x1064 <MTWI_TwiErrorMasterWriteByte>
	MTWI_TwiErrorMasterWriteByte(A_u8Data);
    2fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc2:	0e 94 32 08 	call	0x1064	; 0x1064 <MTWI_TwiErrorMasterWriteByte>
	MTWI_vSendStopCondition();
    2fc6:	0e 94 a6 08 	call	0x114c	; 0x114c <MTWI_vSendStopCondition>

}
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <HAT24C08_vReadData>:

u8 HAT24C08_vReadData(u16 A_u16Location){
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <HAT24C08_vReadData+0x6>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <HAT24C08_vReadData+0x8>
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	9c 83       	std	Y+4, r25	; 0x04
    2fe6:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8SlaveAddress=(FIXED_ADDRESS)|(CHIP_EN_CONFIG<<2) |(A_u16Location>>8);
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	89 2f       	mov	r24, r25
    2fee:	99 27       	eor	r25, r25
    2ff0:	8a 60       	ori	r24, 0x0A	; 10
    2ff2:	89 83       	std	Y+1, r24	; 0x01
	MTWI_TwiErrorSendStartCondition();
    2ff4:	0e 94 60 07 	call	0xec0	; 0xec0 <MTWI_TwiErrorSendStartCondition>
	MTWI_TwiErrorSendSlaveAddresswithWrite(local_u8SlaveAddress);
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	0e 94 c2 07 	call	0xf84	; 0xf84 <MTWI_TwiErrorSendSlaveAddresswithWrite>
	MTWI_TwiErrorMasterWriteByte((u8)A_u16Location);
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	0e 94 32 08 	call	0x1064	; 0x1064 <MTWI_TwiErrorMasterWriteByte>
	MTWI_TwiErrorSendRepeatedStartCondition();
    3004:	0e 94 91 07 	call	0xf22	; 0xf22 <MTWI_TwiErrorSendRepeatedStartCondition>
	MTWI_TwiErrorSendSlaveAddresswithRead(local_u8SlaveAddress);
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	0e 94 fa 07 	call	0xff4	; 0xff4 <MTWI_TwiErrorSendSlaveAddresswithRead>
	u8 local_u8Data;
	MTWI_TwiErrorMasterReadByte(&local_u8Data);
    300e:	ce 01       	movw	r24, r28
    3010:	02 96       	adiw	r24, 0x02	; 2
    3012:	0e 94 69 08 	call	0x10d2	; 0x10d2 <MTWI_TwiErrorMasterReadByte>
	MTWI_vSendStopCondition();
    3016:	0e 94 a6 08 	call	0x114c	; 0x114c <MTWI_vSendStopCondition>
	return local_u8Data;
    301a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	08 95       	ret

0000302a <combine>:
u8 minutes_counter=0,hours_counter=0,A_hours_counter=24,A_minutes_counter=60;

u8 i=0;


u16 combine(u16 num1, u16 num2) {
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	28 97       	sbiw	r28, 0x08	; 8
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	f8 94       	cli
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	9e 83       	std	Y+6, r25	; 0x06
    3040:	8d 83       	std	Y+5, r24	; 0x05
    3042:	78 87       	std	Y+8, r23	; 0x08
    3044:	6f 83       	std	Y+7, r22	; 0x07
    u16 t = num2;
    3046:	8f 81       	ldd	r24, Y+7	; 0x07
    3048:	98 85       	ldd	r25, Y+8	; 0x08
    304a:	9c 83       	std	Y+4, r25	; 0x04
    304c:	8b 83       	std	Y+3, r24	; 0x03
    u16 multiplier = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9a 83       	std	Y+2, r25	; 0x02
    3054:	89 83       	std	Y+1, r24	; 0x01

    if (t == 0) {
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	9c 81       	ldd	r25, Y+4	; 0x04
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	09 f5       	brne	.+66     	; 0x30a0 <combine+0x76>
        multiplier = 10;
    305e:	8a e0       	ldi	r24, 0x0A	; 10
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9a 83       	std	Y+2, r25	; 0x02
    3064:	89 83       	std	Y+1, r24	; 0x01
        t = 1;
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	8b 83       	std	Y+3, r24	; 0x03
    306e:	18 c0       	rjmp	.+48     	; 0x30a0 <combine+0x76>
    }

    while (t > 0) {
        num1 *= 10;
    3070:	8d 81       	ldd	r24, Y+5	; 0x05
    3072:	9e 81       	ldd	r25, Y+6	; 0x06
    3074:	9c 01       	movw	r18, r24
    3076:	22 0f       	add	r18, r18
    3078:	33 1f       	adc	r19, r19
    307a:	c9 01       	movw	r24, r18
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	82 0f       	add	r24, r18
    3086:	93 1f       	adc	r25, r19
    3088:	9e 83       	std	Y+6, r25	; 0x06
    308a:	8d 83       	std	Y+5, r24	; 0x05
        t /= 10;
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	9c 81       	ldd	r25, Y+4	; 0x04
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	b9 01       	movw	r22, r18
    3096:	0e 94 07 32 	call	0x640e	; 0x640e <__udivmodhi4>
    309a:	cb 01       	movw	r24, r22
    309c:	9c 83       	std	Y+4, r25	; 0x04
    309e:	8b 83       	std	Y+3, r24	; 0x03
    if (t == 0) {
        multiplier = 10;
        t = 1;
    }

    while (t > 0) {
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	9c 81       	ldd	r25, Y+4	; 0x04
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	21 f7       	brne	.-56     	; 0x3070 <combine+0x46>
        num1 *= 10;
        t /= 10;
    }

    return num1 + num2 * multiplier;
    30a8:	2f 81       	ldd	r18, Y+7	; 0x07
    30aa:	38 85       	ldd	r19, Y+8	; 0x08
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	9a 81       	ldd	r25, Y+2	; 0x02
    30b0:	a9 01       	movw	r20, r18
    30b2:	48 9f       	mul	r20, r24
    30b4:	90 01       	movw	r18, r0
    30b6:	49 9f       	mul	r20, r25
    30b8:	30 0d       	add	r19, r0
    30ba:	58 9f       	mul	r21, r24
    30bc:	30 0d       	add	r19, r0
    30be:	11 24       	eor	r1, r1
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	82 0f       	add	r24, r18
    30c6:	93 1f       	adc	r25, r19
}
    30c8:	28 96       	adiw	r28, 0x08	; 8
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <Clock_Count>:

void Clock_Count(){
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
	static u16 counter = 0;
	counter++;
    30e2:	80 91 f5 00 	lds	r24, 0x00F5
    30e6:	90 91 f6 00 	lds	r25, 0x00F6
    30ea:	01 96       	adiw	r24, 0x01	; 1
    30ec:	90 93 f6 00 	sts	0x00F6, r25
    30f0:	80 93 f5 00 	sts	0x00F5, r24
	if (counter == 3907){
    30f4:	80 91 f5 00 	lds	r24, 0x00F5
    30f8:	90 91 f6 00 	lds	r25, 0x00F6
    30fc:	2f e0       	ldi	r18, 0x0F	; 15
    30fe:	83 34       	cpi	r24, 0x43	; 67
    3100:	92 07       	cpc	r25, r18
    3102:	61 f4       	brne	.+24     	; 0x311c <Clock_Count+0x42>
		seconds_counter++;
    3104:	80 91 f1 00 	lds	r24, 0x00F1
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	80 93 f1 00 	sts	0x00F1, r24
		counter = 0;
    310e:	10 92 f6 00 	sts	0x00F6, r1
    3112:	10 92 f5 00 	sts	0x00F5, r1

		MTIMER0_vSetPreloadValue(192);
    3116:	80 ec       	ldi	r24, 0xC0	; 192
    3118:	0e 94 98 09 	call	0x1330	; 0x1330 <MTIMER0_vSetPreloadValue>
	}
}
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <main>:
void main(void){
    3122:	0f 93       	push	r16
    3124:	1f 93       	push	r17
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	ca 5d       	subi	r28, 0xDA	; 218
    3130:	d1 40       	sbci	r29, 0x01	; 1
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
	HLCD_vInit();
    313c:	0e 94 21 11 	call	0x2242	; 0x2242 <HLCD_vInit>
		HKPD_vInit();
    3140:	0e 94 f6 16 	call	0x2dec	; 0x2dec <HKPD_vInit>
		u8 key;
		u8 H_first_digit,H_second_digit,M_first_digit,M_second_digit,S_first_digit,S_second_digit,ALARM_H_first_digit,ALARM_H_second_digit,ALARM_M_first_digit,ALARM_M_second_digit;
		u8 numbers[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
    3144:	ce 01       	movw	r24, r28
    3146:	84 53       	subi	r24, 0x34	; 52
    3148:	9e 4f       	sbci	r25, 0xFE	; 254
    314a:	ca 52       	subi	r28, 0x2A	; 42
    314c:	de 4f       	sbci	r29, 0xFE	; 254
    314e:	99 83       	std	Y+1, r25	; 0x01
    3150:	88 83       	st	Y, r24
    3152:	c6 5d       	subi	r28, 0xD6	; 214
    3154:	d1 40       	sbci	r29, 0x01	; 1
    3156:	84 ec       	ldi	r24, 0xC4	; 196
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	c8 52       	subi	r28, 0x28	; 40
    315c:	de 4f       	sbci	r29, 0xFE	; 254
    315e:	99 83       	std	Y+1, r25	; 0x01
    3160:	88 83       	st	Y, r24
    3162:	c8 5d       	subi	r28, 0xD8	; 216
    3164:	d1 40       	sbci	r29, 0x01	; 1
    3166:	9a e0       	ldi	r25, 0x0A	; 10
    3168:	c6 52       	subi	r28, 0x26	; 38
    316a:	de 4f       	sbci	r29, 0xFE	; 254
    316c:	98 83       	st	Y, r25
    316e:	ca 5d       	subi	r28, 0xDA	; 218
    3170:	d1 40       	sbci	r29, 0x01	; 1
    3172:	c8 52       	subi	r28, 0x28	; 40
    3174:	de 4f       	sbci	r29, 0xFE	; 254
    3176:	e8 81       	ld	r30, Y
    3178:	f9 81       	ldd	r31, Y+1	; 0x01
    317a:	c8 5d       	subi	r28, 0xD8	; 216
    317c:	d1 40       	sbci	r29, 0x01	; 1
    317e:	00 80       	ld	r0, Z
    3180:	c8 52       	subi	r28, 0x28	; 40
    3182:	de 4f       	sbci	r29, 0xFE	; 254
    3184:	88 81       	ld	r24, Y
    3186:	99 81       	ldd	r25, Y+1	; 0x01
    3188:	c8 5d       	subi	r28, 0xD8	; 216
    318a:	d1 40       	sbci	r29, 0x01	; 1
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	c8 52       	subi	r28, 0x28	; 40
    3190:	de 4f       	sbci	r29, 0xFE	; 254
    3192:	99 83       	std	Y+1, r25	; 0x01
    3194:	88 83       	st	Y, r24
    3196:	c8 5d       	subi	r28, 0xD8	; 216
    3198:	d1 40       	sbci	r29, 0x01	; 1
    319a:	ca 52       	subi	r28, 0x2A	; 42
    319c:	de 4f       	sbci	r29, 0xFE	; 254
    319e:	e8 81       	ld	r30, Y
    31a0:	f9 81       	ldd	r31, Y+1	; 0x01
    31a2:	c6 5d       	subi	r28, 0xD6	; 214
    31a4:	d1 40       	sbci	r29, 0x01	; 1
    31a6:	00 82       	st	Z, r0
    31a8:	ca 52       	subi	r28, 0x2A	; 42
    31aa:	de 4f       	sbci	r29, 0xFE	; 254
    31ac:	88 81       	ld	r24, Y
    31ae:	99 81       	ldd	r25, Y+1	; 0x01
    31b0:	c6 5d       	subi	r28, 0xD6	; 214
    31b2:	d1 40       	sbci	r29, 0x01	; 1
    31b4:	01 96       	adiw	r24, 0x01	; 1
    31b6:	ca 52       	subi	r28, 0x2A	; 42
    31b8:	de 4f       	sbci	r29, 0xFE	; 254
    31ba:	99 83       	std	Y+1, r25	; 0x01
    31bc:	88 83       	st	Y, r24
    31be:	c6 5d       	subi	r28, 0xD6	; 214
    31c0:	d1 40       	sbci	r29, 0x01	; 1
    31c2:	c6 52       	subi	r28, 0x26	; 38
    31c4:	de 4f       	sbci	r29, 0xFE	; 254
    31c6:	98 81       	ld	r25, Y
    31c8:	ca 5d       	subi	r28, 0xDA	; 218
    31ca:	d1 40       	sbci	r29, 0x01	; 1
    31cc:	91 50       	subi	r25, 0x01	; 1
    31ce:	c6 52       	subi	r28, 0x26	; 38
    31d0:	de 4f       	sbci	r29, 0xFE	; 254
    31d2:	98 83       	st	Y, r25
    31d4:	ca 5d       	subi	r28, 0xDA	; 218
    31d6:	d1 40       	sbci	r29, 0x01	; 1
    31d8:	c6 52       	subi	r28, 0x26	; 38
    31da:	de 4f       	sbci	r29, 0xFE	; 254
    31dc:	e8 81       	ld	r30, Y
    31de:	ca 5d       	subi	r28, 0xDA	; 218
    31e0:	d1 40       	sbci	r29, 0x01	; 1
    31e2:	ee 23       	and	r30, r30
    31e4:	31 f6       	brne	.-116    	; 0x3172 <main+0x50>
		MUSART_vInit((F_CPU / (16UL * BAUD_RATE)) - 1);
    31e6:	83 e3       	ldi	r24, 0x33	; 51
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	0e 94 bf 06 	call	0xd7e	; 0xd7e <MUSART_vInit>
		MDIO_vSetPinDirection(PORT_B,0,OUTPUT);
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	41 e0       	ldi	r20, 0x01	; 1
    31f4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_B,1,OUTPUT);
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_B,2,OUTPUT);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	62 e0       	ldi	r22, 0x02	; 2
    3206:	41 e0       	ldi	r20, 0x01	; 1
    3208:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_B,3,OUTPUT);
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	63 e0       	ldi	r22, 0x03	; 3
    3210:	41 e0       	ldi	r20, 0x01	; 1
    3212:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_B,7,OUTPUT);
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	67 e0       	ldi	r22, 0x07	; 7
    321a:	41 e0       	ldi	r20, 0x01	; 1
    321c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_D,2,OUTPUT);
    3220:	83 e0       	ldi	r24, 0x03	; 3
    3222:	62 e0       	ldi	r22, 0x02	; 2
    3224:	41 e0       	ldi	r20, 0x01	; 1
    3226:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_D,3,OUTPUT);
    322a:	83 e0       	ldi	r24, 0x03	; 3
    322c:	63 e0       	ldi	r22, 0x03	; 3
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_D,4,OUTPUT);
    3234:	83 e0       	ldi	r24, 0x03	; 3
    3236:	64 e0       	ldi	r22, 0x04	; 4
    3238:	41 e0       	ldi	r20, 0x01	; 1
    323a:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_D,5,OUTPUT);
    323e:	83 e0       	ldi	r24, 0x03	; 3
    3240:	65 e0       	ldi	r22, 0x05	; 5
    3242:	41 e0       	ldi	r20, 0x01	; 1
    3244:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_D,6,OUTPUT);
    3248:	83 e0       	ldi	r24, 0x03	; 3
    324a:	66 e0       	ldi	r22, 0x06	; 6
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		MDIO_vSetPinDirection(PORT_D,7,OUTPUT);
    3252:	83 e0       	ldi	r24, 0x03	; 3
    3254:	67 e0       	ldi	r22, 0x07	; 7
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <MDIO_vSetPinDirection>
		//MDIO_vSetPortValue(PORT_D,0b00111111);
		HLCD_vSendString("1: Set Clock");
    325c:	80 e6       	ldi	r24, 0x60	; 96
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
		HLCD_vMoveTo(1,0);
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	60 e0       	ldi	r22, 0x00	; 0
    3268:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
		HLCD_vSendString("2: Set Alarm");
    326c:	8d e6       	ldi	r24, 0x6D	; 109
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
	MTIMER0_vSetCallBackOv(Clock_Count);
    3274:	8d e6       	ldi	r24, 0x6D	; 109
    3276:	98 e1       	ldi	r25, 0x18	; 24
    3278:	0e 94 74 09 	call	0x12e8	; 0x12e8 <MTIMER0_vSetCallBackOv>
	MTIMER0_vInit();
    327c:	0e 94 43 09 	call	0x1286	; 0x1286 <MTIMER0_vInit>
	MGIE_vEnableInterrupts();
    3280:	0e 94 0f 0c 	call	0x181e	; 0x181e <MGIE_vEnableInterrupts>
	while (1){
		key=HKPD_U8GetPressedKey();
    3284:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    3288:	fe 01       	movw	r30, r28
    328a:	e5 53       	subi	r30, 0x35	; 53
    328c:	fe 4f       	sbci	r31, 0xFE	; 254
    328e:	80 83       	st	Z, r24
		if (key !=NOTPRESSED){
    3290:	fe 01       	movw	r30, r28
    3292:	e5 53       	subi	r30, 0x35	; 53
    3294:	fe 4f       	sbci	r31, 0xFE	; 254
    3296:	80 81       	ld	r24, Z
    3298:	82 33       	cpi	r24, 0x32	; 50
    329a:	11 f4       	brne	.+4      	; 0x32a0 <main+0x17e>
    329c:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <main+0x255e>

			if(key==1){
    32a0:	fe 01       	movw	r30, r28
    32a2:	e5 53       	subi	r30, 0x35	; 53
    32a4:	fe 4f       	sbci	r31, 0xFE	; 254
    32a6:	80 81       	ld	r24, Z
    32a8:	81 30       	cpi	r24, 0x01	; 1
    32aa:	11 f0       	breq	.+4      	; 0x32b0 <main+0x18e>
    32ac:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <main+0x15c6>
			HLCD_vDisplayClear();
    32b0:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
			HLCD_vSendString("Hours: ");
    32b4:	8a e7       	ldi	r24, 0x7A	; 122
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
			HLCD_vMoveTo(1,0);
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
    32c4:	fe 01       	movw	r30, r28
    32c6:	e3 54       	subi	r30, 0x43	; 67
    32c8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	aa ef       	ldi	r26, 0xFA	; 250
    32d0:	b3 e4       	ldi	r27, 0x43	; 67
    32d2:	80 83       	st	Z, r24
    32d4:	91 83       	std	Z+1, r25	; 0x01
    32d6:	a2 83       	std	Z+2, r26	; 0x02
    32d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32da:	8e 01       	movw	r16, r28
    32dc:	07 54       	subi	r16, 0x47	; 71
    32de:	1e 4f       	sbci	r17, 0xFE	; 254
    32e0:	fe 01       	movw	r30, r28
    32e2:	e3 54       	subi	r30, 0x43	; 67
    32e4:	fe 4f       	sbci	r31, 0xFE	; 254
    32e6:	60 81       	ld	r22, Z
    32e8:	71 81       	ldd	r23, Z+1	; 0x01
    32ea:	82 81       	ldd	r24, Z+2	; 0x02
    32ec:	93 81       	ldd	r25, Z+3	; 0x03
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	4a ef       	ldi	r20, 0xFA	; 250
    32f4:	54 e4       	ldi	r21, 0x44	; 68
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	f8 01       	movw	r30, r16
    3300:	80 83       	st	Z, r24
    3302:	91 83       	std	Z+1, r25	; 0x01
    3304:	a2 83       	std	Z+2, r26	; 0x02
    3306:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3308:	fe 01       	movw	r30, r28
    330a:	e7 54       	subi	r30, 0x47	; 71
    330c:	fe 4f       	sbci	r31, 0xFE	; 254
    330e:	60 81       	ld	r22, Z
    3310:	71 81       	ldd	r23, Z+1	; 0x01
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	93 81       	ldd	r25, Z+3	; 0x03
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e8       	ldi	r20, 0x80	; 128
    331c:	5f e3       	ldi	r21, 0x3F	; 63
    331e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3322:	88 23       	and	r24, r24
    3324:	44 f4       	brge	.+16     	; 0x3336 <main+0x214>
		__ticks = 1;
    3326:	fe 01       	movw	r30, r28
    3328:	e9 54       	subi	r30, 0x49	; 73
    332a:	fe 4f       	sbci	r31, 0xFE	; 254
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	91 83       	std	Z+1, r25	; 0x01
    3332:	80 83       	st	Z, r24
    3334:	64 c0       	rjmp	.+200    	; 0x33fe <main+0x2dc>
	else if (__tmp > 65535)
    3336:	fe 01       	movw	r30, r28
    3338:	e7 54       	subi	r30, 0x47	; 71
    333a:	fe 4f       	sbci	r31, 0xFE	; 254
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	0c f0       	brlt	.+2      	; 0x3356 <main+0x234>
    3354:	43 c0       	rjmp	.+134    	; 0x33dc <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	fe 01       	movw	r30, r28
    3358:	e3 54       	subi	r30, 0x43	; 67
    335a:	fe 4f       	sbci	r31, 0xFE	; 254
    335c:	60 81       	ld	r22, Z
    335e:	71 81       	ldd	r23, Z+1	; 0x01
    3360:	82 81       	ldd	r24, Z+2	; 0x02
    3362:	93 81       	ldd	r25, Z+3	; 0x03
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e2       	ldi	r20, 0x20	; 32
    336a:	51 e4       	ldi	r21, 0x41	; 65
    336c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	8e 01       	movw	r16, r28
    3376:	09 54       	subi	r16, 0x49	; 73
    3378:	1e 4f       	sbci	r17, 0xFE	; 254
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	f8 01       	movw	r30, r16
    3388:	91 83       	std	Z+1, r25	; 0x01
    338a:	80 83       	st	Z, r24
    338c:	1f c0       	rjmp	.+62     	; 0x33cc <main+0x2aa>
    338e:	fe 01       	movw	r30, r28
    3390:	eb 54       	subi	r30, 0x4B	; 75
    3392:	fe 4f       	sbci	r31, 0xFE	; 254
    3394:	88 ec       	ldi	r24, 0xC8	; 200
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	91 83       	std	Z+1, r25	; 0x01
    339a:	80 83       	st	Z, r24
    339c:	fe 01       	movw	r30, r28
    339e:	eb 54       	subi	r30, 0x4B	; 75
    33a0:	fe 4f       	sbci	r31, 0xFE	; 254
    33a2:	80 81       	ld	r24, Z
    33a4:	91 81       	ldd	r25, Z+1	; 0x01
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <main+0x284>
    33aa:	fe 01       	movw	r30, r28
    33ac:	eb 54       	subi	r30, 0x4B	; 75
    33ae:	fe 4f       	sbci	r31, 0xFE	; 254
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b4:	de 01       	movw	r26, r28
    33b6:	a9 54       	subi	r26, 0x49	; 73
    33b8:	be 4f       	sbci	r27, 0xFE	; 254
    33ba:	fe 01       	movw	r30, r28
    33bc:	e9 54       	subi	r30, 0x49	; 73
    33be:	fe 4f       	sbci	r31, 0xFE	; 254
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	11 96       	adiw	r26, 0x01	; 1
    33c8:	9c 93       	st	X, r25
    33ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33cc:	fe 01       	movw	r30, r28
    33ce:	e9 54       	subi	r30, 0x49	; 73
    33d0:	fe 4f       	sbci	r31, 0xFE	; 254
    33d2:	80 81       	ld	r24, Z
    33d4:	91 81       	ldd	r25, Z+1	; 0x01
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	d1 f6       	brne	.-76     	; 0x338e <main+0x26c>
    33da:	27 c0       	rjmp	.+78     	; 0x342a <main+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33dc:	8e 01       	movw	r16, r28
    33de:	09 54       	subi	r16, 0x49	; 73
    33e0:	1e 4f       	sbci	r17, 0xFE	; 254
    33e2:	fe 01       	movw	r30, r28
    33e4:	e7 54       	subi	r30, 0x47	; 71
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	60 81       	ld	r22, Z
    33ea:	71 81       	ldd	r23, Z+1	; 0x01
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f4:	dc 01       	movw	r26, r24
    33f6:	cb 01       	movw	r24, r22
    33f8:	f8 01       	movw	r30, r16
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
    33fe:	de 01       	movw	r26, r28
    3400:	ad 54       	subi	r26, 0x4D	; 77
    3402:	be 4f       	sbci	r27, 0xFE	; 254
    3404:	fe 01       	movw	r30, r28
    3406:	e9 54       	subi	r30, 0x49	; 73
    3408:	fe 4f       	sbci	r31, 0xFE	; 254
    340a:	80 81       	ld	r24, Z
    340c:	91 81       	ldd	r25, Z+1	; 0x01
    340e:	8d 93       	st	X+, r24
    3410:	9c 93       	st	X, r25
    3412:	fe 01       	movw	r30, r28
    3414:	ed 54       	subi	r30, 0x4D	; 77
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <main+0x2fa>
    3420:	fe 01       	movw	r30, r28
    3422:	ed 54       	subi	r30, 0x4D	; 77
    3424:	fe 4f       	sbci	r31, 0xFE	; 254
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
			_delay_ms(500);
			do{
				H_first_digit=HKPD_U8GetPressedKey();
    342a:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    342e:	fe 01       	movw	r30, r28
    3430:	e6 53       	subi	r30, 0x36	; 54
    3432:	fe 4f       	sbci	r31, 0xFE	; 254
    3434:	80 83       	st	Z, r24

			  } while (H_first_digit == NOTPRESSED);
    3436:	fe 01       	movw	r30, r28
    3438:	e6 53       	subi	r30, 0x36	; 54
    343a:	fe 4f       	sbci	r31, 0xFE	; 254
    343c:	80 81       	ld	r24, Z
    343e:	82 33       	cpi	r24, 0x32	; 50
    3440:	a1 f3       	breq	.-24     	; 0x342a <main+0x308>
				HLCD_vSendNumber(H_first_digit);
    3442:	fe 01       	movw	r30, r28
    3444:	e6 53       	subi	r30, 0x36	; 54
    3446:	fe 4f       	sbci	r31, 0xFE	; 254
    3448:	80 81       	ld	r24, Z
    344a:	88 2f       	mov	r24, r24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	a0 e0       	ldi	r26, 0x00	; 0
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
    345a:	fe 01       	movw	r30, r28
    345c:	e1 55       	subi	r30, 0x51	; 81
    345e:	fe 4f       	sbci	r31, 0xFE	; 254
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	a6 e9       	ldi	r26, 0x96	; 150
    3466:	b3 e4       	ldi	r27, 0x43	; 67
    3468:	80 83       	st	Z, r24
    346a:	91 83       	std	Z+1, r25	; 0x01
    346c:	a2 83       	std	Z+2, r26	; 0x02
    346e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3470:	8e 01       	movw	r16, r28
    3472:	05 55       	subi	r16, 0x55	; 85
    3474:	1e 4f       	sbci	r17, 0xFE	; 254
    3476:	fe 01       	movw	r30, r28
    3478:	e1 55       	subi	r30, 0x51	; 81
    347a:	fe 4f       	sbci	r31, 0xFE	; 254
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4a ef       	ldi	r20, 0xFA	; 250
    348a:	54 e4       	ldi	r21, 0x44	; 68
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	f8 01       	movw	r30, r16
    3496:	80 83       	st	Z, r24
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	a2 83       	std	Z+2, r26	; 0x02
    349c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    349e:	fe 01       	movw	r30, r28
    34a0:	e5 55       	subi	r30, 0x55	; 85
    34a2:	fe 4f       	sbci	r31, 0xFE	; 254
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e8       	ldi	r20, 0x80	; 128
    34b2:	5f e3       	ldi	r21, 0x3F	; 63
    34b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b8:	88 23       	and	r24, r24
    34ba:	44 f4       	brge	.+16     	; 0x34cc <main+0x3aa>
		__ticks = 1;
    34bc:	fe 01       	movw	r30, r28
    34be:	e7 55       	subi	r30, 0x57	; 87
    34c0:	fe 4f       	sbci	r31, 0xFE	; 254
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
    34ca:	64 c0       	rjmp	.+200    	; 0x3594 <main+0x472>
	else if (__tmp > 65535)
    34cc:	fe 01       	movw	r30, r28
    34ce:	e5 55       	subi	r30, 0x55	; 85
    34d0:	fe 4f       	sbci	r31, 0xFE	; 254
    34d2:	60 81       	ld	r22, Z
    34d4:	71 81       	ldd	r23, Z+1	; 0x01
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	93 81       	ldd	r25, Z+3	; 0x03
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	3f ef       	ldi	r19, 0xFF	; 255
    34de:	4f e7       	ldi	r20, 0x7F	; 127
    34e0:	57 e4       	ldi	r21, 0x47	; 71
    34e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e6:	18 16       	cp	r1, r24
    34e8:	0c f0       	brlt	.+2      	; 0x34ec <main+0x3ca>
    34ea:	43 c0       	rjmp	.+134    	; 0x3572 <main+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ec:	fe 01       	movw	r30, r28
    34ee:	e1 55       	subi	r30, 0x51	; 81
    34f0:	fe 4f       	sbci	r31, 0xFE	; 254
    34f2:	60 81       	ld	r22, Z
    34f4:	71 81       	ldd	r23, Z+1	; 0x01
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	93 81       	ldd	r25, Z+3	; 0x03
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	40 e2       	ldi	r20, 0x20	; 32
    3500:	51 e4       	ldi	r21, 0x41	; 65
    3502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	8e 01       	movw	r16, r28
    350c:	07 55       	subi	r16, 0x57	; 87
    350e:	1e 4f       	sbci	r17, 0xFE	; 254
    3510:	bc 01       	movw	r22, r24
    3512:	cd 01       	movw	r24, r26
    3514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	f8 01       	movw	r30, r16
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	80 83       	st	Z, r24
    3522:	1f c0       	rjmp	.+62     	; 0x3562 <main+0x440>
    3524:	fe 01       	movw	r30, r28
    3526:	e9 55       	subi	r30, 0x59	; 89
    3528:	fe 4f       	sbci	r31, 0xFE	; 254
    352a:	88 ec       	ldi	r24, 0xC8	; 200
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	91 83       	std	Z+1, r25	; 0x01
    3530:	80 83       	st	Z, r24
    3532:	fe 01       	movw	r30, r28
    3534:	e9 55       	subi	r30, 0x59	; 89
    3536:	fe 4f       	sbci	r31, 0xFE	; 254
    3538:	80 81       	ld	r24, Z
    353a:	91 81       	ldd	r25, Z+1	; 0x01
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <main+0x41a>
    3540:	fe 01       	movw	r30, r28
    3542:	e9 55       	subi	r30, 0x59	; 89
    3544:	fe 4f       	sbci	r31, 0xFE	; 254
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354a:	de 01       	movw	r26, r28
    354c:	a7 55       	subi	r26, 0x57	; 87
    354e:	be 4f       	sbci	r27, 0xFE	; 254
    3550:	fe 01       	movw	r30, r28
    3552:	e7 55       	subi	r30, 0x57	; 87
    3554:	fe 4f       	sbci	r31, 0xFE	; 254
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	11 96       	adiw	r26, 0x01	; 1
    355e:	9c 93       	st	X, r25
    3560:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3562:	fe 01       	movw	r30, r28
    3564:	e7 55       	subi	r30, 0x57	; 87
    3566:	fe 4f       	sbci	r31, 0xFE	; 254
    3568:	80 81       	ld	r24, Z
    356a:	91 81       	ldd	r25, Z+1	; 0x01
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	d1 f6       	brne	.-76     	; 0x3524 <main+0x402>
    3570:	27 c0       	rjmp	.+78     	; 0x35c0 <main+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3572:	8e 01       	movw	r16, r28
    3574:	07 55       	subi	r16, 0x57	; 87
    3576:	1e 4f       	sbci	r17, 0xFE	; 254
    3578:	fe 01       	movw	r30, r28
    357a:	e5 55       	subi	r30, 0x55	; 85
    357c:	fe 4f       	sbci	r31, 0xFE	; 254
    357e:	60 81       	ld	r22, Z
    3580:	71 81       	ldd	r23, Z+1	; 0x01
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	93 81       	ldd	r25, Z+3	; 0x03
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	f8 01       	movw	r30, r16
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	80 83       	st	Z, r24
    3594:	de 01       	movw	r26, r28
    3596:	ab 55       	subi	r26, 0x5B	; 91
    3598:	be 4f       	sbci	r27, 0xFE	; 254
    359a:	fe 01       	movw	r30, r28
    359c:	e7 55       	subi	r30, 0x57	; 87
    359e:	fe 4f       	sbci	r31, 0xFE	; 254
    35a0:	80 81       	ld	r24, Z
    35a2:	91 81       	ldd	r25, Z+1	; 0x01
    35a4:	8d 93       	st	X+, r24
    35a6:	9c 93       	st	X, r25
    35a8:	fe 01       	movw	r30, r28
    35aa:	eb 55       	subi	r30, 0x5B	; 91
    35ac:	fe 4f       	sbci	r31, 0xFE	; 254
    35ae:	80 81       	ld	r24, Z
    35b0:	91 81       	ldd	r25, Z+1	; 0x01
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <main+0x490>
    35b6:	fe 01       	movw	r30, r28
    35b8:	eb 55       	subi	r30, 0x5B	; 91
    35ba:	fe 4f       	sbci	r31, 0xFE	; 254
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	80 83       	st	Z, r24
				_delay_ms(300);
			do{
				H_second_digit=HKPD_U8GetPressedKey();
    35c0:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    35c4:	fe 01       	movw	r30, r28
    35c6:	e7 53       	subi	r30, 0x37	; 55
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	80 83       	st	Z, r24
			} while (H_second_digit == NOTPRESSED);
    35cc:	fe 01       	movw	r30, r28
    35ce:	e7 53       	subi	r30, 0x37	; 55
    35d0:	fe 4f       	sbci	r31, 0xFE	; 254
    35d2:	80 81       	ld	r24, Z
    35d4:	82 33       	cpi	r24, 0x32	; 50
    35d6:	a1 f3       	breq	.-24     	; 0x35c0 <main+0x49e>
			HLCD_vSendNumber(H_second_digit);
    35d8:	fe 01       	movw	r30, r28
    35da:	e7 53       	subi	r30, 0x37	; 55
    35dc:	fe 4f       	sbci	r31, 0xFE	; 254
    35de:	80 81       	ld	r24, Z
    35e0:	88 2f       	mov	r24, r24
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
			hours_counter=combine(H_first_digit,H_second_digit);
    35f0:	fe 01       	movw	r30, r28
    35f2:	e6 53       	subi	r30, 0x36	; 54
    35f4:	fe 4f       	sbci	r31, 0xFE	; 254
    35f6:	80 81       	ld	r24, Z
    35f8:	48 2f       	mov	r20, r24
    35fa:	50 e0       	ldi	r21, 0x00	; 0
    35fc:	fe 01       	movw	r30, r28
    35fe:	e7 53       	subi	r30, 0x37	; 55
    3600:	fe 4f       	sbci	r31, 0xFE	; 254
    3602:	80 81       	ld	r24, Z
    3604:	28 2f       	mov	r18, r24
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	ca 01       	movw	r24, r20
    360a:	b9 01       	movw	r22, r18
    360c:	0e 94 15 18 	call	0x302a	; 0x302a <combine>
    3610:	80 93 f3 00 	sts	0x00F3, r24
    3614:	fe 01       	movw	r30, r28
    3616:	ef 55       	subi	r30, 0x5F	; 95
    3618:	fe 4f       	sbci	r31, 0xFE	; 254
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	a6 e9       	ldi	r26, 0x96	; 150
    3620:	b3 e4       	ldi	r27, 0x43	; 67
    3622:	80 83       	st	Z, r24
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	a2 83       	std	Z+2, r26	; 0x02
    3628:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362a:	8e 01       	movw	r16, r28
    362c:	03 56       	subi	r16, 0x63	; 99
    362e:	1e 4f       	sbci	r17, 0xFE	; 254
    3630:	fe 01       	movw	r30, r28
    3632:	ef 55       	subi	r30, 0x5F	; 95
    3634:	fe 4f       	sbci	r31, 0xFE	; 254
    3636:	60 81       	ld	r22, Z
    3638:	71 81       	ldd	r23, Z+1	; 0x01
    363a:	82 81       	ldd	r24, Z+2	; 0x02
    363c:	93 81       	ldd	r25, Z+3	; 0x03
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	4a ef       	ldi	r20, 0xFA	; 250
    3644:	54 e4       	ldi	r21, 0x44	; 68
    3646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	f8 01       	movw	r30, r16
    3650:	80 83       	st	Z, r24
    3652:	91 83       	std	Z+1, r25	; 0x01
    3654:	a2 83       	std	Z+2, r26	; 0x02
    3656:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3658:	fe 01       	movw	r30, r28
    365a:	e3 56       	subi	r30, 0x63	; 99
    365c:	fe 4f       	sbci	r31, 0xFE	; 254
    365e:	60 81       	ld	r22, Z
    3660:	71 81       	ldd	r23, Z+1	; 0x01
    3662:	82 81       	ldd	r24, Z+2	; 0x02
    3664:	93 81       	ldd	r25, Z+3	; 0x03
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e8       	ldi	r20, 0x80	; 128
    366c:	5f e3       	ldi	r21, 0x3F	; 63
    366e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3672:	88 23       	and	r24, r24
    3674:	44 f4       	brge	.+16     	; 0x3686 <main+0x564>
		__ticks = 1;
    3676:	fe 01       	movw	r30, r28
    3678:	e5 56       	subi	r30, 0x65	; 101
    367a:	fe 4f       	sbci	r31, 0xFE	; 254
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	91 83       	std	Z+1, r25	; 0x01
    3682:	80 83       	st	Z, r24
    3684:	64 c0       	rjmp	.+200    	; 0x374e <main+0x62c>
	else if (__tmp > 65535)
    3686:	fe 01       	movw	r30, r28
    3688:	e3 56       	subi	r30, 0x63	; 99
    368a:	fe 4f       	sbci	r31, 0xFE	; 254
    368c:	60 81       	ld	r22, Z
    368e:	71 81       	ldd	r23, Z+1	; 0x01
    3690:	82 81       	ldd	r24, Z+2	; 0x02
    3692:	93 81       	ldd	r25, Z+3	; 0x03
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	3f ef       	ldi	r19, 0xFF	; 255
    3698:	4f e7       	ldi	r20, 0x7F	; 127
    369a:	57 e4       	ldi	r21, 0x47	; 71
    369c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36a0:	18 16       	cp	r1, r24
    36a2:	0c f0       	brlt	.+2      	; 0x36a6 <main+0x584>
    36a4:	43 c0       	rjmp	.+134    	; 0x372c <main+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a6:	fe 01       	movw	r30, r28
    36a8:	ef 55       	subi	r30, 0x5F	; 95
    36aa:	fe 4f       	sbci	r31, 0xFE	; 254
    36ac:	60 81       	ld	r22, Z
    36ae:	71 81       	ldd	r23, Z+1	; 0x01
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	40 e2       	ldi	r20, 0x20	; 32
    36ba:	51 e4       	ldi	r21, 0x41	; 65
    36bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	8e 01       	movw	r16, r28
    36c6:	05 56       	subi	r16, 0x65	; 101
    36c8:	1e 4f       	sbci	r17, 0xFE	; 254
    36ca:	bc 01       	movw	r22, r24
    36cc:	cd 01       	movw	r24, r26
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	f8 01       	movw	r30, r16
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	80 83       	st	Z, r24
    36dc:	1f c0       	rjmp	.+62     	; 0x371c <main+0x5fa>
    36de:	fe 01       	movw	r30, r28
    36e0:	e7 56       	subi	r30, 0x67	; 103
    36e2:	fe 4f       	sbci	r31, 0xFE	; 254
    36e4:	88 ec       	ldi	r24, 0xC8	; 200
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	80 83       	st	Z, r24
    36ec:	fe 01       	movw	r30, r28
    36ee:	e7 56       	subi	r30, 0x67	; 103
    36f0:	fe 4f       	sbci	r31, 0xFE	; 254
    36f2:	80 81       	ld	r24, Z
    36f4:	91 81       	ldd	r25, Z+1	; 0x01
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <main+0x5d4>
    36fa:	fe 01       	movw	r30, r28
    36fc:	e7 56       	subi	r30, 0x67	; 103
    36fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3704:	de 01       	movw	r26, r28
    3706:	a5 56       	subi	r26, 0x65	; 101
    3708:	be 4f       	sbci	r27, 0xFE	; 254
    370a:	fe 01       	movw	r30, r28
    370c:	e5 56       	subi	r30, 0x65	; 101
    370e:	fe 4f       	sbci	r31, 0xFE	; 254
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	01 97       	sbiw	r24, 0x01	; 1
    3716:	11 96       	adiw	r26, 0x01	; 1
    3718:	9c 93       	st	X, r25
    371a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    371c:	fe 01       	movw	r30, r28
    371e:	e5 56       	subi	r30, 0x65	; 101
    3720:	fe 4f       	sbci	r31, 0xFE	; 254
    3722:	80 81       	ld	r24, Z
    3724:	91 81       	ldd	r25, Z+1	; 0x01
    3726:	00 97       	sbiw	r24, 0x00	; 0
    3728:	d1 f6       	brne	.-76     	; 0x36de <main+0x5bc>
    372a:	27 c0       	rjmp	.+78     	; 0x377a <main+0x658>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372c:	8e 01       	movw	r16, r28
    372e:	05 56       	subi	r16, 0x65	; 101
    3730:	1e 4f       	sbci	r17, 0xFE	; 254
    3732:	fe 01       	movw	r30, r28
    3734:	e3 56       	subi	r30, 0x63	; 99
    3736:	fe 4f       	sbci	r31, 0xFE	; 254
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	f8 01       	movw	r30, r16
    374a:	91 83       	std	Z+1, r25	; 0x01
    374c:	80 83       	st	Z, r24
    374e:	de 01       	movw	r26, r28
    3750:	a9 56       	subi	r26, 0x69	; 105
    3752:	be 4f       	sbci	r27, 0xFE	; 254
    3754:	fe 01       	movw	r30, r28
    3756:	e5 56       	subi	r30, 0x65	; 101
    3758:	fe 4f       	sbci	r31, 0xFE	; 254
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	8d 93       	st	X+, r24
    3760:	9c 93       	st	X, r25
    3762:	fe 01       	movw	r30, r28
    3764:	e9 56       	subi	r30, 0x69	; 105
    3766:	fe 4f       	sbci	r31, 0xFE	; 254
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <main+0x64a>
    3770:	fe 01       	movw	r30, r28
    3772:	e9 56       	subi	r30, 0x69	; 105
    3774:	fe 4f       	sbci	r31, 0xFE	; 254
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	80 83       	st	Z, r24
			_delay_ms(300);

			HLCD_vDisplayClear();
    377a:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
			HLCD_vSendString("Minutes: ");
    377e:	82 e8       	ldi	r24, 0x82	; 130
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
			HLCD_vMoveTo(1,0);
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	60 e0       	ldi	r22, 0x00	; 0
    378a:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
    378e:	fe 01       	movw	r30, r28
    3790:	ed 56       	subi	r30, 0x6D	; 109
    3792:	fe 4f       	sbci	r31, 0xFE	; 254
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	aa ef       	ldi	r26, 0xFA	; 250
    379a:	b3 e4       	ldi	r27, 0x43	; 67
    379c:	80 83       	st	Z, r24
    379e:	91 83       	std	Z+1, r25	; 0x01
    37a0:	a2 83       	std	Z+2, r26	; 0x02
    37a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a4:	8e 01       	movw	r16, r28
    37a6:	01 57       	subi	r16, 0x71	; 113
    37a8:	1e 4f       	sbci	r17, 0xFE	; 254
    37aa:	fe 01       	movw	r30, r28
    37ac:	ed 56       	subi	r30, 0x6D	; 109
    37ae:	fe 4f       	sbci	r31, 0xFE	; 254
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	4a ef       	ldi	r20, 0xFA	; 250
    37be:	54 e4       	ldi	r21, 0x44	; 68
    37c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	f8 01       	movw	r30, r16
    37ca:	80 83       	st	Z, r24
    37cc:	91 83       	std	Z+1, r25	; 0x01
    37ce:	a2 83       	std	Z+2, r26	; 0x02
    37d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37d2:	fe 01       	movw	r30, r28
    37d4:	e1 57       	subi	r30, 0x71	; 113
    37d6:	fe 4f       	sbci	r31, 0xFE	; 254
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e8       	ldi	r20, 0x80	; 128
    37e6:	5f e3       	ldi	r21, 0x3F	; 63
    37e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ec:	88 23       	and	r24, r24
    37ee:	44 f4       	brge	.+16     	; 0x3800 <main+0x6de>
		__ticks = 1;
    37f0:	fe 01       	movw	r30, r28
    37f2:	e3 57       	subi	r30, 0x73	; 115
    37f4:	fe 4f       	sbci	r31, 0xFE	; 254
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
    37fe:	64 c0       	rjmp	.+200    	; 0x38c8 <main+0x7a6>
	else if (__tmp > 65535)
    3800:	fe 01       	movw	r30, r28
    3802:	e1 57       	subi	r30, 0x71	; 113
    3804:	fe 4f       	sbci	r31, 0xFE	; 254
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	20 e0       	ldi	r18, 0x00	; 0
    3810:	3f ef       	ldi	r19, 0xFF	; 255
    3812:	4f e7       	ldi	r20, 0x7F	; 127
    3814:	57 e4       	ldi	r21, 0x47	; 71
    3816:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    381a:	18 16       	cp	r1, r24
    381c:	0c f0       	brlt	.+2      	; 0x3820 <main+0x6fe>
    381e:	43 c0       	rjmp	.+134    	; 0x38a6 <main+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3820:	fe 01       	movw	r30, r28
    3822:	ed 56       	subi	r30, 0x6D	; 109
    3824:	fe 4f       	sbci	r31, 0xFE	; 254
    3826:	60 81       	ld	r22, Z
    3828:	71 81       	ldd	r23, Z+1	; 0x01
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	93 81       	ldd	r25, Z+3	; 0x03
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e2       	ldi	r20, 0x20	; 32
    3834:	51 e4       	ldi	r21, 0x41	; 65
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8e 01       	movw	r16, r28
    3840:	03 57       	subi	r16, 0x73	; 115
    3842:	1e 4f       	sbci	r17, 0xFE	; 254
    3844:	bc 01       	movw	r22, r24
    3846:	cd 01       	movw	r24, r26
    3848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	f8 01       	movw	r30, r16
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	80 83       	st	Z, r24
    3856:	1f c0       	rjmp	.+62     	; 0x3896 <main+0x774>
    3858:	fe 01       	movw	r30, r28
    385a:	e5 57       	subi	r30, 0x75	; 117
    385c:	fe 4f       	sbci	r31, 0xFE	; 254
    385e:	88 ec       	ldi	r24, 0xC8	; 200
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	80 83       	st	Z, r24
    3866:	fe 01       	movw	r30, r28
    3868:	e5 57       	subi	r30, 0x75	; 117
    386a:	fe 4f       	sbci	r31, 0xFE	; 254
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <main+0x74e>
    3874:	fe 01       	movw	r30, r28
    3876:	e5 57       	subi	r30, 0x75	; 117
    3878:	fe 4f       	sbci	r31, 0xFE	; 254
    387a:	91 83       	std	Z+1, r25	; 0x01
    387c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387e:	de 01       	movw	r26, r28
    3880:	a3 57       	subi	r26, 0x73	; 115
    3882:	be 4f       	sbci	r27, 0xFE	; 254
    3884:	fe 01       	movw	r30, r28
    3886:	e3 57       	subi	r30, 0x73	; 115
    3888:	fe 4f       	sbci	r31, 0xFE	; 254
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	11 96       	adiw	r26, 0x01	; 1
    3892:	9c 93       	st	X, r25
    3894:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	fe 01       	movw	r30, r28
    3898:	e3 57       	subi	r30, 0x73	; 115
    389a:	fe 4f       	sbci	r31, 0xFE	; 254
    389c:	80 81       	ld	r24, Z
    389e:	91 81       	ldd	r25, Z+1	; 0x01
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	d1 f6       	brne	.-76     	; 0x3858 <main+0x736>
    38a4:	27 c0       	rjmp	.+78     	; 0x38f4 <main+0x7d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a6:	8e 01       	movw	r16, r28
    38a8:	03 57       	subi	r16, 0x73	; 115
    38aa:	1e 4f       	sbci	r17, 0xFE	; 254
    38ac:	fe 01       	movw	r30, r28
    38ae:	e1 57       	subi	r30, 0x71	; 113
    38b0:	fe 4f       	sbci	r31, 0xFE	; 254
    38b2:	60 81       	ld	r22, Z
    38b4:	71 81       	ldd	r23, Z+1	; 0x01
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	f8 01       	movw	r30, r16
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
    38c8:	de 01       	movw	r26, r28
    38ca:	a7 57       	subi	r26, 0x77	; 119
    38cc:	be 4f       	sbci	r27, 0xFE	; 254
    38ce:	fe 01       	movw	r30, r28
    38d0:	e3 57       	subi	r30, 0x73	; 115
    38d2:	fe 4f       	sbci	r31, 0xFE	; 254
    38d4:	80 81       	ld	r24, Z
    38d6:	91 81       	ldd	r25, Z+1	; 0x01
    38d8:	8d 93       	st	X+, r24
    38da:	9c 93       	st	X, r25
    38dc:	fe 01       	movw	r30, r28
    38de:	e7 57       	subi	r30, 0x77	; 119
    38e0:	fe 4f       	sbci	r31, 0xFE	; 254
    38e2:	80 81       	ld	r24, Z
    38e4:	91 81       	ldd	r25, Z+1	; 0x01
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	f1 f7       	brne	.-4      	; 0x38e6 <main+0x7c4>
    38ea:	fe 01       	movw	r30, r28
    38ec:	e7 57       	subi	r30, 0x77	; 119
    38ee:	fe 4f       	sbci	r31, 0xFE	; 254
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
			_delay_ms(500);
			do{
				M_first_digit=HKPD_U8GetPressedKey();
    38f4:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    38f8:	fe 01       	movw	r30, r28
    38fa:	e8 53       	subi	r30, 0x38	; 56
    38fc:	fe 4f       	sbci	r31, 0xFE	; 254
    38fe:	80 83       	st	Z, r24

			  } while (M_first_digit == NOTPRESSED);
    3900:	fe 01       	movw	r30, r28
    3902:	e8 53       	subi	r30, 0x38	; 56
    3904:	fe 4f       	sbci	r31, 0xFE	; 254
    3906:	80 81       	ld	r24, Z
    3908:	82 33       	cpi	r24, 0x32	; 50
    390a:	a1 f3       	breq	.-24     	; 0x38f4 <main+0x7d2>
				HLCD_vSendNumber(M_first_digit);
    390c:	fe 01       	movw	r30, r28
    390e:	e8 53       	subi	r30, 0x38	; 56
    3910:	fe 4f       	sbci	r31, 0xFE	; 254
    3912:	80 81       	ld	r24, Z
    3914:	88 2f       	mov	r24, r24
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	a0 e0       	ldi	r26, 0x00	; 0
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	bc 01       	movw	r22, r24
    391e:	cd 01       	movw	r24, r26
    3920:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
    3924:	fe 01       	movw	r30, r28
    3926:	eb 57       	subi	r30, 0x7B	; 123
    3928:	fe 4f       	sbci	r31, 0xFE	; 254
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	a6 e9       	ldi	r26, 0x96	; 150
    3930:	b3 e4       	ldi	r27, 0x43	; 67
    3932:	80 83       	st	Z, r24
    3934:	91 83       	std	Z+1, r25	; 0x01
    3936:	a2 83       	std	Z+2, r26	; 0x02
    3938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393a:	8e 01       	movw	r16, r28
    393c:	0f 57       	subi	r16, 0x7F	; 127
    393e:	1e 4f       	sbci	r17, 0xFE	; 254
    3940:	fe 01       	movw	r30, r28
    3942:	eb 57       	subi	r30, 0x7B	; 123
    3944:	fe 4f       	sbci	r31, 0xFE	; 254
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	4a ef       	ldi	r20, 0xFA	; 250
    3954:	54 e4       	ldi	r21, 0x44	; 68
    3956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	f8 01       	movw	r30, r16
    3960:	80 83       	st	Z, r24
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	a2 83       	std	Z+2, r26	; 0x02
    3966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3968:	fe 01       	movw	r30, r28
    396a:	ef 57       	subi	r30, 0x7F	; 127
    396c:	fe 4f       	sbci	r31, 0xFE	; 254
    396e:	60 81       	ld	r22, Z
    3970:	71 81       	ldd	r23, Z+1	; 0x01
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e8       	ldi	r20, 0x80	; 128
    397c:	5f e3       	ldi	r21, 0x3F	; 63
    397e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3982:	88 23       	and	r24, r24
    3984:	44 f4       	brge	.+16     	; 0x3996 <main+0x874>
		__ticks = 1;
    3986:	fe 01       	movw	r30, r28
    3988:	e1 58       	subi	r30, 0x81	; 129
    398a:	fe 4f       	sbci	r31, 0xFE	; 254
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
    3994:	64 c0       	rjmp	.+200    	; 0x3a5e <main+0x93c>
	else if (__tmp > 65535)
    3996:	fe 01       	movw	r30, r28
    3998:	ef 57       	subi	r30, 0x7F	; 127
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	60 81       	ld	r22, Z
    399e:	71 81       	ldd	r23, Z+1	; 0x01
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	93 81       	ldd	r25, Z+3	; 0x03
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	3f ef       	ldi	r19, 0xFF	; 255
    39a8:	4f e7       	ldi	r20, 0x7F	; 127
    39aa:	57 e4       	ldi	r21, 0x47	; 71
    39ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39b0:	18 16       	cp	r1, r24
    39b2:	0c f0       	brlt	.+2      	; 0x39b6 <main+0x894>
    39b4:	43 c0       	rjmp	.+134    	; 0x3a3c <main+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b6:	fe 01       	movw	r30, r28
    39b8:	eb 57       	subi	r30, 0x7B	; 123
    39ba:	fe 4f       	sbci	r31, 0xFE	; 254
    39bc:	60 81       	ld	r22, Z
    39be:	71 81       	ldd	r23, Z+1	; 0x01
    39c0:	82 81       	ldd	r24, Z+2	; 0x02
    39c2:	93 81       	ldd	r25, Z+3	; 0x03
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e2       	ldi	r20, 0x20	; 32
    39ca:	51 e4       	ldi	r21, 0x41	; 65
    39cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	8e 01       	movw	r16, r28
    39d6:	01 58       	subi	r16, 0x81	; 129
    39d8:	1e 4f       	sbci	r17, 0xFE	; 254
    39da:	bc 01       	movw	r22, r24
    39dc:	cd 01       	movw	r24, r26
    39de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	f8 01       	movw	r30, r16
    39e8:	91 83       	std	Z+1, r25	; 0x01
    39ea:	80 83       	st	Z, r24
    39ec:	1f c0       	rjmp	.+62     	; 0x3a2c <main+0x90a>
    39ee:	fe 01       	movw	r30, r28
    39f0:	e3 58       	subi	r30, 0x83	; 131
    39f2:	fe 4f       	sbci	r31, 0xFE	; 254
    39f4:	88 ec       	ldi	r24, 0xC8	; 200
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	80 83       	st	Z, r24
    39fc:	fe 01       	movw	r30, r28
    39fe:	e3 58       	subi	r30, 0x83	; 131
    3a00:	fe 4f       	sbci	r31, 0xFE	; 254
    3a02:	80 81       	ld	r24, Z
    3a04:	91 81       	ldd	r25, Z+1	; 0x01
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <main+0x8e4>
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e3 58       	subi	r30, 0x83	; 131
    3a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a10:	91 83       	std	Z+1, r25	; 0x01
    3a12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a14:	de 01       	movw	r26, r28
    3a16:	a1 58       	subi	r26, 0x81	; 129
    3a18:	be 4f       	sbci	r27, 0xFE	; 254
    3a1a:	fe 01       	movw	r30, r28
    3a1c:	e1 58       	subi	r30, 0x81	; 129
    3a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a20:	80 81       	ld	r24, Z
    3a22:	91 81       	ldd	r25, Z+1	; 0x01
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	11 96       	adiw	r26, 0x01	; 1
    3a28:	9c 93       	st	X, r25
    3a2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e1 58       	subi	r30, 0x81	; 129
    3a30:	fe 4f       	sbci	r31, 0xFE	; 254
    3a32:	80 81       	ld	r24, Z
    3a34:	91 81       	ldd	r25, Z+1	; 0x01
    3a36:	00 97       	sbiw	r24, 0x00	; 0
    3a38:	d1 f6       	brne	.-76     	; 0x39ee <main+0x8cc>
    3a3a:	27 c0       	rjmp	.+78     	; 0x3a8a <main+0x968>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	01 58       	subi	r16, 0x81	; 129
    3a40:	1e 4f       	sbci	r17, 0xFE	; 254
    3a42:	fe 01       	movw	r30, r28
    3a44:	ef 57       	subi	r30, 0x7F	; 127
    3a46:	fe 4f       	sbci	r31, 0xFE	; 254
    3a48:	60 81       	ld	r22, Z
    3a4a:	71 81       	ldd	r23, Z+1	; 0x01
    3a4c:	82 81       	ldd	r24, Z+2	; 0x02
    3a4e:	93 81       	ldd	r25, Z+3	; 0x03
    3a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	f8 01       	movw	r30, r16
    3a5a:	91 83       	std	Z+1, r25	; 0x01
    3a5c:	80 83       	st	Z, r24
    3a5e:	de 01       	movw	r26, r28
    3a60:	a5 58       	subi	r26, 0x85	; 133
    3a62:	be 4f       	sbci	r27, 0xFE	; 254
    3a64:	fe 01       	movw	r30, r28
    3a66:	e1 58       	subi	r30, 0x81	; 129
    3a68:	fe 4f       	sbci	r31, 0xFE	; 254
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	8d 93       	st	X+, r24
    3a70:	9c 93       	st	X, r25
    3a72:	fe 01       	movw	r30, r28
    3a74:	e5 58       	subi	r30, 0x85	; 133
    3a76:	fe 4f       	sbci	r31, 0xFE	; 254
    3a78:	80 81       	ld	r24, Z
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	01 97       	sbiw	r24, 0x01	; 1
    3a7e:	f1 f7       	brne	.-4      	; 0x3a7c <main+0x95a>
    3a80:	fe 01       	movw	r30, r28
    3a82:	e5 58       	subi	r30, 0x85	; 133
    3a84:	fe 4f       	sbci	r31, 0xFE	; 254
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	80 83       	st	Z, r24
				_delay_ms(300);
			do{
				M_second_digit=HKPD_U8GetPressedKey();
    3a8a:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e9 53       	subi	r30, 0x39	; 57
    3a92:	fe 4f       	sbci	r31, 0xFE	; 254
    3a94:	80 83       	st	Z, r24
			  } while (M_second_digit == NOTPRESSED);
    3a96:	fe 01       	movw	r30, r28
    3a98:	e9 53       	subi	r30, 0x39	; 57
    3a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a9c:	80 81       	ld	r24, Z
    3a9e:	82 33       	cpi	r24, 0x32	; 50
    3aa0:	a1 f3       	breq	.-24     	; 0x3a8a <main+0x968>
				HLCD_vSendNumber(M_second_digit);
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	e9 53       	subi	r30, 0x39	; 57
    3aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa8:	80 81       	ld	r24, Z
    3aaa:	88 2f       	mov	r24, r24
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a0 e0       	ldi	r26, 0x00	; 0
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	bc 01       	movw	r22, r24
    3ab4:	cd 01       	movw	r24, r26
    3ab6:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
				minutes_counter=combine(M_first_digit,M_second_digit);
    3aba:	fe 01       	movw	r30, r28
    3abc:	e8 53       	subi	r30, 0x38	; 56
    3abe:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac0:	80 81       	ld	r24, Z
    3ac2:	48 2f       	mov	r20, r24
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e9 53       	subi	r30, 0x39	; 57
    3aca:	fe 4f       	sbci	r31, 0xFE	; 254
    3acc:	80 81       	ld	r24, Z
    3ace:	28 2f       	mov	r18, r24
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	ca 01       	movw	r24, r20
    3ad4:	b9 01       	movw	r22, r18
    3ad6:	0e 94 15 18 	call	0x302a	; 0x302a <combine>
    3ada:	80 93 f2 00 	sts	0x00F2, r24
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e9 58       	subi	r30, 0x89	; 137
    3ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	a6 e9       	ldi	r26, 0x96	; 150
    3aea:	b3 e4       	ldi	r27, 0x43	; 67
    3aec:	80 83       	st	Z, r24
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	a2 83       	std	Z+2, r26	; 0x02
    3af2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af4:	8e 01       	movw	r16, r28
    3af6:	0d 58       	subi	r16, 0x8D	; 141
    3af8:	1e 4f       	sbci	r17, 0xFE	; 254
    3afa:	fe 01       	movw	r30, r28
    3afc:	e9 58       	subi	r30, 0x89	; 137
    3afe:	fe 4f       	sbci	r31, 0xFE	; 254
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	4a ef       	ldi	r20, 0xFA	; 250
    3b0e:	54 e4       	ldi	r21, 0x44	; 68
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	f8 01       	movw	r30, r16
    3b1a:	80 83       	st	Z, r24
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	a2 83       	std	Z+2, r26	; 0x02
    3b20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b22:	fe 01       	movw	r30, r28
    3b24:	ed 58       	subi	r30, 0x8D	; 141
    3b26:	fe 4f       	sbci	r31, 0xFE	; 254
    3b28:	60 81       	ld	r22, Z
    3b2a:	71 81       	ldd	r23, Z+1	; 0x01
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	93 81       	ldd	r25, Z+3	; 0x03
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e8       	ldi	r20, 0x80	; 128
    3b36:	5f e3       	ldi	r21, 0x3F	; 63
    3b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b3c:	88 23       	and	r24, r24
    3b3e:	44 f4       	brge	.+16     	; 0x3b50 <main+0xa2e>
		__ticks = 1;
    3b40:	fe 01       	movw	r30, r28
    3b42:	ef 58       	subi	r30, 0x8F	; 143
    3b44:	fe 4f       	sbci	r31, 0xFE	; 254
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	80 83       	st	Z, r24
    3b4e:	64 c0       	rjmp	.+200    	; 0x3c18 <main+0xaf6>
	else if (__tmp > 65535)
    3b50:	fe 01       	movw	r30, r28
    3b52:	ed 58       	subi	r30, 0x8D	; 141
    3b54:	fe 4f       	sbci	r31, 0xFE	; 254
    3b56:	60 81       	ld	r22, Z
    3b58:	71 81       	ldd	r23, Z+1	; 0x01
    3b5a:	82 81       	ldd	r24, Z+2	; 0x02
    3b5c:	93 81       	ldd	r25, Z+3	; 0x03
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	3f ef       	ldi	r19, 0xFF	; 255
    3b62:	4f e7       	ldi	r20, 0x7F	; 127
    3b64:	57 e4       	ldi	r21, 0x47	; 71
    3b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b6a:	18 16       	cp	r1, r24
    3b6c:	0c f0       	brlt	.+2      	; 0x3b70 <main+0xa4e>
    3b6e:	43 c0       	rjmp	.+134    	; 0x3bf6 <main+0xad4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b70:	fe 01       	movw	r30, r28
    3b72:	e9 58       	subi	r30, 0x89	; 137
    3b74:	fe 4f       	sbci	r31, 0xFE	; 254
    3b76:	60 81       	ld	r22, Z
    3b78:	71 81       	ldd	r23, Z+1	; 0x01
    3b7a:	82 81       	ldd	r24, Z+2	; 0x02
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	40 e2       	ldi	r20, 0x20	; 32
    3b84:	51 e4       	ldi	r21, 0x41	; 65
    3b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	8e 01       	movw	r16, r28
    3b90:	0f 58       	subi	r16, 0x8F	; 143
    3b92:	1e 4f       	sbci	r17, 0xFE	; 254
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	f8 01       	movw	r30, r16
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
    3ba6:	1f c0       	rjmp	.+62     	; 0x3be6 <main+0xac4>
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e1 59       	subi	r30, 0x91	; 145
    3bac:	fe 4f       	sbci	r31, 0xFE	; 254
    3bae:	88 ec       	ldi	r24, 0xC8	; 200
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	91 83       	std	Z+1, r25	; 0x01
    3bb4:	80 83       	st	Z, r24
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	e1 59       	subi	r30, 0x91	; 145
    3bba:	fe 4f       	sbci	r31, 0xFE	; 254
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <main+0xa9e>
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e1 59       	subi	r30, 0x91	; 145
    3bc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bce:	de 01       	movw	r26, r28
    3bd0:	af 58       	subi	r26, 0x8F	; 143
    3bd2:	be 4f       	sbci	r27, 0xFE	; 254
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	ef 58       	subi	r30, 0x8F	; 143
    3bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bda:	80 81       	ld	r24, Z
    3bdc:	91 81       	ldd	r25, Z+1	; 0x01
    3bde:	01 97       	sbiw	r24, 0x01	; 1
    3be0:	11 96       	adiw	r26, 0x01	; 1
    3be2:	9c 93       	st	X, r25
    3be4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be6:	fe 01       	movw	r30, r28
    3be8:	ef 58       	subi	r30, 0x8F	; 143
    3bea:	fe 4f       	sbci	r31, 0xFE	; 254
    3bec:	80 81       	ld	r24, Z
    3bee:	91 81       	ldd	r25, Z+1	; 0x01
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	d1 f6       	brne	.-76     	; 0x3ba8 <main+0xa86>
    3bf4:	27 c0       	rjmp	.+78     	; 0x3c44 <main+0xb22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf6:	8e 01       	movw	r16, r28
    3bf8:	0f 58       	subi	r16, 0x8F	; 143
    3bfa:	1e 4f       	sbci	r17, 0xFE	; 254
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	ed 58       	subi	r30, 0x8D	; 141
    3c00:	fe 4f       	sbci	r31, 0xFE	; 254
    3c02:	60 81       	ld	r22, Z
    3c04:	71 81       	ldd	r23, Z+1	; 0x01
    3c06:	82 81       	ldd	r24, Z+2	; 0x02
    3c08:	93 81       	ldd	r25, Z+3	; 0x03
    3c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	f8 01       	movw	r30, r16
    3c14:	91 83       	std	Z+1, r25	; 0x01
    3c16:	80 83       	st	Z, r24
    3c18:	de 01       	movw	r26, r28
    3c1a:	a3 59       	subi	r26, 0x93	; 147
    3c1c:	be 4f       	sbci	r27, 0xFE	; 254
    3c1e:	fe 01       	movw	r30, r28
    3c20:	ef 58       	subi	r30, 0x8F	; 143
    3c22:	fe 4f       	sbci	r31, 0xFE	; 254
    3c24:	80 81       	ld	r24, Z
    3c26:	91 81       	ldd	r25, Z+1	; 0x01
    3c28:	8d 93       	st	X+, r24
    3c2a:	9c 93       	st	X, r25
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e3 59       	subi	r30, 0x93	; 147
    3c30:	fe 4f       	sbci	r31, 0xFE	; 254
    3c32:	80 81       	ld	r24, Z
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <main+0xb14>
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	e3 59       	subi	r30, 0x93	; 147
    3c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	80 83       	st	Z, r24
				_delay_ms(300);

			HLCD_vDisplayClear();
    3c44:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
			HLCD_vSendString("Seconds: ");
    3c48:	8c e8       	ldi	r24, 0x8C	; 140
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
			HLCD_vMoveTo(1,0);
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	60 e0       	ldi	r22, 0x00	; 0
    3c54:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
    3c58:	fe 01       	movw	r30, r28
    3c5a:	e7 59       	subi	r30, 0x97	; 151
    3c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	aa ef       	ldi	r26, 0xFA	; 250
    3c64:	b3 e4       	ldi	r27, 0x43	; 67
    3c66:	80 83       	st	Z, r24
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	a2 83       	std	Z+2, r26	; 0x02
    3c6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6e:	8e 01       	movw	r16, r28
    3c70:	0b 59       	subi	r16, 0x9B	; 155
    3c72:	1e 4f       	sbci	r17, 0xFE	; 254
    3c74:	fe 01       	movw	r30, r28
    3c76:	e7 59       	subi	r30, 0x97	; 151
    3c78:	fe 4f       	sbci	r31, 0xFE	; 254
    3c7a:	60 81       	ld	r22, Z
    3c7c:	71 81       	ldd	r23, Z+1	; 0x01
    3c7e:	82 81       	ldd	r24, Z+2	; 0x02
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	4a ef       	ldi	r20, 0xFA	; 250
    3c88:	54 e4       	ldi	r21, 0x44	; 68
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	f8 01       	movw	r30, r16
    3c94:	80 83       	st	Z, r24
    3c96:	91 83       	std	Z+1, r25	; 0x01
    3c98:	a2 83       	std	Z+2, r26	; 0x02
    3c9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	eb 59       	subi	r30, 0x9B	; 155
    3ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	82 81       	ldd	r24, Z+2	; 0x02
    3ca8:	93 81       	ldd	r25, Z+3	; 0x03
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	40 e8       	ldi	r20, 0x80	; 128
    3cb0:	5f e3       	ldi	r21, 0x3F	; 63
    3cb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cb6:	88 23       	and	r24, r24
    3cb8:	44 f4       	brge	.+16     	; 0x3cca <main+0xba8>
		__ticks = 1;
    3cba:	fe 01       	movw	r30, r28
    3cbc:	ed 59       	subi	r30, 0x9D	; 157
    3cbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	91 83       	std	Z+1, r25	; 0x01
    3cc6:	80 83       	st	Z, r24
    3cc8:	64 c0       	rjmp	.+200    	; 0x3d92 <main+0xc70>
	else if (__tmp > 65535)
    3cca:	fe 01       	movw	r30, r28
    3ccc:	eb 59       	subi	r30, 0x9B	; 155
    3cce:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	3f ef       	ldi	r19, 0xFF	; 255
    3cdc:	4f e7       	ldi	r20, 0x7F	; 127
    3cde:	57 e4       	ldi	r21, 0x47	; 71
    3ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ce4:	18 16       	cp	r1, r24
    3ce6:	0c f0       	brlt	.+2      	; 0x3cea <main+0xbc8>
    3ce8:	43 c0       	rjmp	.+134    	; 0x3d70 <main+0xc4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cea:	fe 01       	movw	r30, r28
    3cec:	e7 59       	subi	r30, 0x97	; 151
    3cee:	fe 4f       	sbci	r31, 0xFE	; 254
    3cf0:	60 81       	ld	r22, Z
    3cf2:	71 81       	ldd	r23, Z+1	; 0x01
    3cf4:	82 81       	ldd	r24, Z+2	; 0x02
    3cf6:	93 81       	ldd	r25, Z+3	; 0x03
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	40 e2       	ldi	r20, 0x20	; 32
    3cfe:	51 e4       	ldi	r21, 0x41	; 65
    3d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	8e 01       	movw	r16, r28
    3d0a:	0d 59       	subi	r16, 0x9D	; 157
    3d0c:	1e 4f       	sbci	r17, 0xFE	; 254
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	f8 01       	movw	r30, r16
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	80 83       	st	Z, r24
    3d20:	1f c0       	rjmp	.+62     	; 0x3d60 <main+0xc3e>
    3d22:	fe 01       	movw	r30, r28
    3d24:	ef 59       	subi	r30, 0x9F	; 159
    3d26:	fe 4f       	sbci	r31, 0xFE	; 254
    3d28:	88 ec       	ldi	r24, 0xC8	; 200
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	91 83       	std	Z+1, r25	; 0x01
    3d2e:	80 83       	st	Z, r24
    3d30:	fe 01       	movw	r30, r28
    3d32:	ef 59       	subi	r30, 0x9F	; 159
    3d34:	fe 4f       	sbci	r31, 0xFE	; 254
    3d36:	80 81       	ld	r24, Z
    3d38:	91 81       	ldd	r25, Z+1	; 0x01
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <main+0xc18>
    3d3e:	fe 01       	movw	r30, r28
    3d40:	ef 59       	subi	r30, 0x9F	; 159
    3d42:	fe 4f       	sbci	r31, 0xFE	; 254
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d48:	de 01       	movw	r26, r28
    3d4a:	ad 59       	subi	r26, 0x9D	; 157
    3d4c:	be 4f       	sbci	r27, 0xFE	; 254
    3d4e:	fe 01       	movw	r30, r28
    3d50:	ed 59       	subi	r30, 0x9D	; 157
    3d52:	fe 4f       	sbci	r31, 0xFE	; 254
    3d54:	80 81       	ld	r24, Z
    3d56:	91 81       	ldd	r25, Z+1	; 0x01
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	11 96       	adiw	r26, 0x01	; 1
    3d5c:	9c 93       	st	X, r25
    3d5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d60:	fe 01       	movw	r30, r28
    3d62:	ed 59       	subi	r30, 0x9D	; 157
    3d64:	fe 4f       	sbci	r31, 0xFE	; 254
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	00 97       	sbiw	r24, 0x00	; 0
    3d6c:	d1 f6       	brne	.-76     	; 0x3d22 <main+0xc00>
    3d6e:	27 c0       	rjmp	.+78     	; 0x3dbe <main+0xc9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d70:	8e 01       	movw	r16, r28
    3d72:	0d 59       	subi	r16, 0x9D	; 157
    3d74:	1e 4f       	sbci	r17, 0xFE	; 254
    3d76:	fe 01       	movw	r30, r28
    3d78:	eb 59       	subi	r30, 0x9B	; 155
    3d7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d7c:	60 81       	ld	r22, Z
    3d7e:	71 81       	ldd	r23, Z+1	; 0x01
    3d80:	82 81       	ldd	r24, Z+2	; 0x02
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d88:	dc 01       	movw	r26, r24
    3d8a:	cb 01       	movw	r24, r22
    3d8c:	f8 01       	movw	r30, r16
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
    3d92:	de 01       	movw	r26, r28
    3d94:	a1 5a       	subi	r26, 0xA1	; 161
    3d96:	be 4f       	sbci	r27, 0xFE	; 254
    3d98:	fe 01       	movw	r30, r28
    3d9a:	ed 59       	subi	r30, 0x9D	; 157
    3d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	8d 93       	st	X+, r24
    3da4:	9c 93       	st	X, r25
    3da6:	fe 01       	movw	r30, r28
    3da8:	e1 5a       	subi	r30, 0xA1	; 161
    3daa:	fe 4f       	sbci	r31, 0xFE	; 254
    3dac:	80 81       	ld	r24, Z
    3dae:	91 81       	ldd	r25, Z+1	; 0x01
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	f1 f7       	brne	.-4      	; 0x3db0 <main+0xc8e>
    3db4:	fe 01       	movw	r30, r28
    3db6:	e1 5a       	subi	r30, 0xA1	; 161
    3db8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dba:	91 83       	std	Z+1, r25	; 0x01
    3dbc:	80 83       	st	Z, r24
			_delay_ms(500);
			do{
				S_first_digit=HKPD_U8GetPressedKey();
    3dbe:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    3dc2:	fe 01       	movw	r30, r28
    3dc4:	ea 53       	subi	r30, 0x3A	; 58
    3dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc8:	80 83       	st	Z, r24

			  } while (S_first_digit == NOTPRESSED);
    3dca:	fe 01       	movw	r30, r28
    3dcc:	ea 53       	subi	r30, 0x3A	; 58
    3dce:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd0:	80 81       	ld	r24, Z
    3dd2:	82 33       	cpi	r24, 0x32	; 50
    3dd4:	a1 f3       	breq	.-24     	; 0x3dbe <main+0xc9c>
				HLCD_vSendNumber(S_first_digit);
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ea 53       	subi	r30, 0x3A	; 58
    3dda:	fe 4f       	sbci	r31, 0xFE	; 254
    3ddc:	80 81       	ld	r24, Z
    3dde:	88 2f       	mov	r24, r24
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	a0 e0       	ldi	r26, 0x00	; 0
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
    3dee:	fe 01       	movw	r30, r28
    3df0:	e5 5a       	subi	r30, 0xA5	; 165
    3df2:	fe 4f       	sbci	r31, 0xFE	; 254
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	a6 e9       	ldi	r26, 0x96	; 150
    3dfa:	b3 e4       	ldi	r27, 0x43	; 67
    3dfc:	80 83       	st	Z, r24
    3dfe:	91 83       	std	Z+1, r25	; 0x01
    3e00:	a2 83       	std	Z+2, r26	; 0x02
    3e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e04:	8e 01       	movw	r16, r28
    3e06:	09 5a       	subi	r16, 0xA9	; 169
    3e08:	1e 4f       	sbci	r17, 0xFE	; 254
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e5 5a       	subi	r30, 0xA5	; 165
    3e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e10:	60 81       	ld	r22, Z
    3e12:	71 81       	ldd	r23, Z+1	; 0x01
    3e14:	82 81       	ldd	r24, Z+2	; 0x02
    3e16:	93 81       	ldd	r25, Z+3	; 0x03
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	4a ef       	ldi	r20, 0xFA	; 250
    3e1e:	54 e4       	ldi	r21, 0x44	; 68
    3e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	f8 01       	movw	r30, r16
    3e2a:	80 83       	st	Z, r24
    3e2c:	91 83       	std	Z+1, r25	; 0x01
    3e2e:	a2 83       	std	Z+2, r26	; 0x02
    3e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e32:	fe 01       	movw	r30, r28
    3e34:	e9 5a       	subi	r30, 0xA9	; 169
    3e36:	fe 4f       	sbci	r31, 0xFE	; 254
    3e38:	60 81       	ld	r22, Z
    3e3a:	71 81       	ldd	r23, Z+1	; 0x01
    3e3c:	82 81       	ldd	r24, Z+2	; 0x02
    3e3e:	93 81       	ldd	r25, Z+3	; 0x03
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	40 e8       	ldi	r20, 0x80	; 128
    3e46:	5f e3       	ldi	r21, 0x3F	; 63
    3e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e4c:	88 23       	and	r24, r24
    3e4e:	44 f4       	brge	.+16     	; 0x3e60 <main+0xd3e>
		__ticks = 1;
    3e50:	fe 01       	movw	r30, r28
    3e52:	eb 5a       	subi	r30, 0xAB	; 171
    3e54:	fe 4f       	sbci	r31, 0xFE	; 254
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	80 83       	st	Z, r24
    3e5e:	64 c0       	rjmp	.+200    	; 0x3f28 <main+0xe06>
	else if (__tmp > 65535)
    3e60:	fe 01       	movw	r30, r28
    3e62:	e9 5a       	subi	r30, 0xA9	; 169
    3e64:	fe 4f       	sbci	r31, 0xFE	; 254
    3e66:	60 81       	ld	r22, Z
    3e68:	71 81       	ldd	r23, Z+1	; 0x01
    3e6a:	82 81       	ldd	r24, Z+2	; 0x02
    3e6c:	93 81       	ldd	r25, Z+3	; 0x03
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	3f ef       	ldi	r19, 0xFF	; 255
    3e72:	4f e7       	ldi	r20, 0x7F	; 127
    3e74:	57 e4       	ldi	r21, 0x47	; 71
    3e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e7a:	18 16       	cp	r1, r24
    3e7c:	0c f0       	brlt	.+2      	; 0x3e80 <main+0xd5e>
    3e7e:	43 c0       	rjmp	.+134    	; 0x3f06 <main+0xde4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e80:	fe 01       	movw	r30, r28
    3e82:	e5 5a       	subi	r30, 0xA5	; 165
    3e84:	fe 4f       	sbci	r31, 0xFE	; 254
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	40 e2       	ldi	r20, 0x20	; 32
    3e94:	51 e4       	ldi	r21, 0x41	; 65
    3e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	8e 01       	movw	r16, r28
    3ea0:	0b 5a       	subi	r16, 0xAB	; 171
    3ea2:	1e 4f       	sbci	r17, 0xFE	; 254
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	cd 01       	movw	r24, r26
    3ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	f8 01       	movw	r30, r16
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	80 83       	st	Z, r24
    3eb6:	1f c0       	rjmp	.+62     	; 0x3ef6 <main+0xdd4>
    3eb8:	fe 01       	movw	r30, r28
    3eba:	ed 5a       	subi	r30, 0xAD	; 173
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	88 ec       	ldi	r24, 0xC8	; 200
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	91 83       	std	Z+1, r25	; 0x01
    3ec4:	80 83       	st	Z, r24
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	ed 5a       	subi	r30, 0xAD	; 173
    3eca:	fe 4f       	sbci	r31, 0xFE	; 254
    3ecc:	80 81       	ld	r24, Z
    3ece:	91 81       	ldd	r25, Z+1	; 0x01
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <main+0xdae>
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ed 5a       	subi	r30, 0xAD	; 173
    3ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ede:	de 01       	movw	r26, r28
    3ee0:	ab 5a       	subi	r26, 0xAB	; 171
    3ee2:	be 4f       	sbci	r27, 0xFE	; 254
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	eb 5a       	subi	r30, 0xAB	; 171
    3ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eea:	80 81       	ld	r24, Z
    3eec:	91 81       	ldd	r25, Z+1	; 0x01
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	11 96       	adiw	r26, 0x01	; 1
    3ef2:	9c 93       	st	X, r25
    3ef4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	eb 5a       	subi	r30, 0xAB	; 171
    3efa:	fe 4f       	sbci	r31, 0xFE	; 254
    3efc:	80 81       	ld	r24, Z
    3efe:	91 81       	ldd	r25, Z+1	; 0x01
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	d1 f6       	brne	.-76     	; 0x3eb8 <main+0xd96>
    3f04:	27 c0       	rjmp	.+78     	; 0x3f54 <main+0xe32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f06:	8e 01       	movw	r16, r28
    3f08:	0b 5a       	subi	r16, 0xAB	; 171
    3f0a:	1e 4f       	sbci	r17, 0xFE	; 254
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	e9 5a       	subi	r30, 0xA9	; 169
    3f10:	fe 4f       	sbci	r31, 0xFE	; 254
    3f12:	60 81       	ld	r22, Z
    3f14:	71 81       	ldd	r23, Z+1	; 0x01
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	93 81       	ldd	r25, Z+3	; 0x03
    3f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	f8 01       	movw	r30, r16
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
    3f28:	de 01       	movw	r26, r28
    3f2a:	af 5a       	subi	r26, 0xAF	; 175
    3f2c:	be 4f       	sbci	r27, 0xFE	; 254
    3f2e:	fe 01       	movw	r30, r28
    3f30:	eb 5a       	subi	r30, 0xAB	; 171
    3f32:	fe 4f       	sbci	r31, 0xFE	; 254
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	8d 93       	st	X+, r24
    3f3a:	9c 93       	st	X, r25
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	ef 5a       	subi	r30, 0xAF	; 175
    3f40:	fe 4f       	sbci	r31, 0xFE	; 254
    3f42:	80 81       	ld	r24, Z
    3f44:	91 81       	ldd	r25, Z+1	; 0x01
    3f46:	01 97       	sbiw	r24, 0x01	; 1
    3f48:	f1 f7       	brne	.-4      	; 0x3f46 <main+0xe24>
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	ef 5a       	subi	r30, 0xAF	; 175
    3f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	80 83       	st	Z, r24
				_delay_ms(300);
			do{
				S_second_digit=HKPD_U8GetPressedKey();
    3f54:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    3f58:	fe 01       	movw	r30, r28
    3f5a:	eb 53       	subi	r30, 0x3B	; 59
    3f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3f5e:	80 83       	st	Z, r24
			  } while (S_second_digit == NOTPRESSED);
    3f60:	fe 01       	movw	r30, r28
    3f62:	eb 53       	subi	r30, 0x3B	; 59
    3f64:	fe 4f       	sbci	r31, 0xFE	; 254
    3f66:	80 81       	ld	r24, Z
    3f68:	82 33       	cpi	r24, 0x32	; 50
    3f6a:	a1 f3       	breq	.-24     	; 0x3f54 <main+0xe32>
				HLCD_vSendNumber(S_second_digit);
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	eb 53       	subi	r30, 0x3B	; 59
    3f70:	fe 4f       	sbci	r31, 0xFE	; 254
    3f72:	80 81       	ld	r24, Z
    3f74:	88 2f       	mov	r24, r24
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	a0 e0       	ldi	r26, 0x00	; 0
    3f7a:	b0 e0       	ldi	r27, 0x00	; 0
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	cd 01       	movw	r24, r26
    3f80:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
				seconds_counter=combine(S_first_digit,S_second_digit);
    3f84:	fe 01       	movw	r30, r28
    3f86:	ea 53       	subi	r30, 0x3A	; 58
    3f88:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8a:	80 81       	ld	r24, Z
    3f8c:	48 2f       	mov	r20, r24
    3f8e:	50 e0       	ldi	r21, 0x00	; 0
    3f90:	fe 01       	movw	r30, r28
    3f92:	eb 53       	subi	r30, 0x3B	; 59
    3f94:	fe 4f       	sbci	r31, 0xFE	; 254
    3f96:	80 81       	ld	r24, Z
    3f98:	28 2f       	mov	r18, r24
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	ca 01       	movw	r24, r20
    3f9e:	b9 01       	movw	r22, r18
    3fa0:	0e 94 15 18 	call	0x302a	; 0x302a <combine>
    3fa4:	80 93 f1 00 	sts	0x00F1, r24
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e3 5b       	subi	r30, 0xB3	; 179
    3fac:	fe 4f       	sbci	r31, 0xFE	; 254
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	a6 e9       	ldi	r26, 0x96	; 150
    3fb4:	b3 e4       	ldi	r27, 0x43	; 67
    3fb6:	80 83       	st	Z, r24
    3fb8:	91 83       	std	Z+1, r25	; 0x01
    3fba:	a2 83       	std	Z+2, r26	; 0x02
    3fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fbe:	8e 01       	movw	r16, r28
    3fc0:	07 5b       	subi	r16, 0xB7	; 183
    3fc2:	1e 4f       	sbci	r17, 0xFE	; 254
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	e3 5b       	subi	r30, 0xB3	; 179
    3fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fca:	60 81       	ld	r22, Z
    3fcc:	71 81       	ldd	r23, Z+1	; 0x01
    3fce:	82 81       	ldd	r24, Z+2	; 0x02
    3fd0:	93 81       	ldd	r25, Z+3	; 0x03
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	4a ef       	ldi	r20, 0xFA	; 250
    3fd8:	54 e4       	ldi	r21, 0x44	; 68
    3fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	f8 01       	movw	r30, r16
    3fe4:	80 83       	st	Z, r24
    3fe6:	91 83       	std	Z+1, r25	; 0x01
    3fe8:	a2 83       	std	Z+2, r26	; 0x02
    3fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fec:	fe 01       	movw	r30, r28
    3fee:	e7 5b       	subi	r30, 0xB7	; 183
    3ff0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff2:	60 81       	ld	r22, Z
    3ff4:	71 81       	ldd	r23, Z+1	; 0x01
    3ff6:	82 81       	ldd	r24, Z+2	; 0x02
    3ff8:	93 81       	ldd	r25, Z+3	; 0x03
    3ffa:	20 e0       	ldi	r18, 0x00	; 0
    3ffc:	30 e0       	ldi	r19, 0x00	; 0
    3ffe:	40 e8       	ldi	r20, 0x80	; 128
    4000:	5f e3       	ldi	r21, 0x3F	; 63
    4002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4006:	88 23       	and	r24, r24
    4008:	44 f4       	brge	.+16     	; 0x401a <main+0xef8>
		__ticks = 1;
    400a:	fe 01       	movw	r30, r28
    400c:	e9 5b       	subi	r30, 0xB9	; 185
    400e:	fe 4f       	sbci	r31, 0xFE	; 254
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	80 83       	st	Z, r24
    4018:	64 c0       	rjmp	.+200    	; 0x40e2 <main+0xfc0>
	else if (__tmp > 65535)
    401a:	fe 01       	movw	r30, r28
    401c:	e7 5b       	subi	r30, 0xB7	; 183
    401e:	fe 4f       	sbci	r31, 0xFE	; 254
    4020:	60 81       	ld	r22, Z
    4022:	71 81       	ldd	r23, Z+1	; 0x01
    4024:	82 81       	ldd	r24, Z+2	; 0x02
    4026:	93 81       	ldd	r25, Z+3	; 0x03
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	3f ef       	ldi	r19, 0xFF	; 255
    402c:	4f e7       	ldi	r20, 0x7F	; 127
    402e:	57 e4       	ldi	r21, 0x47	; 71
    4030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4034:	18 16       	cp	r1, r24
    4036:	0c f0       	brlt	.+2      	; 0x403a <main+0xf18>
    4038:	43 c0       	rjmp	.+134    	; 0x40c0 <main+0xf9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    403a:	fe 01       	movw	r30, r28
    403c:	e3 5b       	subi	r30, 0xB3	; 179
    403e:	fe 4f       	sbci	r31, 0xFE	; 254
    4040:	60 81       	ld	r22, Z
    4042:	71 81       	ldd	r23, Z+1	; 0x01
    4044:	82 81       	ldd	r24, Z+2	; 0x02
    4046:	93 81       	ldd	r25, Z+3	; 0x03
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	30 e0       	ldi	r19, 0x00	; 0
    404c:	40 e2       	ldi	r20, 0x20	; 32
    404e:	51 e4       	ldi	r21, 0x41	; 65
    4050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	8e 01       	movw	r16, r28
    405a:	09 5b       	subi	r16, 0xB9	; 185
    405c:	1e 4f       	sbci	r17, 0xFE	; 254
    405e:	bc 01       	movw	r22, r24
    4060:	cd 01       	movw	r24, r26
    4062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4066:	dc 01       	movw	r26, r24
    4068:	cb 01       	movw	r24, r22
    406a:	f8 01       	movw	r30, r16
    406c:	91 83       	std	Z+1, r25	; 0x01
    406e:	80 83       	st	Z, r24
    4070:	1f c0       	rjmp	.+62     	; 0x40b0 <main+0xf8e>
    4072:	fe 01       	movw	r30, r28
    4074:	eb 5b       	subi	r30, 0xBB	; 187
    4076:	fe 4f       	sbci	r31, 0xFE	; 254
    4078:	88 ec       	ldi	r24, 0xC8	; 200
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	91 83       	std	Z+1, r25	; 0x01
    407e:	80 83       	st	Z, r24
    4080:	fe 01       	movw	r30, r28
    4082:	eb 5b       	subi	r30, 0xBB	; 187
    4084:	fe 4f       	sbci	r31, 0xFE	; 254
    4086:	80 81       	ld	r24, Z
    4088:	91 81       	ldd	r25, Z+1	; 0x01
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <main+0xf68>
    408e:	fe 01       	movw	r30, r28
    4090:	eb 5b       	subi	r30, 0xBB	; 187
    4092:	fe 4f       	sbci	r31, 0xFE	; 254
    4094:	91 83       	std	Z+1, r25	; 0x01
    4096:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4098:	de 01       	movw	r26, r28
    409a:	a9 5b       	subi	r26, 0xB9	; 185
    409c:	be 4f       	sbci	r27, 0xFE	; 254
    409e:	fe 01       	movw	r30, r28
    40a0:	e9 5b       	subi	r30, 0xB9	; 185
    40a2:	fe 4f       	sbci	r31, 0xFE	; 254
    40a4:	80 81       	ld	r24, Z
    40a6:	91 81       	ldd	r25, Z+1	; 0x01
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	11 96       	adiw	r26, 0x01	; 1
    40ac:	9c 93       	st	X, r25
    40ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b0:	fe 01       	movw	r30, r28
    40b2:	e9 5b       	subi	r30, 0xB9	; 185
    40b4:	fe 4f       	sbci	r31, 0xFE	; 254
    40b6:	80 81       	ld	r24, Z
    40b8:	91 81       	ldd	r25, Z+1	; 0x01
    40ba:	00 97       	sbiw	r24, 0x00	; 0
    40bc:	d1 f6       	brne	.-76     	; 0x4072 <main+0xf50>
    40be:	27 c0       	rjmp	.+78     	; 0x410e <main+0xfec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40c0:	8e 01       	movw	r16, r28
    40c2:	09 5b       	subi	r16, 0xB9	; 185
    40c4:	1e 4f       	sbci	r17, 0xFE	; 254
    40c6:	fe 01       	movw	r30, r28
    40c8:	e7 5b       	subi	r30, 0xB7	; 183
    40ca:	fe 4f       	sbci	r31, 0xFE	; 254
    40cc:	60 81       	ld	r22, Z
    40ce:	71 81       	ldd	r23, Z+1	; 0x01
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	93 81       	ldd	r25, Z+3	; 0x03
    40d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	f8 01       	movw	r30, r16
    40de:	91 83       	std	Z+1, r25	; 0x01
    40e0:	80 83       	st	Z, r24
    40e2:	de 01       	movw	r26, r28
    40e4:	ad 5b       	subi	r26, 0xBD	; 189
    40e6:	be 4f       	sbci	r27, 0xFE	; 254
    40e8:	fe 01       	movw	r30, r28
    40ea:	e9 5b       	subi	r30, 0xB9	; 185
    40ec:	fe 4f       	sbci	r31, 0xFE	; 254
    40ee:	80 81       	ld	r24, Z
    40f0:	91 81       	ldd	r25, Z+1	; 0x01
    40f2:	8d 93       	st	X+, r24
    40f4:	9c 93       	st	X, r25
    40f6:	fe 01       	movw	r30, r28
    40f8:	ed 5b       	subi	r30, 0xBD	; 189
    40fa:	fe 4f       	sbci	r31, 0xFE	; 254
    40fc:	80 81       	ld	r24, Z
    40fe:	91 81       	ldd	r25, Z+1	; 0x01
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <main+0xfde>
    4104:	fe 01       	movw	r30, r28
    4106:	ed 5b       	subi	r30, 0xBD	; 189
    4108:	fe 4f       	sbci	r31, 0xFE	; 254
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	80 83       	st	Z, r24
				_delay_ms(300);
				HLCD_vDisplayClear();
    410e:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
				HLCD_vSendString("1: Set Clock");
    4112:	80 e6       	ldi	r24, 0x60	; 96
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
				HLCD_vMoveTo(1,0);
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
				HLCD_vSendString("2: Set Alarm");
    4122:	8d e6       	ldi	r24, 0x6D	; 109
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
				MUSART_vTransmitData(99);
    412a:	83 e6       	ldi	r24, 0x63	; 99
    412c:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    4130:	fe 01       	movw	r30, r28
    4132:	e1 5c       	subi	r30, 0xC1	; 193
    4134:	fe 4f       	sbci	r31, 0xFE	; 254
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	af e2       	ldi	r26, 0x2F	; 47
    413c:	b4 e4       	ldi	r27, 0x44	; 68
    413e:	80 83       	st	Z, r24
    4140:	91 83       	std	Z+1, r25	; 0x01
    4142:	a2 83       	std	Z+2, r26	; 0x02
    4144:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4146:	8e 01       	movw	r16, r28
    4148:	05 5c       	subi	r16, 0xC5	; 197
    414a:	1e 4f       	sbci	r17, 0xFE	; 254
    414c:	fe 01       	movw	r30, r28
    414e:	e1 5c       	subi	r30, 0xC1	; 193
    4150:	fe 4f       	sbci	r31, 0xFE	; 254
    4152:	60 81       	ld	r22, Z
    4154:	71 81       	ldd	r23, Z+1	; 0x01
    4156:	82 81       	ldd	r24, Z+2	; 0x02
    4158:	93 81       	ldd	r25, Z+3	; 0x03
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	4a ef       	ldi	r20, 0xFA	; 250
    4160:	54 e4       	ldi	r21, 0x44	; 68
    4162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	f8 01       	movw	r30, r16
    416c:	80 83       	st	Z, r24
    416e:	91 83       	std	Z+1, r25	; 0x01
    4170:	a2 83       	std	Z+2, r26	; 0x02
    4172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4174:	fe 01       	movw	r30, r28
    4176:	e5 5c       	subi	r30, 0xC5	; 197
    4178:	fe 4f       	sbci	r31, 0xFE	; 254
    417a:	60 81       	ld	r22, Z
    417c:	71 81       	ldd	r23, Z+1	; 0x01
    417e:	82 81       	ldd	r24, Z+2	; 0x02
    4180:	93 81       	ldd	r25, Z+3	; 0x03
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e8       	ldi	r20, 0x80	; 128
    4188:	5f e3       	ldi	r21, 0x3F	; 63
    418a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    418e:	88 23       	and	r24, r24
    4190:	44 f4       	brge	.+16     	; 0x41a2 <main+0x1080>
		__ticks = 1;
    4192:	fe 01       	movw	r30, r28
    4194:	e7 5c       	subi	r30, 0xC7	; 199
    4196:	fe 4f       	sbci	r31, 0xFE	; 254
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	91 83       	std	Z+1, r25	; 0x01
    419e:	80 83       	st	Z, r24
    41a0:	64 c0       	rjmp	.+200    	; 0x426a <main+0x1148>
	else if (__tmp > 65535)
    41a2:	fe 01       	movw	r30, r28
    41a4:	e5 5c       	subi	r30, 0xC5	; 197
    41a6:	fe 4f       	sbci	r31, 0xFE	; 254
    41a8:	60 81       	ld	r22, Z
    41aa:	71 81       	ldd	r23, Z+1	; 0x01
    41ac:	82 81       	ldd	r24, Z+2	; 0x02
    41ae:	93 81       	ldd	r25, Z+3	; 0x03
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	3f ef       	ldi	r19, 0xFF	; 255
    41b4:	4f e7       	ldi	r20, 0x7F	; 127
    41b6:	57 e4       	ldi	r21, 0x47	; 71
    41b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41bc:	18 16       	cp	r1, r24
    41be:	0c f0       	brlt	.+2      	; 0x41c2 <main+0x10a0>
    41c0:	43 c0       	rjmp	.+134    	; 0x4248 <main+0x1126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c2:	fe 01       	movw	r30, r28
    41c4:	e1 5c       	subi	r30, 0xC1	; 193
    41c6:	fe 4f       	sbci	r31, 0xFE	; 254
    41c8:	60 81       	ld	r22, Z
    41ca:	71 81       	ldd	r23, Z+1	; 0x01
    41cc:	82 81       	ldd	r24, Z+2	; 0x02
    41ce:	93 81       	ldd	r25, Z+3	; 0x03
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	40 e2       	ldi	r20, 0x20	; 32
    41d6:	51 e4       	ldi	r21, 0x41	; 65
    41d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	8e 01       	movw	r16, r28
    41e2:	07 5c       	subi	r16, 0xC7	; 199
    41e4:	1e 4f       	sbci	r17, 0xFE	; 254
    41e6:	bc 01       	movw	r22, r24
    41e8:	cd 01       	movw	r24, r26
    41ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	f8 01       	movw	r30, r16
    41f4:	91 83       	std	Z+1, r25	; 0x01
    41f6:	80 83       	st	Z, r24
    41f8:	1f c0       	rjmp	.+62     	; 0x4238 <main+0x1116>
    41fa:	fe 01       	movw	r30, r28
    41fc:	e9 5c       	subi	r30, 0xC9	; 201
    41fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4200:	88 ec       	ldi	r24, 0xC8	; 200
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	91 83       	std	Z+1, r25	; 0x01
    4206:	80 83       	st	Z, r24
    4208:	fe 01       	movw	r30, r28
    420a:	e9 5c       	subi	r30, 0xC9	; 201
    420c:	fe 4f       	sbci	r31, 0xFE	; 254
    420e:	80 81       	ld	r24, Z
    4210:	91 81       	ldd	r25, Z+1	; 0x01
    4212:	01 97       	sbiw	r24, 0x01	; 1
    4214:	f1 f7       	brne	.-4      	; 0x4212 <main+0x10f0>
    4216:	fe 01       	movw	r30, r28
    4218:	e9 5c       	subi	r30, 0xC9	; 201
    421a:	fe 4f       	sbci	r31, 0xFE	; 254
    421c:	91 83       	std	Z+1, r25	; 0x01
    421e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4220:	de 01       	movw	r26, r28
    4222:	a7 5c       	subi	r26, 0xC7	; 199
    4224:	be 4f       	sbci	r27, 0xFE	; 254
    4226:	fe 01       	movw	r30, r28
    4228:	e7 5c       	subi	r30, 0xC7	; 199
    422a:	fe 4f       	sbci	r31, 0xFE	; 254
    422c:	80 81       	ld	r24, Z
    422e:	91 81       	ldd	r25, Z+1	; 0x01
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	11 96       	adiw	r26, 0x01	; 1
    4234:	9c 93       	st	X, r25
    4236:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4238:	fe 01       	movw	r30, r28
    423a:	e7 5c       	subi	r30, 0xC7	; 199
    423c:	fe 4f       	sbci	r31, 0xFE	; 254
    423e:	80 81       	ld	r24, Z
    4240:	91 81       	ldd	r25, Z+1	; 0x01
    4242:	00 97       	sbiw	r24, 0x00	; 0
    4244:	d1 f6       	brne	.-76     	; 0x41fa <main+0x10d8>
    4246:	27 c0       	rjmp	.+78     	; 0x4296 <main+0x1174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4248:	8e 01       	movw	r16, r28
    424a:	07 5c       	subi	r16, 0xC7	; 199
    424c:	1e 4f       	sbci	r17, 0xFE	; 254
    424e:	fe 01       	movw	r30, r28
    4250:	e5 5c       	subi	r30, 0xC5	; 197
    4252:	fe 4f       	sbci	r31, 0xFE	; 254
    4254:	60 81       	ld	r22, Z
    4256:	71 81       	ldd	r23, Z+1	; 0x01
    4258:	82 81       	ldd	r24, Z+2	; 0x02
    425a:	93 81       	ldd	r25, Z+3	; 0x03
    425c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	f8 01       	movw	r30, r16
    4266:	91 83       	std	Z+1, r25	; 0x01
    4268:	80 83       	st	Z, r24
    426a:	de 01       	movw	r26, r28
    426c:	ab 5c       	subi	r26, 0xCB	; 203
    426e:	be 4f       	sbci	r27, 0xFE	; 254
    4270:	fe 01       	movw	r30, r28
    4272:	e7 5c       	subi	r30, 0xC7	; 199
    4274:	fe 4f       	sbci	r31, 0xFE	; 254
    4276:	80 81       	ld	r24, Z
    4278:	91 81       	ldd	r25, Z+1	; 0x01
    427a:	8d 93       	st	X+, r24
    427c:	9c 93       	st	X, r25
    427e:	fe 01       	movw	r30, r28
    4280:	eb 5c       	subi	r30, 0xCB	; 203
    4282:	fe 4f       	sbci	r31, 0xFE	; 254
    4284:	80 81       	ld	r24, Z
    4286:	91 81       	ldd	r25, Z+1	; 0x01
    4288:	01 97       	sbiw	r24, 0x01	; 1
    428a:	f1 f7       	brne	.-4      	; 0x4288 <main+0x1166>
    428c:	fe 01       	movw	r30, r28
    428e:	eb 5c       	subi	r30, 0xCB	; 203
    4290:	fe 4f       	sbci	r31, 0xFE	; 254
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
				_delay_ms(700);
				MUSART_vTransmitData(hours_counter);
    4296:	80 91 f3 00 	lds	r24, 0x00F3
    429a:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    429e:	fe 01       	movw	r30, r28
    42a0:	ef 5c       	subi	r30, 0xCF	; 207
    42a2:	fe 4f       	sbci	r31, 0xFE	; 254
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	af e2       	ldi	r26, 0x2F	; 47
    42aa:	b4 e4       	ldi	r27, 0x44	; 68
    42ac:	80 83       	st	Z, r24
    42ae:	91 83       	std	Z+1, r25	; 0x01
    42b0:	a2 83       	std	Z+2, r26	; 0x02
    42b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42b4:	8e 01       	movw	r16, r28
    42b6:	03 5d       	subi	r16, 0xD3	; 211
    42b8:	1e 4f       	sbci	r17, 0xFE	; 254
    42ba:	fe 01       	movw	r30, r28
    42bc:	ef 5c       	subi	r30, 0xCF	; 207
    42be:	fe 4f       	sbci	r31, 0xFE	; 254
    42c0:	60 81       	ld	r22, Z
    42c2:	71 81       	ldd	r23, Z+1	; 0x01
    42c4:	82 81       	ldd	r24, Z+2	; 0x02
    42c6:	93 81       	ldd	r25, Z+3	; 0x03
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	4a ef       	ldi	r20, 0xFA	; 250
    42ce:	54 e4       	ldi	r21, 0x44	; 68
    42d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	f8 01       	movw	r30, r16
    42da:	80 83       	st	Z, r24
    42dc:	91 83       	std	Z+1, r25	; 0x01
    42de:	a2 83       	std	Z+2, r26	; 0x02
    42e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42e2:	fe 01       	movw	r30, r28
    42e4:	e3 5d       	subi	r30, 0xD3	; 211
    42e6:	fe 4f       	sbci	r31, 0xFE	; 254
    42e8:	60 81       	ld	r22, Z
    42ea:	71 81       	ldd	r23, Z+1	; 0x01
    42ec:	82 81       	ldd	r24, Z+2	; 0x02
    42ee:	93 81       	ldd	r25, Z+3	; 0x03
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	40 e8       	ldi	r20, 0x80	; 128
    42f6:	5f e3       	ldi	r21, 0x3F	; 63
    42f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42fc:	88 23       	and	r24, r24
    42fe:	44 f4       	brge	.+16     	; 0x4310 <main+0x11ee>
		__ticks = 1;
    4300:	fe 01       	movw	r30, r28
    4302:	e5 5d       	subi	r30, 0xD5	; 213
    4304:	fe 4f       	sbci	r31, 0xFE	; 254
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	91 83       	std	Z+1, r25	; 0x01
    430c:	80 83       	st	Z, r24
    430e:	64 c0       	rjmp	.+200    	; 0x43d8 <main+0x12b6>
	else if (__tmp > 65535)
    4310:	fe 01       	movw	r30, r28
    4312:	e3 5d       	subi	r30, 0xD3	; 211
    4314:	fe 4f       	sbci	r31, 0xFE	; 254
    4316:	60 81       	ld	r22, Z
    4318:	71 81       	ldd	r23, Z+1	; 0x01
    431a:	82 81       	ldd	r24, Z+2	; 0x02
    431c:	93 81       	ldd	r25, Z+3	; 0x03
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    432a:	18 16       	cp	r1, r24
    432c:	0c f0       	brlt	.+2      	; 0x4330 <main+0x120e>
    432e:	43 c0       	rjmp	.+134    	; 0x43b6 <main+0x1294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4330:	fe 01       	movw	r30, r28
    4332:	ef 5c       	subi	r30, 0xCF	; 207
    4334:	fe 4f       	sbci	r31, 0xFE	; 254
    4336:	60 81       	ld	r22, Z
    4338:	71 81       	ldd	r23, Z+1	; 0x01
    433a:	82 81       	ldd	r24, Z+2	; 0x02
    433c:	93 81       	ldd	r25, Z+3	; 0x03
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e2       	ldi	r20, 0x20	; 32
    4344:	51 e4       	ldi	r21, 0x41	; 65
    4346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	8e 01       	movw	r16, r28
    4350:	05 5d       	subi	r16, 0xD5	; 213
    4352:	1e 4f       	sbci	r17, 0xFE	; 254
    4354:	bc 01       	movw	r22, r24
    4356:	cd 01       	movw	r24, r26
    4358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	f8 01       	movw	r30, r16
    4362:	91 83       	std	Z+1, r25	; 0x01
    4364:	80 83       	st	Z, r24
    4366:	1f c0       	rjmp	.+62     	; 0x43a6 <main+0x1284>
    4368:	fe 01       	movw	r30, r28
    436a:	e7 5d       	subi	r30, 0xD7	; 215
    436c:	fe 4f       	sbci	r31, 0xFE	; 254
    436e:	88 ec       	ldi	r24, 0xC8	; 200
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	91 83       	std	Z+1, r25	; 0x01
    4374:	80 83       	st	Z, r24
    4376:	fe 01       	movw	r30, r28
    4378:	e7 5d       	subi	r30, 0xD7	; 215
    437a:	fe 4f       	sbci	r31, 0xFE	; 254
    437c:	80 81       	ld	r24, Z
    437e:	91 81       	ldd	r25, Z+1	; 0x01
    4380:	01 97       	sbiw	r24, 0x01	; 1
    4382:	f1 f7       	brne	.-4      	; 0x4380 <main+0x125e>
    4384:	fe 01       	movw	r30, r28
    4386:	e7 5d       	subi	r30, 0xD7	; 215
    4388:	fe 4f       	sbci	r31, 0xFE	; 254
    438a:	91 83       	std	Z+1, r25	; 0x01
    438c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438e:	de 01       	movw	r26, r28
    4390:	a5 5d       	subi	r26, 0xD5	; 213
    4392:	be 4f       	sbci	r27, 0xFE	; 254
    4394:	fe 01       	movw	r30, r28
    4396:	e5 5d       	subi	r30, 0xD5	; 213
    4398:	fe 4f       	sbci	r31, 0xFE	; 254
    439a:	80 81       	ld	r24, Z
    439c:	91 81       	ldd	r25, Z+1	; 0x01
    439e:	01 97       	sbiw	r24, 0x01	; 1
    43a0:	11 96       	adiw	r26, 0x01	; 1
    43a2:	9c 93       	st	X, r25
    43a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a6:	fe 01       	movw	r30, r28
    43a8:	e5 5d       	subi	r30, 0xD5	; 213
    43aa:	fe 4f       	sbci	r31, 0xFE	; 254
    43ac:	80 81       	ld	r24, Z
    43ae:	91 81       	ldd	r25, Z+1	; 0x01
    43b0:	00 97       	sbiw	r24, 0x00	; 0
    43b2:	d1 f6       	brne	.-76     	; 0x4368 <main+0x1246>
    43b4:	27 c0       	rjmp	.+78     	; 0x4404 <main+0x12e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b6:	8e 01       	movw	r16, r28
    43b8:	05 5d       	subi	r16, 0xD5	; 213
    43ba:	1e 4f       	sbci	r17, 0xFE	; 254
    43bc:	fe 01       	movw	r30, r28
    43be:	e3 5d       	subi	r30, 0xD3	; 211
    43c0:	fe 4f       	sbci	r31, 0xFE	; 254
    43c2:	60 81       	ld	r22, Z
    43c4:	71 81       	ldd	r23, Z+1	; 0x01
    43c6:	82 81       	ldd	r24, Z+2	; 0x02
    43c8:	93 81       	ldd	r25, Z+3	; 0x03
    43ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ce:	dc 01       	movw	r26, r24
    43d0:	cb 01       	movw	r24, r22
    43d2:	f8 01       	movw	r30, r16
    43d4:	91 83       	std	Z+1, r25	; 0x01
    43d6:	80 83       	st	Z, r24
    43d8:	de 01       	movw	r26, r28
    43da:	a9 5d       	subi	r26, 0xD9	; 217
    43dc:	be 4f       	sbci	r27, 0xFE	; 254
    43de:	fe 01       	movw	r30, r28
    43e0:	e5 5d       	subi	r30, 0xD5	; 213
    43e2:	fe 4f       	sbci	r31, 0xFE	; 254
    43e4:	80 81       	ld	r24, Z
    43e6:	91 81       	ldd	r25, Z+1	; 0x01
    43e8:	8d 93       	st	X+, r24
    43ea:	9c 93       	st	X, r25
    43ec:	fe 01       	movw	r30, r28
    43ee:	e9 5d       	subi	r30, 0xD9	; 217
    43f0:	fe 4f       	sbci	r31, 0xFE	; 254
    43f2:	80 81       	ld	r24, Z
    43f4:	91 81       	ldd	r25, Z+1	; 0x01
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	f1 f7       	brne	.-4      	; 0x43f6 <main+0x12d4>
    43fa:	fe 01       	movw	r30, r28
    43fc:	e9 5d       	subi	r30, 0xD9	; 217
    43fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4400:	91 83       	std	Z+1, r25	; 0x01
    4402:	80 83       	st	Z, r24
				_delay_ms(700);
				MUSART_vTransmitData(minutes_counter);
    4404:	80 91 f2 00 	lds	r24, 0x00F2
    4408:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    440c:	fe 01       	movw	r30, r28
    440e:	ed 5d       	subi	r30, 0xDD	; 221
    4410:	fe 4f       	sbci	r31, 0xFE	; 254
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	af e2       	ldi	r26, 0x2F	; 47
    4418:	b4 e4       	ldi	r27, 0x44	; 68
    441a:	80 83       	st	Z, r24
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	a2 83       	std	Z+2, r26	; 0x02
    4420:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4422:	8e 01       	movw	r16, r28
    4424:	01 5e       	subi	r16, 0xE1	; 225
    4426:	1e 4f       	sbci	r17, 0xFE	; 254
    4428:	fe 01       	movw	r30, r28
    442a:	ed 5d       	subi	r30, 0xDD	; 221
    442c:	fe 4f       	sbci	r31, 0xFE	; 254
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	4a ef       	ldi	r20, 0xFA	; 250
    443c:	54 e4       	ldi	r21, 0x44	; 68
    443e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	f8 01       	movw	r30, r16
    4448:	80 83       	st	Z, r24
    444a:	91 83       	std	Z+1, r25	; 0x01
    444c:	a2 83       	std	Z+2, r26	; 0x02
    444e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4450:	fe 01       	movw	r30, r28
    4452:	e1 5e       	subi	r30, 0xE1	; 225
    4454:	fe 4f       	sbci	r31, 0xFE	; 254
    4456:	60 81       	ld	r22, Z
    4458:	71 81       	ldd	r23, Z+1	; 0x01
    445a:	82 81       	ldd	r24, Z+2	; 0x02
    445c:	93 81       	ldd	r25, Z+3	; 0x03
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e8       	ldi	r20, 0x80	; 128
    4464:	5f e3       	ldi	r21, 0x3F	; 63
    4466:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    446a:	88 23       	and	r24, r24
    446c:	44 f4       	brge	.+16     	; 0x447e <main+0x135c>
		__ticks = 1;
    446e:	fe 01       	movw	r30, r28
    4470:	e3 5e       	subi	r30, 0xE3	; 227
    4472:	fe 4f       	sbci	r31, 0xFE	; 254
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	91 83       	std	Z+1, r25	; 0x01
    447a:	80 83       	st	Z, r24
    447c:	64 c0       	rjmp	.+200    	; 0x4546 <main+0x1424>
	else if (__tmp > 65535)
    447e:	fe 01       	movw	r30, r28
    4480:	e1 5e       	subi	r30, 0xE1	; 225
    4482:	fe 4f       	sbci	r31, 0xFE	; 254
    4484:	60 81       	ld	r22, Z
    4486:	71 81       	ldd	r23, Z+1	; 0x01
    4488:	82 81       	ldd	r24, Z+2	; 0x02
    448a:	93 81       	ldd	r25, Z+3	; 0x03
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	3f ef       	ldi	r19, 0xFF	; 255
    4490:	4f e7       	ldi	r20, 0x7F	; 127
    4492:	57 e4       	ldi	r21, 0x47	; 71
    4494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4498:	18 16       	cp	r1, r24
    449a:	0c f0       	brlt	.+2      	; 0x449e <main+0x137c>
    449c:	43 c0       	rjmp	.+134    	; 0x4524 <main+0x1402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449e:	fe 01       	movw	r30, r28
    44a0:	ed 5d       	subi	r30, 0xDD	; 221
    44a2:	fe 4f       	sbci	r31, 0xFE	; 254
    44a4:	60 81       	ld	r22, Z
    44a6:	71 81       	ldd	r23, Z+1	; 0x01
    44a8:	82 81       	ldd	r24, Z+2	; 0x02
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	40 e2       	ldi	r20, 0x20	; 32
    44b2:	51 e4       	ldi	r21, 0x41	; 65
    44b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44b8:	dc 01       	movw	r26, r24
    44ba:	cb 01       	movw	r24, r22
    44bc:	8e 01       	movw	r16, r28
    44be:	03 5e       	subi	r16, 0xE3	; 227
    44c0:	1e 4f       	sbci	r17, 0xFE	; 254
    44c2:	bc 01       	movw	r22, r24
    44c4:	cd 01       	movw	r24, r26
    44c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	f8 01       	movw	r30, r16
    44d0:	91 83       	std	Z+1, r25	; 0x01
    44d2:	80 83       	st	Z, r24
    44d4:	1f c0       	rjmp	.+62     	; 0x4514 <main+0x13f2>
    44d6:	fe 01       	movw	r30, r28
    44d8:	e5 5e       	subi	r30, 0xE5	; 229
    44da:	fe 4f       	sbci	r31, 0xFE	; 254
    44dc:	88 ec       	ldi	r24, 0xC8	; 200
    44de:	90 e0       	ldi	r25, 0x00	; 0
    44e0:	91 83       	std	Z+1, r25	; 0x01
    44e2:	80 83       	st	Z, r24
    44e4:	fe 01       	movw	r30, r28
    44e6:	e5 5e       	subi	r30, 0xE5	; 229
    44e8:	fe 4f       	sbci	r31, 0xFE	; 254
    44ea:	80 81       	ld	r24, Z
    44ec:	91 81       	ldd	r25, Z+1	; 0x01
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <main+0x13cc>
    44f2:	fe 01       	movw	r30, r28
    44f4:	e5 5e       	subi	r30, 0xE5	; 229
    44f6:	fe 4f       	sbci	r31, 0xFE	; 254
    44f8:	91 83       	std	Z+1, r25	; 0x01
    44fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fc:	de 01       	movw	r26, r28
    44fe:	a3 5e       	subi	r26, 0xE3	; 227
    4500:	be 4f       	sbci	r27, 0xFE	; 254
    4502:	fe 01       	movw	r30, r28
    4504:	e3 5e       	subi	r30, 0xE3	; 227
    4506:	fe 4f       	sbci	r31, 0xFE	; 254
    4508:	80 81       	ld	r24, Z
    450a:	91 81       	ldd	r25, Z+1	; 0x01
    450c:	01 97       	sbiw	r24, 0x01	; 1
    450e:	11 96       	adiw	r26, 0x01	; 1
    4510:	9c 93       	st	X, r25
    4512:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4514:	fe 01       	movw	r30, r28
    4516:	e3 5e       	subi	r30, 0xE3	; 227
    4518:	fe 4f       	sbci	r31, 0xFE	; 254
    451a:	80 81       	ld	r24, Z
    451c:	91 81       	ldd	r25, Z+1	; 0x01
    451e:	00 97       	sbiw	r24, 0x00	; 0
    4520:	d1 f6       	brne	.-76     	; 0x44d6 <main+0x13b4>
    4522:	27 c0       	rjmp	.+78     	; 0x4572 <main+0x1450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4524:	8e 01       	movw	r16, r28
    4526:	03 5e       	subi	r16, 0xE3	; 227
    4528:	1e 4f       	sbci	r17, 0xFE	; 254
    452a:	fe 01       	movw	r30, r28
    452c:	e1 5e       	subi	r30, 0xE1	; 225
    452e:	fe 4f       	sbci	r31, 0xFE	; 254
    4530:	60 81       	ld	r22, Z
    4532:	71 81       	ldd	r23, Z+1	; 0x01
    4534:	82 81       	ldd	r24, Z+2	; 0x02
    4536:	93 81       	ldd	r25, Z+3	; 0x03
    4538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	f8 01       	movw	r30, r16
    4542:	91 83       	std	Z+1, r25	; 0x01
    4544:	80 83       	st	Z, r24
    4546:	de 01       	movw	r26, r28
    4548:	a7 5e       	subi	r26, 0xE7	; 231
    454a:	be 4f       	sbci	r27, 0xFE	; 254
    454c:	fe 01       	movw	r30, r28
    454e:	e3 5e       	subi	r30, 0xE3	; 227
    4550:	fe 4f       	sbci	r31, 0xFE	; 254
    4552:	80 81       	ld	r24, Z
    4554:	91 81       	ldd	r25, Z+1	; 0x01
    4556:	8d 93       	st	X+, r24
    4558:	9c 93       	st	X, r25
    455a:	fe 01       	movw	r30, r28
    455c:	e7 5e       	subi	r30, 0xE7	; 231
    455e:	fe 4f       	sbci	r31, 0xFE	; 254
    4560:	80 81       	ld	r24, Z
    4562:	91 81       	ldd	r25, Z+1	; 0x01
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	f1 f7       	brne	.-4      	; 0x4564 <main+0x1442>
    4568:	fe 01       	movw	r30, r28
    456a:	e7 5e       	subi	r30, 0xE7	; 231
    456c:	fe 4f       	sbci	r31, 0xFE	; 254
    456e:	91 83       	std	Z+1, r25	; 0x01
    4570:	80 83       	st	Z, r24
				_delay_ms(700);
				MUSART_vTransmitData(seconds_counter);
    4572:	80 91 f1 00 	lds	r24, 0x00F1
    4576:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    457a:	fe 01       	movw	r30, r28
    457c:	eb 5e       	subi	r30, 0xEB	; 235
    457e:	fe 4f       	sbci	r31, 0xFE	; 254
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	af e2       	ldi	r26, 0x2F	; 47
    4586:	b4 e4       	ldi	r27, 0x44	; 68
    4588:	80 83       	st	Z, r24
    458a:	91 83       	std	Z+1, r25	; 0x01
    458c:	a2 83       	std	Z+2, r26	; 0x02
    458e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4590:	8e 01       	movw	r16, r28
    4592:	0f 5e       	subi	r16, 0xEF	; 239
    4594:	1e 4f       	sbci	r17, 0xFE	; 254
    4596:	fe 01       	movw	r30, r28
    4598:	eb 5e       	subi	r30, 0xEB	; 235
    459a:	fe 4f       	sbci	r31, 0xFE	; 254
    459c:	60 81       	ld	r22, Z
    459e:	71 81       	ldd	r23, Z+1	; 0x01
    45a0:	82 81       	ldd	r24, Z+2	; 0x02
    45a2:	93 81       	ldd	r25, Z+3	; 0x03
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	4a ef       	ldi	r20, 0xFA	; 250
    45aa:	54 e4       	ldi	r21, 0x44	; 68
    45ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	f8 01       	movw	r30, r16
    45b6:	80 83       	st	Z, r24
    45b8:	91 83       	std	Z+1, r25	; 0x01
    45ba:	a2 83       	std	Z+2, r26	; 0x02
    45bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45be:	fe 01       	movw	r30, r28
    45c0:	ef 5e       	subi	r30, 0xEF	; 239
    45c2:	fe 4f       	sbci	r31, 0xFE	; 254
    45c4:	60 81       	ld	r22, Z
    45c6:	71 81       	ldd	r23, Z+1	; 0x01
    45c8:	82 81       	ldd	r24, Z+2	; 0x02
    45ca:	93 81       	ldd	r25, Z+3	; 0x03
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e8       	ldi	r20, 0x80	; 128
    45d2:	5f e3       	ldi	r21, 0x3F	; 63
    45d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45d8:	88 23       	and	r24, r24
    45da:	44 f4       	brge	.+16     	; 0x45ec <main+0x14ca>
		__ticks = 1;
    45dc:	fe 01       	movw	r30, r28
    45de:	e1 5f       	subi	r30, 0xF1	; 241
    45e0:	fe 4f       	sbci	r31, 0xFE	; 254
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	91 83       	std	Z+1, r25	; 0x01
    45e8:	80 83       	st	Z, r24
    45ea:	65 c0       	rjmp	.+202    	; 0x46b6 <main+0x1594>
	else if (__tmp > 65535)
    45ec:	fe 01       	movw	r30, r28
    45ee:	ef 5e       	subi	r30, 0xEF	; 239
    45f0:	fe 4f       	sbci	r31, 0xFE	; 254
    45f2:	60 81       	ld	r22, Z
    45f4:	71 81       	ldd	r23, Z+1	; 0x01
    45f6:	82 81       	ldd	r24, Z+2	; 0x02
    45f8:	93 81       	ldd	r25, Z+3	; 0x03
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	3f ef       	ldi	r19, 0xFF	; 255
    45fe:	4f e7       	ldi	r20, 0x7F	; 127
    4600:	57 e4       	ldi	r21, 0x47	; 71
    4602:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4606:	18 16       	cp	r1, r24
    4608:	0c f0       	brlt	.+2      	; 0x460c <main+0x14ea>
    460a:	44 c0       	rjmp	.+136    	; 0x4694 <main+0x1572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    460c:	fe 01       	movw	r30, r28
    460e:	eb 5e       	subi	r30, 0xEB	; 235
    4610:	fe 4f       	sbci	r31, 0xFE	; 254
    4612:	60 81       	ld	r22, Z
    4614:	71 81       	ldd	r23, Z+1	; 0x01
    4616:	82 81       	ldd	r24, Z+2	; 0x02
    4618:	93 81       	ldd	r25, Z+3	; 0x03
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	40 e2       	ldi	r20, 0x20	; 32
    4620:	51 e4       	ldi	r21, 0x41	; 65
    4622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4626:	dc 01       	movw	r26, r24
    4628:	cb 01       	movw	r24, r22
    462a:	8e 01       	movw	r16, r28
    462c:	01 5f       	subi	r16, 0xF1	; 241
    462e:	1e 4f       	sbci	r17, 0xFE	; 254
    4630:	bc 01       	movw	r22, r24
    4632:	cd 01       	movw	r24, r26
    4634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	f8 01       	movw	r30, r16
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	80 83       	st	Z, r24
    4642:	1f c0       	rjmp	.+62     	; 0x4682 <main+0x1560>
    4644:	fe 01       	movw	r30, r28
    4646:	e3 5f       	subi	r30, 0xF3	; 243
    4648:	fe 4f       	sbci	r31, 0xFE	; 254
    464a:	88 ec       	ldi	r24, 0xC8	; 200
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	91 83       	std	Z+1, r25	; 0x01
    4650:	80 83       	st	Z, r24
    4652:	fe 01       	movw	r30, r28
    4654:	e3 5f       	subi	r30, 0xF3	; 243
    4656:	fe 4f       	sbci	r31, 0xFE	; 254
    4658:	80 81       	ld	r24, Z
    465a:	91 81       	ldd	r25, Z+1	; 0x01
    465c:	01 97       	sbiw	r24, 0x01	; 1
    465e:	f1 f7       	brne	.-4      	; 0x465c <main+0x153a>
    4660:	fe 01       	movw	r30, r28
    4662:	e3 5f       	subi	r30, 0xF3	; 243
    4664:	fe 4f       	sbci	r31, 0xFE	; 254
    4666:	91 83       	std	Z+1, r25	; 0x01
    4668:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    466a:	de 01       	movw	r26, r28
    466c:	a1 5f       	subi	r26, 0xF1	; 241
    466e:	be 4f       	sbci	r27, 0xFE	; 254
    4670:	fe 01       	movw	r30, r28
    4672:	e1 5f       	subi	r30, 0xF1	; 241
    4674:	fe 4f       	sbci	r31, 0xFE	; 254
    4676:	80 81       	ld	r24, Z
    4678:	91 81       	ldd	r25, Z+1	; 0x01
    467a:	01 97       	sbiw	r24, 0x01	; 1
    467c:	11 96       	adiw	r26, 0x01	; 1
    467e:	9c 93       	st	X, r25
    4680:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4682:	fe 01       	movw	r30, r28
    4684:	e1 5f       	subi	r30, 0xF1	; 241
    4686:	fe 4f       	sbci	r31, 0xFE	; 254
    4688:	80 81       	ld	r24, Z
    468a:	91 81       	ldd	r25, Z+1	; 0x01
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	d1 f6       	brne	.-76     	; 0x4644 <main+0x1522>
    4690:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <main+0x255e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4694:	8e 01       	movw	r16, r28
    4696:	01 5f       	subi	r16, 0xF1	; 241
    4698:	1e 4f       	sbci	r17, 0xFE	; 254
    469a:	fe 01       	movw	r30, r28
    469c:	ef 5e       	subi	r30, 0xEF	; 239
    469e:	fe 4f       	sbci	r31, 0xFE	; 254
    46a0:	60 81       	ld	r22, Z
    46a2:	71 81       	ldd	r23, Z+1	; 0x01
    46a4:	82 81       	ldd	r24, Z+2	; 0x02
    46a6:	93 81       	ldd	r25, Z+3	; 0x03
    46a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	f8 01       	movw	r30, r16
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	80 83       	st	Z, r24
    46b6:	de 01       	movw	r26, r28
    46b8:	a5 5f       	subi	r26, 0xF5	; 245
    46ba:	be 4f       	sbci	r27, 0xFE	; 254
    46bc:	fe 01       	movw	r30, r28
    46be:	e1 5f       	subi	r30, 0xF1	; 241
    46c0:	fe 4f       	sbci	r31, 0xFE	; 254
    46c2:	80 81       	ld	r24, Z
    46c4:	91 81       	ldd	r25, Z+1	; 0x01
    46c6:	11 96       	adiw	r26, 0x01	; 1
    46c8:	9c 93       	st	X, r25
    46ca:	8e 93       	st	-X, r24
    46cc:	fe 01       	movw	r30, r28
    46ce:	e5 5f       	subi	r30, 0xF5	; 245
    46d0:	fe 4f       	sbci	r31, 0xFE	; 254
    46d2:	80 81       	ld	r24, Z
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <main+0x15b4>
    46da:	fe 01       	movw	r30, r28
    46dc:	e5 5f       	subi	r30, 0xF5	; 245
    46de:	fe 4f       	sbci	r31, 0xFE	; 254
    46e0:	91 83       	std	Z+1, r25	; 0x01
    46e2:	80 83       	st	Z, r24
    46e4:	0c 94 40 2b 	jmp	0x5680	; 0x5680 <main+0x255e>
				_delay_ms(700);

			}
			else if(key==2){
    46e8:	fe 01       	movw	r30, r28
    46ea:	e5 53       	subi	r30, 0x35	; 53
    46ec:	fe 4f       	sbci	r31, 0xFE	; 254
    46ee:	80 81       	ld	r24, Z
    46f0:	82 30       	cpi	r24, 0x02	; 2
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <main+0x15d4>
    46f4:	fe c6       	rjmp	.+3580   	; 0x54f2 <main+0x23d0>
			HLCD_vDisplayClear();
    46f6:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
			HLCD_vSendString("Hour: ");
    46fa:	86 e9       	ldi	r24, 0x96	; 150
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
			HLCD_vMoveTo(1,0);
    4702:	81 e0       	ldi	r24, 0x01	; 1
    4704:	60 e0       	ldi	r22, 0x00	; 0
    4706:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
    470a:	fe 01       	movw	r30, r28
    470c:	e9 5f       	subi	r30, 0xF9	; 249
    470e:	fe 4f       	sbci	r31, 0xFE	; 254
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	aa ef       	ldi	r26, 0xFA	; 250
    4716:	b3 e4       	ldi	r27, 0x43	; 67
    4718:	80 83       	st	Z, r24
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	a2 83       	std	Z+2, r26	; 0x02
    471e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4720:	8e 01       	movw	r16, r28
    4722:	0d 5f       	subi	r16, 0xFD	; 253
    4724:	1e 4f       	sbci	r17, 0xFE	; 254
    4726:	fe 01       	movw	r30, r28
    4728:	e9 5f       	subi	r30, 0xF9	; 249
    472a:	fe 4f       	sbci	r31, 0xFE	; 254
    472c:	60 81       	ld	r22, Z
    472e:	71 81       	ldd	r23, Z+1	; 0x01
    4730:	82 81       	ldd	r24, Z+2	; 0x02
    4732:	93 81       	ldd	r25, Z+3	; 0x03
    4734:	20 e0       	ldi	r18, 0x00	; 0
    4736:	30 e0       	ldi	r19, 0x00	; 0
    4738:	4a ef       	ldi	r20, 0xFA	; 250
    473a:	54 e4       	ldi	r21, 0x44	; 68
    473c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	f8 01       	movw	r30, r16
    4746:	80 83       	st	Z, r24
    4748:	91 83       	std	Z+1, r25	; 0x01
    474a:	a2 83       	std	Z+2, r26	; 0x02
    474c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    474e:	fe 01       	movw	r30, r28
    4750:	ed 5f       	subi	r30, 0xFD	; 253
    4752:	fe 4f       	sbci	r31, 0xFE	; 254
    4754:	60 81       	ld	r22, Z
    4756:	71 81       	ldd	r23, Z+1	; 0x01
    4758:	82 81       	ldd	r24, Z+2	; 0x02
    475a:	93 81       	ldd	r25, Z+3	; 0x03
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	40 e8       	ldi	r20, 0x80	; 128
    4762:	5f e3       	ldi	r21, 0x3F	; 63
    4764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4768:	88 23       	and	r24, r24
    476a:	44 f4       	brge	.+16     	; 0x477c <main+0x165a>
		__ticks = 1;
    476c:	fe 01       	movw	r30, r28
    476e:	ef 5f       	subi	r30, 0xFF	; 255
    4770:	fe 4f       	sbci	r31, 0xFE	; 254
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	91 83       	std	Z+1, r25	; 0x01
    4778:	80 83       	st	Z, r24
    477a:	64 c0       	rjmp	.+200    	; 0x4844 <main+0x1722>
	else if (__tmp > 65535)
    477c:	fe 01       	movw	r30, r28
    477e:	ed 5f       	subi	r30, 0xFD	; 253
    4780:	fe 4f       	sbci	r31, 0xFE	; 254
    4782:	60 81       	ld	r22, Z
    4784:	71 81       	ldd	r23, Z+1	; 0x01
    4786:	82 81       	ldd	r24, Z+2	; 0x02
    4788:	93 81       	ldd	r25, Z+3	; 0x03
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	3f ef       	ldi	r19, 0xFF	; 255
    478e:	4f e7       	ldi	r20, 0x7F	; 127
    4790:	57 e4       	ldi	r21, 0x47	; 71
    4792:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4796:	18 16       	cp	r1, r24
    4798:	0c f0       	brlt	.+2      	; 0x479c <main+0x167a>
    479a:	43 c0       	rjmp	.+134    	; 0x4822 <main+0x1700>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    479c:	fe 01       	movw	r30, r28
    479e:	e9 5f       	subi	r30, 0xF9	; 249
    47a0:	fe 4f       	sbci	r31, 0xFE	; 254
    47a2:	60 81       	ld	r22, Z
    47a4:	71 81       	ldd	r23, Z+1	; 0x01
    47a6:	82 81       	ldd	r24, Z+2	; 0x02
    47a8:	93 81       	ldd	r25, Z+3	; 0x03
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	40 e2       	ldi	r20, 0x20	; 32
    47b0:	51 e4       	ldi	r21, 0x41	; 65
    47b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b6:	dc 01       	movw	r26, r24
    47b8:	cb 01       	movw	r24, r22
    47ba:	8e 01       	movw	r16, r28
    47bc:	0f 5f       	subi	r16, 0xFF	; 255
    47be:	1e 4f       	sbci	r17, 0xFE	; 254
    47c0:	bc 01       	movw	r22, r24
    47c2:	cd 01       	movw	r24, r26
    47c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	f8 01       	movw	r30, r16
    47ce:	91 83       	std	Z+1, r25	; 0x01
    47d0:	80 83       	st	Z, r24
    47d2:	1f c0       	rjmp	.+62     	; 0x4812 <main+0x16f0>
    47d4:	fe 01       	movw	r30, r28
    47d6:	e1 50       	subi	r30, 0x01	; 1
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	88 ec       	ldi	r24, 0xC8	; 200
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	91 83       	std	Z+1, r25	; 0x01
    47e0:	80 83       	st	Z, r24
    47e2:	fe 01       	movw	r30, r28
    47e4:	e1 50       	subi	r30, 0x01	; 1
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	80 81       	ld	r24, Z
    47ea:	91 81       	ldd	r25, Z+1	; 0x01
    47ec:	01 97       	sbiw	r24, 0x01	; 1
    47ee:	f1 f7       	brne	.-4      	; 0x47ec <main+0x16ca>
    47f0:	fe 01       	movw	r30, r28
    47f2:	e1 50       	subi	r30, 0x01	; 1
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	91 83       	std	Z+1, r25	; 0x01
    47f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47fa:	de 01       	movw	r26, r28
    47fc:	af 5f       	subi	r26, 0xFF	; 255
    47fe:	be 4f       	sbci	r27, 0xFE	; 254
    4800:	fe 01       	movw	r30, r28
    4802:	ef 5f       	subi	r30, 0xFF	; 255
    4804:	fe 4f       	sbci	r31, 0xFE	; 254
    4806:	80 81       	ld	r24, Z
    4808:	91 81       	ldd	r25, Z+1	; 0x01
    480a:	01 97       	sbiw	r24, 0x01	; 1
    480c:	11 96       	adiw	r26, 0x01	; 1
    480e:	9c 93       	st	X, r25
    4810:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4812:	fe 01       	movw	r30, r28
    4814:	ef 5f       	subi	r30, 0xFF	; 255
    4816:	fe 4f       	sbci	r31, 0xFE	; 254
    4818:	80 81       	ld	r24, Z
    481a:	91 81       	ldd	r25, Z+1	; 0x01
    481c:	00 97       	sbiw	r24, 0x00	; 0
    481e:	d1 f6       	brne	.-76     	; 0x47d4 <main+0x16b2>
    4820:	27 c0       	rjmp	.+78     	; 0x4870 <main+0x174e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4822:	8e 01       	movw	r16, r28
    4824:	0f 5f       	subi	r16, 0xFF	; 255
    4826:	1e 4f       	sbci	r17, 0xFE	; 254
    4828:	fe 01       	movw	r30, r28
    482a:	ed 5f       	subi	r30, 0xFD	; 253
    482c:	fe 4f       	sbci	r31, 0xFE	; 254
    482e:	60 81       	ld	r22, Z
    4830:	71 81       	ldd	r23, Z+1	; 0x01
    4832:	82 81       	ldd	r24, Z+2	; 0x02
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483a:	dc 01       	movw	r26, r24
    483c:	cb 01       	movw	r24, r22
    483e:	f8 01       	movw	r30, r16
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	80 83       	st	Z, r24
    4844:	de 01       	movw	r26, r28
    4846:	a3 50       	subi	r26, 0x03	; 3
    4848:	bf 4f       	sbci	r27, 0xFF	; 255
    484a:	fe 01       	movw	r30, r28
    484c:	ef 5f       	subi	r30, 0xFF	; 255
    484e:	fe 4f       	sbci	r31, 0xFE	; 254
    4850:	80 81       	ld	r24, Z
    4852:	91 81       	ldd	r25, Z+1	; 0x01
    4854:	8d 93       	st	X+, r24
    4856:	9c 93       	st	X, r25
    4858:	fe 01       	movw	r30, r28
    485a:	e3 50       	subi	r30, 0x03	; 3
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	80 81       	ld	r24, Z
    4860:	91 81       	ldd	r25, Z+1	; 0x01
    4862:	01 97       	sbiw	r24, 0x01	; 1
    4864:	f1 f7       	brne	.-4      	; 0x4862 <main+0x1740>
    4866:	fe 01       	movw	r30, r28
    4868:	e3 50       	subi	r30, 0x03	; 3
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	91 83       	std	Z+1, r25	; 0x01
    486e:	80 83       	st	Z, r24
			_delay_ms(500);
			do{
				ALARM_H_first_digit=HKPD_U8GetPressedKey();
    4870:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    4874:	fe 01       	movw	r30, r28
    4876:	ec 53       	subi	r30, 0x3C	; 60
    4878:	fe 4f       	sbci	r31, 0xFE	; 254
    487a:	80 83       	st	Z, r24

			  } while (ALARM_H_first_digit == NOTPRESSED);
    487c:	fe 01       	movw	r30, r28
    487e:	ec 53       	subi	r30, 0x3C	; 60
    4880:	fe 4f       	sbci	r31, 0xFE	; 254
    4882:	80 81       	ld	r24, Z
    4884:	82 33       	cpi	r24, 0x32	; 50
    4886:	a1 f3       	breq	.-24     	; 0x4870 <main+0x174e>
				HLCD_vSendNumber(ALARM_H_first_digit);
    4888:	fe 01       	movw	r30, r28
    488a:	ec 53       	subi	r30, 0x3C	; 60
    488c:	fe 4f       	sbci	r31, 0xFE	; 254
    488e:	80 81       	ld	r24, Z
    4890:	88 2f       	mov	r24, r24
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	a0 e0       	ldi	r26, 0x00	; 0
    4896:	b0 e0       	ldi	r27, 0x00	; 0
    4898:	bc 01       	movw	r22, r24
    489a:	cd 01       	movw	r24, r26
    489c:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
    48a0:	fe 01       	movw	r30, r28
    48a2:	e7 50       	subi	r30, 0x07	; 7
    48a4:	ff 4f       	sbci	r31, 0xFF	; 255
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	a6 e9       	ldi	r26, 0x96	; 150
    48ac:	b3 e4       	ldi	r27, 0x43	; 67
    48ae:	80 83       	st	Z, r24
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	a2 83       	std	Z+2, r26	; 0x02
    48b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b6:	8e 01       	movw	r16, r28
    48b8:	0b 50       	subi	r16, 0x0B	; 11
    48ba:	1f 4f       	sbci	r17, 0xFF	; 255
    48bc:	fe 01       	movw	r30, r28
    48be:	e7 50       	subi	r30, 0x07	; 7
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	60 81       	ld	r22, Z
    48c4:	71 81       	ldd	r23, Z+1	; 0x01
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	30 e0       	ldi	r19, 0x00	; 0
    48ce:	4a ef       	ldi	r20, 0xFA	; 250
    48d0:	54 e4       	ldi	r21, 0x44	; 68
    48d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48d6:	dc 01       	movw	r26, r24
    48d8:	cb 01       	movw	r24, r22
    48da:	f8 01       	movw	r30, r16
    48dc:	80 83       	st	Z, r24
    48de:	91 83       	std	Z+1, r25	; 0x01
    48e0:	a2 83       	std	Z+2, r26	; 0x02
    48e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48e4:	fe 01       	movw	r30, r28
    48e6:	eb 50       	subi	r30, 0x0B	; 11
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	60 81       	ld	r22, Z
    48ec:	71 81       	ldd	r23, Z+1	; 0x01
    48ee:	82 81       	ldd	r24, Z+2	; 0x02
    48f0:	93 81       	ldd	r25, Z+3	; 0x03
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e8       	ldi	r20, 0x80	; 128
    48f8:	5f e3       	ldi	r21, 0x3F	; 63
    48fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48fe:	88 23       	and	r24, r24
    4900:	44 f4       	brge	.+16     	; 0x4912 <main+0x17f0>
		__ticks = 1;
    4902:	fe 01       	movw	r30, r28
    4904:	ed 50       	subi	r30, 0x0D	; 13
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	91 83       	std	Z+1, r25	; 0x01
    490e:	80 83       	st	Z, r24
    4910:	64 c0       	rjmp	.+200    	; 0x49da <main+0x18b8>
	else if (__tmp > 65535)
    4912:	fe 01       	movw	r30, r28
    4914:	eb 50       	subi	r30, 0x0B	; 11
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	60 81       	ld	r22, Z
    491a:	71 81       	ldd	r23, Z+1	; 0x01
    491c:	82 81       	ldd	r24, Z+2	; 0x02
    491e:	93 81       	ldd	r25, Z+3	; 0x03
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	3f ef       	ldi	r19, 0xFF	; 255
    4924:	4f e7       	ldi	r20, 0x7F	; 127
    4926:	57 e4       	ldi	r21, 0x47	; 71
    4928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    492c:	18 16       	cp	r1, r24
    492e:	0c f0       	brlt	.+2      	; 0x4932 <main+0x1810>
    4930:	43 c0       	rjmp	.+134    	; 0x49b8 <main+0x1896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4932:	fe 01       	movw	r30, r28
    4934:	e7 50       	subi	r30, 0x07	; 7
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	60 81       	ld	r22, Z
    493a:	71 81       	ldd	r23, Z+1	; 0x01
    493c:	82 81       	ldd	r24, Z+2	; 0x02
    493e:	93 81       	ldd	r25, Z+3	; 0x03
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	40 e2       	ldi	r20, 0x20	; 32
    4946:	51 e4       	ldi	r21, 0x41	; 65
    4948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494c:	dc 01       	movw	r26, r24
    494e:	cb 01       	movw	r24, r22
    4950:	8e 01       	movw	r16, r28
    4952:	0d 50       	subi	r16, 0x0D	; 13
    4954:	1f 4f       	sbci	r17, 0xFF	; 255
    4956:	bc 01       	movw	r22, r24
    4958:	cd 01       	movw	r24, r26
    495a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    495e:	dc 01       	movw	r26, r24
    4960:	cb 01       	movw	r24, r22
    4962:	f8 01       	movw	r30, r16
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24
    4968:	1f c0       	rjmp	.+62     	; 0x49a8 <main+0x1886>
    496a:	fe 01       	movw	r30, r28
    496c:	ef 50       	subi	r30, 0x0F	; 15
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	88 ec       	ldi	r24, 0xC8	; 200
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	91 83       	std	Z+1, r25	; 0x01
    4976:	80 83       	st	Z, r24
    4978:	fe 01       	movw	r30, r28
    497a:	ef 50       	subi	r30, 0x0F	; 15
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	f1 f7       	brne	.-4      	; 0x4982 <main+0x1860>
    4986:	fe 01       	movw	r30, r28
    4988:	ef 50       	subi	r30, 0x0F	; 15
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	91 83       	std	Z+1, r25	; 0x01
    498e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4990:	de 01       	movw	r26, r28
    4992:	ad 50       	subi	r26, 0x0D	; 13
    4994:	bf 4f       	sbci	r27, 0xFF	; 255
    4996:	fe 01       	movw	r30, r28
    4998:	ed 50       	subi	r30, 0x0D	; 13
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	80 81       	ld	r24, Z
    499e:	91 81       	ldd	r25, Z+1	; 0x01
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	11 96       	adiw	r26, 0x01	; 1
    49a4:	9c 93       	st	X, r25
    49a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a8:	fe 01       	movw	r30, r28
    49aa:	ed 50       	subi	r30, 0x0D	; 13
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	80 81       	ld	r24, Z
    49b0:	91 81       	ldd	r25, Z+1	; 0x01
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	d1 f6       	brne	.-76     	; 0x496a <main+0x1848>
    49b6:	27 c0       	rjmp	.+78     	; 0x4a06 <main+0x18e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b8:	8e 01       	movw	r16, r28
    49ba:	0d 50       	subi	r16, 0x0D	; 13
    49bc:	1f 4f       	sbci	r17, 0xFF	; 255
    49be:	fe 01       	movw	r30, r28
    49c0:	eb 50       	subi	r30, 0x0B	; 11
    49c2:	ff 4f       	sbci	r31, 0xFF	; 255
    49c4:	60 81       	ld	r22, Z
    49c6:	71 81       	ldd	r23, Z+1	; 0x01
    49c8:	82 81       	ldd	r24, Z+2	; 0x02
    49ca:	93 81       	ldd	r25, Z+3	; 0x03
    49cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	f8 01       	movw	r30, r16
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	80 83       	st	Z, r24
    49da:	de 01       	movw	r26, r28
    49dc:	a1 51       	subi	r26, 0x11	; 17
    49de:	bf 4f       	sbci	r27, 0xFF	; 255
    49e0:	fe 01       	movw	r30, r28
    49e2:	ed 50       	subi	r30, 0x0D	; 13
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	80 81       	ld	r24, Z
    49e8:	91 81       	ldd	r25, Z+1	; 0x01
    49ea:	8d 93       	st	X+, r24
    49ec:	9c 93       	st	X, r25
    49ee:	fe 01       	movw	r30, r28
    49f0:	e1 51       	subi	r30, 0x11	; 17
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	80 81       	ld	r24, Z
    49f6:	91 81       	ldd	r25, Z+1	; 0x01
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	f1 f7       	brne	.-4      	; 0x49f8 <main+0x18d6>
    49fc:	fe 01       	movw	r30, r28
    49fe:	e1 51       	subi	r30, 0x11	; 17
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	91 83       	std	Z+1, r25	; 0x01
    4a04:	80 83       	st	Z, r24
				_delay_ms(300);
			do{
				ALARM_H_second_digit=HKPD_U8GetPressedKey();
    4a06:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	ed 53       	subi	r30, 0x3D	; 61
    4a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a10:	80 83       	st	Z, r24
			} while (ALARM_H_second_digit == NOTPRESSED);
    4a12:	fe 01       	movw	r30, r28
    4a14:	ed 53       	subi	r30, 0x3D	; 61
    4a16:	fe 4f       	sbci	r31, 0xFE	; 254
    4a18:	80 81       	ld	r24, Z
    4a1a:	82 33       	cpi	r24, 0x32	; 50
    4a1c:	a1 f3       	breq	.-24     	; 0x4a06 <main+0x18e4>
			HLCD_vSendNumber(ALARM_H_second_digit);
    4a1e:	fe 01       	movw	r30, r28
    4a20:	ed 53       	subi	r30, 0x3D	; 61
    4a22:	fe 4f       	sbci	r31, 0xFE	; 254
    4a24:	80 81       	ld	r24, Z
    4a26:	88 2f       	mov	r24, r24
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	a0 e0       	ldi	r26, 0x00	; 0
    4a2c:	b0 e0       	ldi	r27, 0x00	; 0
    4a2e:	bc 01       	movw	r22, r24
    4a30:	cd 01       	movw	r24, r26
    4a32:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
			A_hours_counter=combine(ALARM_H_first_digit,ALARM_H_second_digit);
    4a36:	fe 01       	movw	r30, r28
    4a38:	ec 53       	subi	r30, 0x3C	; 60
    4a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a3c:	80 81       	ld	r24, Z
    4a3e:	48 2f       	mov	r20, r24
    4a40:	50 e0       	ldi	r21, 0x00	; 0
    4a42:	fe 01       	movw	r30, r28
    4a44:	ed 53       	subi	r30, 0x3D	; 61
    4a46:	fe 4f       	sbci	r31, 0xFE	; 254
    4a48:	80 81       	ld	r24, Z
    4a4a:	28 2f       	mov	r18, r24
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	ca 01       	movw	r24, r20
    4a50:	b9 01       	movw	r22, r18
    4a52:	0e 94 15 18 	call	0x302a	; 0x302a <combine>
    4a56:	80 93 c2 00 	sts	0x00C2, r24
    4a5a:	fe 01       	movw	r30, r28
    4a5c:	e5 51       	subi	r30, 0x15	; 21
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	a6 e9       	ldi	r26, 0x96	; 150
    4a66:	b3 e4       	ldi	r27, 0x43	; 67
    4a68:	80 83       	st	Z, r24
    4a6a:	91 83       	std	Z+1, r25	; 0x01
    4a6c:	a2 83       	std	Z+2, r26	; 0x02
    4a6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a70:	8e 01       	movw	r16, r28
    4a72:	09 51       	subi	r16, 0x19	; 25
    4a74:	1f 4f       	sbci	r17, 0xFF	; 255
    4a76:	fe 01       	movw	r30, r28
    4a78:	e5 51       	subi	r30, 0x15	; 21
    4a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7c:	60 81       	ld	r22, Z
    4a7e:	71 81       	ldd	r23, Z+1	; 0x01
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	20 e0       	ldi	r18, 0x00	; 0
    4a86:	30 e0       	ldi	r19, 0x00	; 0
    4a88:	4a ef       	ldi	r20, 0xFA	; 250
    4a8a:	54 e4       	ldi	r21, 0x44	; 68
    4a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a90:	dc 01       	movw	r26, r24
    4a92:	cb 01       	movw	r24, r22
    4a94:	f8 01       	movw	r30, r16
    4a96:	80 83       	st	Z, r24
    4a98:	91 83       	std	Z+1, r25	; 0x01
    4a9a:	a2 83       	std	Z+2, r26	; 0x02
    4a9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e9 51       	subi	r30, 0x19	; 25
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	60 81       	ld	r22, Z
    4aa6:	71 81       	ldd	r23, Z+1	; 0x01
    4aa8:	82 81       	ldd	r24, Z+2	; 0x02
    4aaa:	93 81       	ldd	r25, Z+3	; 0x03
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	40 e8       	ldi	r20, 0x80	; 128
    4ab2:	5f e3       	ldi	r21, 0x3F	; 63
    4ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ab8:	88 23       	and	r24, r24
    4aba:	44 f4       	brge	.+16     	; 0x4acc <main+0x19aa>
		__ticks = 1;
    4abc:	fe 01       	movw	r30, r28
    4abe:	eb 51       	subi	r30, 0x1B	; 27
    4ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	91 83       	std	Z+1, r25	; 0x01
    4ac8:	80 83       	st	Z, r24
    4aca:	64 c0       	rjmp	.+200    	; 0x4b94 <main+0x1a72>
	else if (__tmp > 65535)
    4acc:	fe 01       	movw	r30, r28
    4ace:	e9 51       	subi	r30, 0x19	; 25
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	60 81       	ld	r22, Z
    4ad4:	71 81       	ldd	r23, Z+1	; 0x01
    4ad6:	82 81       	ldd	r24, Z+2	; 0x02
    4ad8:	93 81       	ldd	r25, Z+3	; 0x03
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	3f ef       	ldi	r19, 0xFF	; 255
    4ade:	4f e7       	ldi	r20, 0x7F	; 127
    4ae0:	57 e4       	ldi	r21, 0x47	; 71
    4ae2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ae6:	18 16       	cp	r1, r24
    4ae8:	0c f0       	brlt	.+2      	; 0x4aec <main+0x19ca>
    4aea:	43 c0       	rjmp	.+134    	; 0x4b72 <main+0x1a50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aec:	fe 01       	movw	r30, r28
    4aee:	e5 51       	subi	r30, 0x15	; 21
    4af0:	ff 4f       	sbci	r31, 0xFF	; 255
    4af2:	60 81       	ld	r22, Z
    4af4:	71 81       	ldd	r23, Z+1	; 0x01
    4af6:	82 81       	ldd	r24, Z+2	; 0x02
    4af8:	93 81       	ldd	r25, Z+3	; 0x03
    4afa:	20 e0       	ldi	r18, 0x00	; 0
    4afc:	30 e0       	ldi	r19, 0x00	; 0
    4afe:	40 e2       	ldi	r20, 0x20	; 32
    4b00:	51 e4       	ldi	r21, 0x41	; 65
    4b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b06:	dc 01       	movw	r26, r24
    4b08:	cb 01       	movw	r24, r22
    4b0a:	8e 01       	movw	r16, r28
    4b0c:	0b 51       	subi	r16, 0x1B	; 27
    4b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b10:	bc 01       	movw	r22, r24
    4b12:	cd 01       	movw	r24, r26
    4b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b18:	dc 01       	movw	r26, r24
    4b1a:	cb 01       	movw	r24, r22
    4b1c:	f8 01       	movw	r30, r16
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	80 83       	st	Z, r24
    4b22:	1f c0       	rjmp	.+62     	; 0x4b62 <main+0x1a40>
    4b24:	fe 01       	movw	r30, r28
    4b26:	ed 51       	subi	r30, 0x1D	; 29
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	88 ec       	ldi	r24, 0xC8	; 200
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	91 83       	std	Z+1, r25	; 0x01
    4b30:	80 83       	st	Z, r24
    4b32:	fe 01       	movw	r30, r28
    4b34:	ed 51       	subi	r30, 0x1D	; 29
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	80 81       	ld	r24, Z
    4b3a:	91 81       	ldd	r25, Z+1	; 0x01
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	f1 f7       	brne	.-4      	; 0x4b3c <main+0x1a1a>
    4b40:	fe 01       	movw	r30, r28
    4b42:	ed 51       	subi	r30, 0x1D	; 29
    4b44:	ff 4f       	sbci	r31, 0xFF	; 255
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b4a:	de 01       	movw	r26, r28
    4b4c:	ab 51       	subi	r26, 0x1B	; 27
    4b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    4b50:	fe 01       	movw	r30, r28
    4b52:	eb 51       	subi	r30, 0x1B	; 27
    4b54:	ff 4f       	sbci	r31, 0xFF	; 255
    4b56:	80 81       	ld	r24, Z
    4b58:	91 81       	ldd	r25, Z+1	; 0x01
    4b5a:	01 97       	sbiw	r24, 0x01	; 1
    4b5c:	11 96       	adiw	r26, 0x01	; 1
    4b5e:	9c 93       	st	X, r25
    4b60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b62:	fe 01       	movw	r30, r28
    4b64:	eb 51       	subi	r30, 0x1B	; 27
    4b66:	ff 4f       	sbci	r31, 0xFF	; 255
    4b68:	80 81       	ld	r24, Z
    4b6a:	91 81       	ldd	r25, Z+1	; 0x01
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	d1 f6       	brne	.-76     	; 0x4b24 <main+0x1a02>
    4b70:	27 c0       	rjmp	.+78     	; 0x4bc0 <main+0x1a9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b72:	8e 01       	movw	r16, r28
    4b74:	0b 51       	subi	r16, 0x1B	; 27
    4b76:	1f 4f       	sbci	r17, 0xFF	; 255
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e9 51       	subi	r30, 0x19	; 25
    4b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7e:	60 81       	ld	r22, Z
    4b80:	71 81       	ldd	r23, Z+1	; 0x01
    4b82:	82 81       	ldd	r24, Z+2	; 0x02
    4b84:	93 81       	ldd	r25, Z+3	; 0x03
    4b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b8a:	dc 01       	movw	r26, r24
    4b8c:	cb 01       	movw	r24, r22
    4b8e:	f8 01       	movw	r30, r16
    4b90:	91 83       	std	Z+1, r25	; 0x01
    4b92:	80 83       	st	Z, r24
    4b94:	de 01       	movw	r26, r28
    4b96:	af 51       	subi	r26, 0x1F	; 31
    4b98:	bf 4f       	sbci	r27, 0xFF	; 255
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	eb 51       	subi	r30, 0x1B	; 27
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	80 81       	ld	r24, Z
    4ba2:	91 81       	ldd	r25, Z+1	; 0x01
    4ba4:	8d 93       	st	X+, r24
    4ba6:	9c 93       	st	X, r25
    4ba8:	fe 01       	movw	r30, r28
    4baa:	ef 51       	subi	r30, 0x1F	; 31
    4bac:	ff 4f       	sbci	r31, 0xFF	; 255
    4bae:	80 81       	ld	r24, Z
    4bb0:	91 81       	ldd	r25, Z+1	; 0x01
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	f1 f7       	brne	.-4      	; 0x4bb2 <main+0x1a90>
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	ef 51       	subi	r30, 0x1F	; 31
    4bba:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbc:	91 83       	std	Z+1, r25	; 0x01
    4bbe:	80 83       	st	Z, r24
			_delay_ms(300);

			HLCD_vDisplayClear();
    4bc0:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
			HLCD_vSendString("Minutes: ");
    4bc4:	82 e8       	ldi	r24, 0x82	; 130
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
			HLCD_vMoveTo(1,0);
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	60 e0       	ldi	r22, 0x00	; 0
    4bd0:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
    4bd4:	fe 01       	movw	r30, r28
    4bd6:	e3 52       	subi	r30, 0x23	; 35
    4bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	aa ef       	ldi	r26, 0xFA	; 250
    4be0:	b3 e4       	ldi	r27, 0x43	; 67
    4be2:	80 83       	st	Z, r24
    4be4:	91 83       	std	Z+1, r25	; 0x01
    4be6:	a2 83       	std	Z+2, r26	; 0x02
    4be8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bea:	8e 01       	movw	r16, r28
    4bec:	07 52       	subi	r16, 0x27	; 39
    4bee:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf0:	fe 01       	movw	r30, r28
    4bf2:	e3 52       	subi	r30, 0x23	; 35
    4bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf6:	60 81       	ld	r22, Z
    4bf8:	71 81       	ldd	r23, Z+1	; 0x01
    4bfa:	82 81       	ldd	r24, Z+2	; 0x02
    4bfc:	93 81       	ldd	r25, Z+3	; 0x03
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	4a ef       	ldi	r20, 0xFA	; 250
    4c04:	54 e4       	ldi	r21, 0x44	; 68
    4c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c0a:	dc 01       	movw	r26, r24
    4c0c:	cb 01       	movw	r24, r22
    4c0e:	f8 01       	movw	r30, r16
    4c10:	80 83       	st	Z, r24
    4c12:	91 83       	std	Z+1, r25	; 0x01
    4c14:	a2 83       	std	Z+2, r26	; 0x02
    4c16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c18:	fe 01       	movw	r30, r28
    4c1a:	e7 52       	subi	r30, 0x27	; 39
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	60 81       	ld	r22, Z
    4c20:	71 81       	ldd	r23, Z+1	; 0x01
    4c22:	82 81       	ldd	r24, Z+2	; 0x02
    4c24:	93 81       	ldd	r25, Z+3	; 0x03
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	40 e8       	ldi	r20, 0x80	; 128
    4c2c:	5f e3       	ldi	r21, 0x3F	; 63
    4c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c32:	88 23       	and	r24, r24
    4c34:	44 f4       	brge	.+16     	; 0x4c46 <main+0x1b24>
		__ticks = 1;
    4c36:	fe 01       	movw	r30, r28
    4c38:	e9 52       	subi	r30, 0x29	; 41
    4c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	91 83       	std	Z+1, r25	; 0x01
    4c42:	80 83       	st	Z, r24
    4c44:	64 c0       	rjmp	.+200    	; 0x4d0e <main+0x1bec>
	else if (__tmp > 65535)
    4c46:	fe 01       	movw	r30, r28
    4c48:	e7 52       	subi	r30, 0x27	; 39
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	60 81       	ld	r22, Z
    4c4e:	71 81       	ldd	r23, Z+1	; 0x01
    4c50:	82 81       	ldd	r24, Z+2	; 0x02
    4c52:	93 81       	ldd	r25, Z+3	; 0x03
    4c54:	20 e0       	ldi	r18, 0x00	; 0
    4c56:	3f ef       	ldi	r19, 0xFF	; 255
    4c58:	4f e7       	ldi	r20, 0x7F	; 127
    4c5a:	57 e4       	ldi	r21, 0x47	; 71
    4c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c60:	18 16       	cp	r1, r24
    4c62:	0c f0       	brlt	.+2      	; 0x4c66 <main+0x1b44>
    4c64:	43 c0       	rjmp	.+134    	; 0x4cec <main+0x1bca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c66:	fe 01       	movw	r30, r28
    4c68:	e3 52       	subi	r30, 0x23	; 35
    4c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6c:	60 81       	ld	r22, Z
    4c6e:	71 81       	ldd	r23, Z+1	; 0x01
    4c70:	82 81       	ldd	r24, Z+2	; 0x02
    4c72:	93 81       	ldd	r25, Z+3	; 0x03
    4c74:	20 e0       	ldi	r18, 0x00	; 0
    4c76:	30 e0       	ldi	r19, 0x00	; 0
    4c78:	40 e2       	ldi	r20, 0x20	; 32
    4c7a:	51 e4       	ldi	r21, 0x41	; 65
    4c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	8e 01       	movw	r16, r28
    4c86:	09 52       	subi	r16, 0x29	; 41
    4c88:	1f 4f       	sbci	r17, 0xFF	; 255
    4c8a:	bc 01       	movw	r22, r24
    4c8c:	cd 01       	movw	r24, r26
    4c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c92:	dc 01       	movw	r26, r24
    4c94:	cb 01       	movw	r24, r22
    4c96:	f8 01       	movw	r30, r16
    4c98:	91 83       	std	Z+1, r25	; 0x01
    4c9a:	80 83       	st	Z, r24
    4c9c:	1f c0       	rjmp	.+62     	; 0x4cdc <main+0x1bba>
    4c9e:	fe 01       	movw	r30, r28
    4ca0:	eb 52       	subi	r30, 0x2B	; 43
    4ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca4:	88 ec       	ldi	r24, 0xC8	; 200
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	91 83       	std	Z+1, r25	; 0x01
    4caa:	80 83       	st	Z, r24
    4cac:	fe 01       	movw	r30, r28
    4cae:	eb 52       	subi	r30, 0x2B	; 43
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	80 81       	ld	r24, Z
    4cb4:	91 81       	ldd	r25, Z+1	; 0x01
    4cb6:	01 97       	sbiw	r24, 0x01	; 1
    4cb8:	f1 f7       	brne	.-4      	; 0x4cb6 <main+0x1b94>
    4cba:	fe 01       	movw	r30, r28
    4cbc:	eb 52       	subi	r30, 0x2B	; 43
    4cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc0:	91 83       	std	Z+1, r25	; 0x01
    4cc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc4:	de 01       	movw	r26, r28
    4cc6:	a9 52       	subi	r26, 0x29	; 41
    4cc8:	bf 4f       	sbci	r27, 0xFF	; 255
    4cca:	fe 01       	movw	r30, r28
    4ccc:	e9 52       	subi	r30, 0x29	; 41
    4cce:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd0:	80 81       	ld	r24, Z
    4cd2:	91 81       	ldd	r25, Z+1	; 0x01
    4cd4:	01 97       	sbiw	r24, 0x01	; 1
    4cd6:	11 96       	adiw	r26, 0x01	; 1
    4cd8:	9c 93       	st	X, r25
    4cda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cdc:	fe 01       	movw	r30, r28
    4cde:	e9 52       	subi	r30, 0x29	; 41
    4ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce2:	80 81       	ld	r24, Z
    4ce4:	91 81       	ldd	r25, Z+1	; 0x01
    4ce6:	00 97       	sbiw	r24, 0x00	; 0
    4ce8:	d1 f6       	brne	.-76     	; 0x4c9e <main+0x1b7c>
    4cea:	27 c0       	rjmp	.+78     	; 0x4d3a <main+0x1c18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cec:	8e 01       	movw	r16, r28
    4cee:	09 52       	subi	r16, 0x29	; 41
    4cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    4cf2:	fe 01       	movw	r30, r28
    4cf4:	e7 52       	subi	r30, 0x27	; 39
    4cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf8:	60 81       	ld	r22, Z
    4cfa:	71 81       	ldd	r23, Z+1	; 0x01
    4cfc:	82 81       	ldd	r24, Z+2	; 0x02
    4cfe:	93 81       	ldd	r25, Z+3	; 0x03
    4d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d04:	dc 01       	movw	r26, r24
    4d06:	cb 01       	movw	r24, r22
    4d08:	f8 01       	movw	r30, r16
    4d0a:	91 83       	std	Z+1, r25	; 0x01
    4d0c:	80 83       	st	Z, r24
    4d0e:	de 01       	movw	r26, r28
    4d10:	ad 52       	subi	r26, 0x2D	; 45
    4d12:	bf 4f       	sbci	r27, 0xFF	; 255
    4d14:	fe 01       	movw	r30, r28
    4d16:	e9 52       	subi	r30, 0x29	; 41
    4d18:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1a:	80 81       	ld	r24, Z
    4d1c:	91 81       	ldd	r25, Z+1	; 0x01
    4d1e:	8d 93       	st	X+, r24
    4d20:	9c 93       	st	X, r25
    4d22:	fe 01       	movw	r30, r28
    4d24:	ed 52       	subi	r30, 0x2D	; 45
    4d26:	ff 4f       	sbci	r31, 0xFF	; 255
    4d28:	80 81       	ld	r24, Z
    4d2a:	91 81       	ldd	r25, Z+1	; 0x01
    4d2c:	01 97       	sbiw	r24, 0x01	; 1
    4d2e:	f1 f7       	brne	.-4      	; 0x4d2c <main+0x1c0a>
    4d30:	fe 01       	movw	r30, r28
    4d32:	ed 52       	subi	r30, 0x2D	; 45
    4d34:	ff 4f       	sbci	r31, 0xFF	; 255
    4d36:	91 83       	std	Z+1, r25	; 0x01
    4d38:	80 83       	st	Z, r24
			_delay_ms(500);
			do{
				ALARM_M_first_digit=HKPD_U8GetPressedKey();
    4d3a:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    4d3e:	fe 01       	movw	r30, r28
    4d40:	ee 53       	subi	r30, 0x3E	; 62
    4d42:	fe 4f       	sbci	r31, 0xFE	; 254
    4d44:	80 83       	st	Z, r24

			  } while (ALARM_M_first_digit == NOTPRESSED);
    4d46:	fe 01       	movw	r30, r28
    4d48:	ee 53       	subi	r30, 0x3E	; 62
    4d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d4c:	80 81       	ld	r24, Z
    4d4e:	82 33       	cpi	r24, 0x32	; 50
    4d50:	a1 f3       	breq	.-24     	; 0x4d3a <main+0x1c18>
				HLCD_vSendNumber(ALARM_M_first_digit);
    4d52:	fe 01       	movw	r30, r28
    4d54:	ee 53       	subi	r30, 0x3E	; 62
    4d56:	fe 4f       	sbci	r31, 0xFE	; 254
    4d58:	80 81       	ld	r24, Z
    4d5a:	88 2f       	mov	r24, r24
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	a0 e0       	ldi	r26, 0x00	; 0
    4d60:	b0 e0       	ldi	r27, 0x00	; 0
    4d62:	bc 01       	movw	r22, r24
    4d64:	cd 01       	movw	r24, r26
    4d66:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
    4d6a:	fe 01       	movw	r30, r28
    4d6c:	e1 53       	subi	r30, 0x31	; 49
    4d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	a6 e9       	ldi	r26, 0x96	; 150
    4d76:	b3 e4       	ldi	r27, 0x43	; 67
    4d78:	80 83       	st	Z, r24
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	a2 83       	std	Z+2, r26	; 0x02
    4d7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d80:	8e 01       	movw	r16, r28
    4d82:	05 53       	subi	r16, 0x35	; 53
    4d84:	1f 4f       	sbci	r17, 0xFF	; 255
    4d86:	fe 01       	movw	r30, r28
    4d88:	e1 53       	subi	r30, 0x31	; 49
    4d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8c:	60 81       	ld	r22, Z
    4d8e:	71 81       	ldd	r23, Z+1	; 0x01
    4d90:	82 81       	ldd	r24, Z+2	; 0x02
    4d92:	93 81       	ldd	r25, Z+3	; 0x03
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	4a ef       	ldi	r20, 0xFA	; 250
    4d9a:	54 e4       	ldi	r21, 0x44	; 68
    4d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4da0:	dc 01       	movw	r26, r24
    4da2:	cb 01       	movw	r24, r22
    4da4:	f8 01       	movw	r30, r16
    4da6:	80 83       	st	Z, r24
    4da8:	91 83       	std	Z+1, r25	; 0x01
    4daa:	a2 83       	std	Z+2, r26	; 0x02
    4dac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dae:	fe 01       	movw	r30, r28
    4db0:	e5 53       	subi	r30, 0x35	; 53
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	60 81       	ld	r22, Z
    4db6:	71 81       	ldd	r23, Z+1	; 0x01
    4db8:	82 81       	ldd	r24, Z+2	; 0x02
    4dba:	93 81       	ldd	r25, Z+3	; 0x03
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	40 e8       	ldi	r20, 0x80	; 128
    4dc2:	5f e3       	ldi	r21, 0x3F	; 63
    4dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4dc8:	88 23       	and	r24, r24
    4dca:	44 f4       	brge	.+16     	; 0x4ddc <main+0x1cba>
		__ticks = 1;
    4dcc:	fe 01       	movw	r30, r28
    4dce:	e7 53       	subi	r30, 0x37	; 55
    4dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	91 83       	std	Z+1, r25	; 0x01
    4dd8:	80 83       	st	Z, r24
    4dda:	64 c0       	rjmp	.+200    	; 0x4ea4 <main+0x1d82>
	else if (__tmp > 65535)
    4ddc:	fe 01       	movw	r30, r28
    4dde:	e5 53       	subi	r30, 0x35	; 53
    4de0:	ff 4f       	sbci	r31, 0xFF	; 255
    4de2:	60 81       	ld	r22, Z
    4de4:	71 81       	ldd	r23, Z+1	; 0x01
    4de6:	82 81       	ldd	r24, Z+2	; 0x02
    4de8:	93 81       	ldd	r25, Z+3	; 0x03
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	3f ef       	ldi	r19, 0xFF	; 255
    4dee:	4f e7       	ldi	r20, 0x7F	; 127
    4df0:	57 e4       	ldi	r21, 0x47	; 71
    4df2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4df6:	18 16       	cp	r1, r24
    4df8:	0c f0       	brlt	.+2      	; 0x4dfc <main+0x1cda>
    4dfa:	43 c0       	rjmp	.+134    	; 0x4e82 <main+0x1d60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	e1 53       	subi	r30, 0x31	; 49
    4e00:	ff 4f       	sbci	r31, 0xFF	; 255
    4e02:	60 81       	ld	r22, Z
    4e04:	71 81       	ldd	r23, Z+1	; 0x01
    4e06:	82 81       	ldd	r24, Z+2	; 0x02
    4e08:	93 81       	ldd	r25, Z+3	; 0x03
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	40 e2       	ldi	r20, 0x20	; 32
    4e10:	51 e4       	ldi	r21, 0x41	; 65
    4e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	8e 01       	movw	r16, r28
    4e1c:	07 53       	subi	r16, 0x37	; 55
    4e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e20:	bc 01       	movw	r22, r24
    4e22:	cd 01       	movw	r24, r26
    4e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e28:	dc 01       	movw	r26, r24
    4e2a:	cb 01       	movw	r24, r22
    4e2c:	f8 01       	movw	r30, r16
    4e2e:	91 83       	std	Z+1, r25	; 0x01
    4e30:	80 83       	st	Z, r24
    4e32:	1f c0       	rjmp	.+62     	; 0x4e72 <main+0x1d50>
    4e34:	fe 01       	movw	r30, r28
    4e36:	e9 53       	subi	r30, 0x39	; 57
    4e38:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3a:	88 ec       	ldi	r24, 0xC8	; 200
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	91 83       	std	Z+1, r25	; 0x01
    4e40:	80 83       	st	Z, r24
    4e42:	fe 01       	movw	r30, r28
    4e44:	e9 53       	subi	r30, 0x39	; 57
    4e46:	ff 4f       	sbci	r31, 0xFF	; 255
    4e48:	80 81       	ld	r24, Z
    4e4a:	91 81       	ldd	r25, Z+1	; 0x01
    4e4c:	01 97       	sbiw	r24, 0x01	; 1
    4e4e:	f1 f7       	brne	.-4      	; 0x4e4c <main+0x1d2a>
    4e50:	fe 01       	movw	r30, r28
    4e52:	e9 53       	subi	r30, 0x39	; 57
    4e54:	ff 4f       	sbci	r31, 0xFF	; 255
    4e56:	91 83       	std	Z+1, r25	; 0x01
    4e58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e5a:	de 01       	movw	r26, r28
    4e5c:	a7 53       	subi	r26, 0x37	; 55
    4e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    4e60:	fe 01       	movw	r30, r28
    4e62:	e7 53       	subi	r30, 0x37	; 55
    4e64:	ff 4f       	sbci	r31, 0xFF	; 255
    4e66:	80 81       	ld	r24, Z
    4e68:	91 81       	ldd	r25, Z+1	; 0x01
    4e6a:	01 97       	sbiw	r24, 0x01	; 1
    4e6c:	11 96       	adiw	r26, 0x01	; 1
    4e6e:	9c 93       	st	X, r25
    4e70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e72:	fe 01       	movw	r30, r28
    4e74:	e7 53       	subi	r30, 0x37	; 55
    4e76:	ff 4f       	sbci	r31, 0xFF	; 255
    4e78:	80 81       	ld	r24, Z
    4e7a:	91 81       	ldd	r25, Z+1	; 0x01
    4e7c:	00 97       	sbiw	r24, 0x00	; 0
    4e7e:	d1 f6       	brne	.-76     	; 0x4e34 <main+0x1d12>
    4e80:	27 c0       	rjmp	.+78     	; 0x4ed0 <main+0x1dae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e82:	8e 01       	movw	r16, r28
    4e84:	07 53       	subi	r16, 0x37	; 55
    4e86:	1f 4f       	sbci	r17, 0xFF	; 255
    4e88:	fe 01       	movw	r30, r28
    4e8a:	e5 53       	subi	r30, 0x35	; 53
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	60 81       	ld	r22, Z
    4e90:	71 81       	ldd	r23, Z+1	; 0x01
    4e92:	82 81       	ldd	r24, Z+2	; 0x02
    4e94:	93 81       	ldd	r25, Z+3	; 0x03
    4e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e9a:	dc 01       	movw	r26, r24
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	f8 01       	movw	r30, r16
    4ea0:	91 83       	std	Z+1, r25	; 0x01
    4ea2:	80 83       	st	Z, r24
    4ea4:	de 01       	movw	r26, r28
    4ea6:	ab 53       	subi	r26, 0x3B	; 59
    4ea8:	bf 4f       	sbci	r27, 0xFF	; 255
    4eaa:	fe 01       	movw	r30, r28
    4eac:	e7 53       	subi	r30, 0x37	; 55
    4eae:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb0:	80 81       	ld	r24, Z
    4eb2:	91 81       	ldd	r25, Z+1	; 0x01
    4eb4:	8d 93       	st	X+, r24
    4eb6:	9c 93       	st	X, r25
    4eb8:	fe 01       	movw	r30, r28
    4eba:	eb 53       	subi	r30, 0x3B	; 59
    4ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebe:	80 81       	ld	r24, Z
    4ec0:	91 81       	ldd	r25, Z+1	; 0x01
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <main+0x1da0>
    4ec6:	fe 01       	movw	r30, r28
    4ec8:	eb 53       	subi	r30, 0x3B	; 59
    4eca:	ff 4f       	sbci	r31, 0xFF	; 255
    4ecc:	91 83       	std	Z+1, r25	; 0x01
    4ece:	80 83       	st	Z, r24
				_delay_ms(300);
			do{
				ALARM_M_second_digit=HKPD_U8GetPressedKey();
    4ed0:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <HKPD_U8GetPressedKey>
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	ef 53       	subi	r30, 0x3F	; 63
    4ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    4eda:	80 83       	st	Z, r24
			  } while (ALARM_M_second_digit == NOTPRESSED);
    4edc:	fe 01       	movw	r30, r28
    4ede:	ef 53       	subi	r30, 0x3F	; 63
    4ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ee2:	80 81       	ld	r24, Z
    4ee4:	82 33       	cpi	r24, 0x32	; 50
    4ee6:	a1 f3       	breq	.-24     	; 0x4ed0 <main+0x1dae>
				HLCD_vSendNumber(ALARM_M_second_digit);
    4ee8:	fe 01       	movw	r30, r28
    4eea:	ef 53       	subi	r30, 0x3F	; 63
    4eec:	fe 4f       	sbci	r31, 0xFE	; 254
    4eee:	80 81       	ld	r24, Z
    4ef0:	88 2f       	mov	r24, r24
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	a0 e0       	ldi	r26, 0x00	; 0
    4ef6:	b0 e0       	ldi	r27, 0x00	; 0
    4ef8:	bc 01       	movw	r22, r24
    4efa:	cd 01       	movw	r24, r26
    4efc:	0e 94 80 16 	call	0x2d00	; 0x2d00 <HLCD_vSendNumber>
				A_minutes_counter=combine(ALARM_M_first_digit,ALARM_M_second_digit);
    4f00:	fe 01       	movw	r30, r28
    4f02:	ee 53       	subi	r30, 0x3E	; 62
    4f04:	fe 4f       	sbci	r31, 0xFE	; 254
    4f06:	80 81       	ld	r24, Z
    4f08:	48 2f       	mov	r20, r24
    4f0a:	50 e0       	ldi	r21, 0x00	; 0
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	ef 53       	subi	r30, 0x3F	; 63
    4f10:	fe 4f       	sbci	r31, 0xFE	; 254
    4f12:	80 81       	ld	r24, Z
    4f14:	28 2f       	mov	r18, r24
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	ca 01       	movw	r24, r20
    4f1a:	b9 01       	movw	r22, r18
    4f1c:	0e 94 15 18 	call	0x302a	; 0x302a <combine>
    4f20:	80 93 c3 00 	sts	0x00C3, r24
    4f24:	fe 01       	movw	r30, r28
    4f26:	ef 53       	subi	r30, 0x3F	; 63
    4f28:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2a:	80 e0       	ldi	r24, 0x00	; 0
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	a6 e9       	ldi	r26, 0x96	; 150
    4f30:	b3 e4       	ldi	r27, 0x43	; 67
    4f32:	80 83       	st	Z, r24
    4f34:	91 83       	std	Z+1, r25	; 0x01
    4f36:	a2 83       	std	Z+2, r26	; 0x02
    4f38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f3a:	8e 01       	movw	r16, r28
    4f3c:	03 54       	subi	r16, 0x43	; 67
    4f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f40:	fe 01       	movw	r30, r28
    4f42:	ef 53       	subi	r30, 0x3F	; 63
    4f44:	ff 4f       	sbci	r31, 0xFF	; 255
    4f46:	60 81       	ld	r22, Z
    4f48:	71 81       	ldd	r23, Z+1	; 0x01
    4f4a:	82 81       	ldd	r24, Z+2	; 0x02
    4f4c:	93 81       	ldd	r25, Z+3	; 0x03
    4f4e:	20 e0       	ldi	r18, 0x00	; 0
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	4a ef       	ldi	r20, 0xFA	; 250
    4f54:	54 e4       	ldi	r21, 0x44	; 68
    4f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	cb 01       	movw	r24, r22
    4f5e:	f8 01       	movw	r30, r16
    4f60:	80 83       	st	Z, r24
    4f62:	91 83       	std	Z+1, r25	; 0x01
    4f64:	a2 83       	std	Z+2, r26	; 0x02
    4f66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f68:	fe 01       	movw	r30, r28
    4f6a:	e3 54       	subi	r30, 0x43	; 67
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	60 81       	ld	r22, Z
    4f70:	71 81       	ldd	r23, Z+1	; 0x01
    4f72:	82 81       	ldd	r24, Z+2	; 0x02
    4f74:	93 81       	ldd	r25, Z+3	; 0x03
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	40 e8       	ldi	r20, 0x80	; 128
    4f7c:	5f e3       	ldi	r21, 0x3F	; 63
    4f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f82:	88 23       	and	r24, r24
    4f84:	44 f4       	brge	.+16     	; 0x4f96 <main+0x1e74>
		__ticks = 1;
    4f86:	fe 01       	movw	r30, r28
    4f88:	e5 54       	subi	r30, 0x45	; 69
    4f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	91 83       	std	Z+1, r25	; 0x01
    4f92:	80 83       	st	Z, r24
    4f94:	64 c0       	rjmp	.+200    	; 0x505e <main+0x1f3c>
	else if (__tmp > 65535)
    4f96:	fe 01       	movw	r30, r28
    4f98:	e3 54       	subi	r30, 0x43	; 67
    4f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9c:	60 81       	ld	r22, Z
    4f9e:	71 81       	ldd	r23, Z+1	; 0x01
    4fa0:	82 81       	ldd	r24, Z+2	; 0x02
    4fa2:	93 81       	ldd	r25, Z+3	; 0x03
    4fa4:	20 e0       	ldi	r18, 0x00	; 0
    4fa6:	3f ef       	ldi	r19, 0xFF	; 255
    4fa8:	4f e7       	ldi	r20, 0x7F	; 127
    4faa:	57 e4       	ldi	r21, 0x47	; 71
    4fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fb0:	18 16       	cp	r1, r24
    4fb2:	0c f0       	brlt	.+2      	; 0x4fb6 <main+0x1e94>
    4fb4:	43 c0       	rjmp	.+134    	; 0x503c <main+0x1f1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb6:	fe 01       	movw	r30, r28
    4fb8:	ef 53       	subi	r30, 0x3F	; 63
    4fba:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbc:	60 81       	ld	r22, Z
    4fbe:	71 81       	ldd	r23, Z+1	; 0x01
    4fc0:	82 81       	ldd	r24, Z+2	; 0x02
    4fc2:	93 81       	ldd	r25, Z+3	; 0x03
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	40 e2       	ldi	r20, 0x20	; 32
    4fca:	51 e4       	ldi	r21, 0x41	; 65
    4fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	8e 01       	movw	r16, r28
    4fd6:	05 54       	subi	r16, 0x45	; 69
    4fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fda:	bc 01       	movw	r22, r24
    4fdc:	cd 01       	movw	r24, r26
    4fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe2:	dc 01       	movw	r26, r24
    4fe4:	cb 01       	movw	r24, r22
    4fe6:	f8 01       	movw	r30, r16
    4fe8:	91 83       	std	Z+1, r25	; 0x01
    4fea:	80 83       	st	Z, r24
    4fec:	1f c0       	rjmp	.+62     	; 0x502c <main+0x1f0a>
    4fee:	fe 01       	movw	r30, r28
    4ff0:	e7 54       	subi	r30, 0x47	; 71
    4ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff4:	88 ec       	ldi	r24, 0xC8	; 200
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	91 83       	std	Z+1, r25	; 0x01
    4ffa:	80 83       	st	Z, r24
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	e7 54       	subi	r30, 0x47	; 71
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	80 81       	ld	r24, Z
    5004:	91 81       	ldd	r25, Z+1	; 0x01
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	f1 f7       	brne	.-4      	; 0x5006 <main+0x1ee4>
    500a:	fe 01       	movw	r30, r28
    500c:	e7 54       	subi	r30, 0x47	; 71
    500e:	ff 4f       	sbci	r31, 0xFF	; 255
    5010:	91 83       	std	Z+1, r25	; 0x01
    5012:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5014:	de 01       	movw	r26, r28
    5016:	a5 54       	subi	r26, 0x45	; 69
    5018:	bf 4f       	sbci	r27, 0xFF	; 255
    501a:	fe 01       	movw	r30, r28
    501c:	e5 54       	subi	r30, 0x45	; 69
    501e:	ff 4f       	sbci	r31, 0xFF	; 255
    5020:	80 81       	ld	r24, Z
    5022:	91 81       	ldd	r25, Z+1	; 0x01
    5024:	01 97       	sbiw	r24, 0x01	; 1
    5026:	11 96       	adiw	r26, 0x01	; 1
    5028:	9c 93       	st	X, r25
    502a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502c:	fe 01       	movw	r30, r28
    502e:	e5 54       	subi	r30, 0x45	; 69
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	80 81       	ld	r24, Z
    5034:	91 81       	ldd	r25, Z+1	; 0x01
    5036:	00 97       	sbiw	r24, 0x00	; 0
    5038:	d1 f6       	brne	.-76     	; 0x4fee <main+0x1ecc>
    503a:	27 c0       	rjmp	.+78     	; 0x508a <main+0x1f68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    503c:	8e 01       	movw	r16, r28
    503e:	05 54       	subi	r16, 0x45	; 69
    5040:	1f 4f       	sbci	r17, 0xFF	; 255
    5042:	fe 01       	movw	r30, r28
    5044:	e3 54       	subi	r30, 0x43	; 67
    5046:	ff 4f       	sbci	r31, 0xFF	; 255
    5048:	60 81       	ld	r22, Z
    504a:	71 81       	ldd	r23, Z+1	; 0x01
    504c:	82 81       	ldd	r24, Z+2	; 0x02
    504e:	93 81       	ldd	r25, Z+3	; 0x03
    5050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5054:	dc 01       	movw	r26, r24
    5056:	cb 01       	movw	r24, r22
    5058:	f8 01       	movw	r30, r16
    505a:	91 83       	std	Z+1, r25	; 0x01
    505c:	80 83       	st	Z, r24
    505e:	de 01       	movw	r26, r28
    5060:	a9 54       	subi	r26, 0x49	; 73
    5062:	bf 4f       	sbci	r27, 0xFF	; 255
    5064:	fe 01       	movw	r30, r28
    5066:	e5 54       	subi	r30, 0x45	; 69
    5068:	ff 4f       	sbci	r31, 0xFF	; 255
    506a:	80 81       	ld	r24, Z
    506c:	91 81       	ldd	r25, Z+1	; 0x01
    506e:	8d 93       	st	X+, r24
    5070:	9c 93       	st	X, r25
    5072:	fe 01       	movw	r30, r28
    5074:	e9 54       	subi	r30, 0x49	; 73
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	80 81       	ld	r24, Z
    507a:	91 81       	ldd	r25, Z+1	; 0x01
    507c:	01 97       	sbiw	r24, 0x01	; 1
    507e:	f1 f7       	brne	.-4      	; 0x507c <main+0x1f5a>
    5080:	fe 01       	movw	r30, r28
    5082:	e9 54       	subi	r30, 0x49	; 73
    5084:	ff 4f       	sbci	r31, 0xFF	; 255
    5086:	91 83       	std	Z+1, r25	; 0x01
    5088:	80 83       	st	Z, r24
				_delay_ms(300);
				HLCD_vDisplayClear();
    508a:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
				HLCD_vSendString("1: Set Clock");
    508e:	80 e6       	ldi	r24, 0x60	; 96
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
				HLCD_vMoveTo(1,0);
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
				HLCD_vSendString("2: Set Alarm");
    509e:	8d e6       	ldi	r24, 0x6D	; 109
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
				MUSART_vTransmitData(88);
    50a6:	88 e5       	ldi	r24, 0x58	; 88
    50a8:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    50ac:	fe 01       	movw	r30, r28
    50ae:	ed 54       	subi	r30, 0x4D	; 77
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	80 e0       	ldi	r24, 0x00	; 0
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	aa ef       	ldi	r26, 0xFA	; 250
    50b8:	b3 e4       	ldi	r27, 0x43	; 67
    50ba:	80 83       	st	Z, r24
    50bc:	91 83       	std	Z+1, r25	; 0x01
    50be:	a2 83       	std	Z+2, r26	; 0x02
    50c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50c2:	8e 01       	movw	r16, r28
    50c4:	01 55       	subi	r16, 0x51	; 81
    50c6:	1f 4f       	sbci	r17, 0xFF	; 255
    50c8:	fe 01       	movw	r30, r28
    50ca:	ed 54       	subi	r30, 0x4D	; 77
    50cc:	ff 4f       	sbci	r31, 0xFF	; 255
    50ce:	60 81       	ld	r22, Z
    50d0:	71 81       	ldd	r23, Z+1	; 0x01
    50d2:	82 81       	ldd	r24, Z+2	; 0x02
    50d4:	93 81       	ldd	r25, Z+3	; 0x03
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	30 e0       	ldi	r19, 0x00	; 0
    50da:	4a ef       	ldi	r20, 0xFA	; 250
    50dc:	54 e4       	ldi	r21, 0x44	; 68
    50de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	f8 01       	movw	r30, r16
    50e8:	80 83       	st	Z, r24
    50ea:	91 83       	std	Z+1, r25	; 0x01
    50ec:	a2 83       	std	Z+2, r26	; 0x02
    50ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50f0:	fe 01       	movw	r30, r28
    50f2:	e1 55       	subi	r30, 0x51	; 81
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	60 81       	ld	r22, Z
    50f8:	71 81       	ldd	r23, Z+1	; 0x01
    50fa:	82 81       	ldd	r24, Z+2	; 0x02
    50fc:	93 81       	ldd	r25, Z+3	; 0x03
    50fe:	20 e0       	ldi	r18, 0x00	; 0
    5100:	30 e0       	ldi	r19, 0x00	; 0
    5102:	40 e8       	ldi	r20, 0x80	; 128
    5104:	5f e3       	ldi	r21, 0x3F	; 63
    5106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    510a:	88 23       	and	r24, r24
    510c:	44 f4       	brge	.+16     	; 0x511e <main+0x1ffc>
		__ticks = 1;
    510e:	fe 01       	movw	r30, r28
    5110:	e3 55       	subi	r30, 0x53	; 83
    5112:	ff 4f       	sbci	r31, 0xFF	; 255
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	91 83       	std	Z+1, r25	; 0x01
    511a:	80 83       	st	Z, r24
    511c:	64 c0       	rjmp	.+200    	; 0x51e6 <main+0x20c4>
	else if (__tmp > 65535)
    511e:	fe 01       	movw	r30, r28
    5120:	e1 55       	subi	r30, 0x51	; 81
    5122:	ff 4f       	sbci	r31, 0xFF	; 255
    5124:	60 81       	ld	r22, Z
    5126:	71 81       	ldd	r23, Z+1	; 0x01
    5128:	82 81       	ldd	r24, Z+2	; 0x02
    512a:	93 81       	ldd	r25, Z+3	; 0x03
    512c:	20 e0       	ldi	r18, 0x00	; 0
    512e:	3f ef       	ldi	r19, 0xFF	; 255
    5130:	4f e7       	ldi	r20, 0x7F	; 127
    5132:	57 e4       	ldi	r21, 0x47	; 71
    5134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5138:	18 16       	cp	r1, r24
    513a:	0c f0       	brlt	.+2      	; 0x513e <main+0x201c>
    513c:	43 c0       	rjmp	.+134    	; 0x51c4 <main+0x20a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    513e:	fe 01       	movw	r30, r28
    5140:	ed 54       	subi	r30, 0x4D	; 77
    5142:	ff 4f       	sbci	r31, 0xFF	; 255
    5144:	60 81       	ld	r22, Z
    5146:	71 81       	ldd	r23, Z+1	; 0x01
    5148:	82 81       	ldd	r24, Z+2	; 0x02
    514a:	93 81       	ldd	r25, Z+3	; 0x03
    514c:	20 e0       	ldi	r18, 0x00	; 0
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	40 e2       	ldi	r20, 0x20	; 32
    5152:	51 e4       	ldi	r21, 0x41	; 65
    5154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5158:	dc 01       	movw	r26, r24
    515a:	cb 01       	movw	r24, r22
    515c:	8e 01       	movw	r16, r28
    515e:	03 55       	subi	r16, 0x53	; 83
    5160:	1f 4f       	sbci	r17, 0xFF	; 255
    5162:	bc 01       	movw	r22, r24
    5164:	cd 01       	movw	r24, r26
    5166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    516a:	dc 01       	movw	r26, r24
    516c:	cb 01       	movw	r24, r22
    516e:	f8 01       	movw	r30, r16
    5170:	91 83       	std	Z+1, r25	; 0x01
    5172:	80 83       	st	Z, r24
    5174:	1f c0       	rjmp	.+62     	; 0x51b4 <main+0x2092>
    5176:	fe 01       	movw	r30, r28
    5178:	e5 55       	subi	r30, 0x55	; 85
    517a:	ff 4f       	sbci	r31, 0xFF	; 255
    517c:	88 ec       	ldi	r24, 0xC8	; 200
    517e:	90 e0       	ldi	r25, 0x00	; 0
    5180:	91 83       	std	Z+1, r25	; 0x01
    5182:	80 83       	st	Z, r24
    5184:	fe 01       	movw	r30, r28
    5186:	e5 55       	subi	r30, 0x55	; 85
    5188:	ff 4f       	sbci	r31, 0xFF	; 255
    518a:	80 81       	ld	r24, Z
    518c:	91 81       	ldd	r25, Z+1	; 0x01
    518e:	01 97       	sbiw	r24, 0x01	; 1
    5190:	f1 f7       	brne	.-4      	; 0x518e <main+0x206c>
    5192:	fe 01       	movw	r30, r28
    5194:	e5 55       	subi	r30, 0x55	; 85
    5196:	ff 4f       	sbci	r31, 0xFF	; 255
    5198:	91 83       	std	Z+1, r25	; 0x01
    519a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    519c:	de 01       	movw	r26, r28
    519e:	a3 55       	subi	r26, 0x53	; 83
    51a0:	bf 4f       	sbci	r27, 0xFF	; 255
    51a2:	fe 01       	movw	r30, r28
    51a4:	e3 55       	subi	r30, 0x53	; 83
    51a6:	ff 4f       	sbci	r31, 0xFF	; 255
    51a8:	80 81       	ld	r24, Z
    51aa:	91 81       	ldd	r25, Z+1	; 0x01
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	11 96       	adiw	r26, 0x01	; 1
    51b0:	9c 93       	st	X, r25
    51b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51b4:	fe 01       	movw	r30, r28
    51b6:	e3 55       	subi	r30, 0x53	; 83
    51b8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ba:	80 81       	ld	r24, Z
    51bc:	91 81       	ldd	r25, Z+1	; 0x01
    51be:	00 97       	sbiw	r24, 0x00	; 0
    51c0:	d1 f6       	brne	.-76     	; 0x5176 <main+0x2054>
    51c2:	27 c0       	rjmp	.+78     	; 0x5212 <main+0x20f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51c4:	8e 01       	movw	r16, r28
    51c6:	03 55       	subi	r16, 0x53	; 83
    51c8:	1f 4f       	sbci	r17, 0xFF	; 255
    51ca:	fe 01       	movw	r30, r28
    51cc:	e1 55       	subi	r30, 0x51	; 81
    51ce:	ff 4f       	sbci	r31, 0xFF	; 255
    51d0:	60 81       	ld	r22, Z
    51d2:	71 81       	ldd	r23, Z+1	; 0x01
    51d4:	82 81       	ldd	r24, Z+2	; 0x02
    51d6:	93 81       	ldd	r25, Z+3	; 0x03
    51d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51dc:	dc 01       	movw	r26, r24
    51de:	cb 01       	movw	r24, r22
    51e0:	f8 01       	movw	r30, r16
    51e2:	91 83       	std	Z+1, r25	; 0x01
    51e4:	80 83       	st	Z, r24
    51e6:	de 01       	movw	r26, r28
    51e8:	a7 55       	subi	r26, 0x57	; 87
    51ea:	bf 4f       	sbci	r27, 0xFF	; 255
    51ec:	fe 01       	movw	r30, r28
    51ee:	e3 55       	subi	r30, 0x53	; 83
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	80 81       	ld	r24, Z
    51f4:	91 81       	ldd	r25, Z+1	; 0x01
    51f6:	8d 93       	st	X+, r24
    51f8:	9c 93       	st	X, r25
    51fa:	fe 01       	movw	r30, r28
    51fc:	e7 55       	subi	r30, 0x57	; 87
    51fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5200:	80 81       	ld	r24, Z
    5202:	91 81       	ldd	r25, Z+1	; 0x01
    5204:	01 97       	sbiw	r24, 0x01	; 1
    5206:	f1 f7       	brne	.-4      	; 0x5204 <main+0x20e2>
    5208:	fe 01       	movw	r30, r28
    520a:	e7 55       	subi	r30, 0x57	; 87
    520c:	ff 4f       	sbci	r31, 0xFF	; 255
    520e:	91 83       	std	Z+1, r25	; 0x01
    5210:	80 83       	st	Z, r24
				_delay_ms(500);
				MUSART_vTransmitData(A_hours_counter);
    5212:	80 91 c2 00 	lds	r24, 0x00C2
    5216:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    521a:	fe 01       	movw	r30, r28
    521c:	eb 55       	subi	r30, 0x5B	; 91
    521e:	ff 4f       	sbci	r31, 0xFF	; 255
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	aa ef       	ldi	r26, 0xFA	; 250
    5226:	b3 e4       	ldi	r27, 0x43	; 67
    5228:	80 83       	st	Z, r24
    522a:	91 83       	std	Z+1, r25	; 0x01
    522c:	a2 83       	std	Z+2, r26	; 0x02
    522e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5230:	8e 01       	movw	r16, r28
    5232:	0f 55       	subi	r16, 0x5F	; 95
    5234:	1f 4f       	sbci	r17, 0xFF	; 255
    5236:	fe 01       	movw	r30, r28
    5238:	eb 55       	subi	r30, 0x5B	; 91
    523a:	ff 4f       	sbci	r31, 0xFF	; 255
    523c:	60 81       	ld	r22, Z
    523e:	71 81       	ldd	r23, Z+1	; 0x01
    5240:	82 81       	ldd	r24, Z+2	; 0x02
    5242:	93 81       	ldd	r25, Z+3	; 0x03
    5244:	20 e0       	ldi	r18, 0x00	; 0
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	4a ef       	ldi	r20, 0xFA	; 250
    524a:	54 e4       	ldi	r21, 0x44	; 68
    524c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5250:	dc 01       	movw	r26, r24
    5252:	cb 01       	movw	r24, r22
    5254:	f8 01       	movw	r30, r16
    5256:	80 83       	st	Z, r24
    5258:	91 83       	std	Z+1, r25	; 0x01
    525a:	a2 83       	std	Z+2, r26	; 0x02
    525c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    525e:	fe 01       	movw	r30, r28
    5260:	ef 55       	subi	r30, 0x5F	; 95
    5262:	ff 4f       	sbci	r31, 0xFF	; 255
    5264:	60 81       	ld	r22, Z
    5266:	71 81       	ldd	r23, Z+1	; 0x01
    5268:	82 81       	ldd	r24, Z+2	; 0x02
    526a:	93 81       	ldd	r25, Z+3	; 0x03
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 e8       	ldi	r20, 0x80	; 128
    5272:	5f e3       	ldi	r21, 0x3F	; 63
    5274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5278:	88 23       	and	r24, r24
    527a:	44 f4       	brge	.+16     	; 0x528c <main+0x216a>
		__ticks = 1;
    527c:	fe 01       	movw	r30, r28
    527e:	e1 56       	subi	r30, 0x61	; 97
    5280:	ff 4f       	sbci	r31, 0xFF	; 255
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	91 83       	std	Z+1, r25	; 0x01
    5288:	80 83       	st	Z, r24
    528a:	64 c0       	rjmp	.+200    	; 0x5354 <main+0x2232>
	else if (__tmp > 65535)
    528c:	fe 01       	movw	r30, r28
    528e:	ef 55       	subi	r30, 0x5F	; 95
    5290:	ff 4f       	sbci	r31, 0xFF	; 255
    5292:	60 81       	ld	r22, Z
    5294:	71 81       	ldd	r23, Z+1	; 0x01
    5296:	82 81       	ldd	r24, Z+2	; 0x02
    5298:	93 81       	ldd	r25, Z+3	; 0x03
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	3f ef       	ldi	r19, 0xFF	; 255
    529e:	4f e7       	ldi	r20, 0x7F	; 127
    52a0:	57 e4       	ldi	r21, 0x47	; 71
    52a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52a6:	18 16       	cp	r1, r24
    52a8:	0c f0       	brlt	.+2      	; 0x52ac <main+0x218a>
    52aa:	43 c0       	rjmp	.+134    	; 0x5332 <main+0x2210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ac:	fe 01       	movw	r30, r28
    52ae:	eb 55       	subi	r30, 0x5B	; 91
    52b0:	ff 4f       	sbci	r31, 0xFF	; 255
    52b2:	60 81       	ld	r22, Z
    52b4:	71 81       	ldd	r23, Z+1	; 0x01
    52b6:	82 81       	ldd	r24, Z+2	; 0x02
    52b8:	93 81       	ldd	r25, Z+3	; 0x03
    52ba:	20 e0       	ldi	r18, 0x00	; 0
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	40 e2       	ldi	r20, 0x20	; 32
    52c0:	51 e4       	ldi	r21, 0x41	; 65
    52c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52c6:	dc 01       	movw	r26, r24
    52c8:	cb 01       	movw	r24, r22
    52ca:	8e 01       	movw	r16, r28
    52cc:	01 56       	subi	r16, 0x61	; 97
    52ce:	1f 4f       	sbci	r17, 0xFF	; 255
    52d0:	bc 01       	movw	r22, r24
    52d2:	cd 01       	movw	r24, r26
    52d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d8:	dc 01       	movw	r26, r24
    52da:	cb 01       	movw	r24, r22
    52dc:	f8 01       	movw	r30, r16
    52de:	91 83       	std	Z+1, r25	; 0x01
    52e0:	80 83       	st	Z, r24
    52e2:	1f c0       	rjmp	.+62     	; 0x5322 <main+0x2200>
    52e4:	fe 01       	movw	r30, r28
    52e6:	e3 56       	subi	r30, 0x63	; 99
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	88 ec       	ldi	r24, 0xC8	; 200
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	91 83       	std	Z+1, r25	; 0x01
    52f0:	80 83       	st	Z, r24
    52f2:	fe 01       	movw	r30, r28
    52f4:	e3 56       	subi	r30, 0x63	; 99
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	80 81       	ld	r24, Z
    52fa:	91 81       	ldd	r25, Z+1	; 0x01
    52fc:	01 97       	sbiw	r24, 0x01	; 1
    52fe:	f1 f7       	brne	.-4      	; 0x52fc <main+0x21da>
    5300:	fe 01       	movw	r30, r28
    5302:	e3 56       	subi	r30, 0x63	; 99
    5304:	ff 4f       	sbci	r31, 0xFF	; 255
    5306:	91 83       	std	Z+1, r25	; 0x01
    5308:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    530a:	de 01       	movw	r26, r28
    530c:	a1 56       	subi	r26, 0x61	; 97
    530e:	bf 4f       	sbci	r27, 0xFF	; 255
    5310:	fe 01       	movw	r30, r28
    5312:	e1 56       	subi	r30, 0x61	; 97
    5314:	ff 4f       	sbci	r31, 0xFF	; 255
    5316:	80 81       	ld	r24, Z
    5318:	91 81       	ldd	r25, Z+1	; 0x01
    531a:	01 97       	sbiw	r24, 0x01	; 1
    531c:	11 96       	adiw	r26, 0x01	; 1
    531e:	9c 93       	st	X, r25
    5320:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5322:	fe 01       	movw	r30, r28
    5324:	e1 56       	subi	r30, 0x61	; 97
    5326:	ff 4f       	sbci	r31, 0xFF	; 255
    5328:	80 81       	ld	r24, Z
    532a:	91 81       	ldd	r25, Z+1	; 0x01
    532c:	00 97       	sbiw	r24, 0x00	; 0
    532e:	d1 f6       	brne	.-76     	; 0x52e4 <main+0x21c2>
    5330:	27 c0       	rjmp	.+78     	; 0x5380 <main+0x225e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5332:	8e 01       	movw	r16, r28
    5334:	01 56       	subi	r16, 0x61	; 97
    5336:	1f 4f       	sbci	r17, 0xFF	; 255
    5338:	fe 01       	movw	r30, r28
    533a:	ef 55       	subi	r30, 0x5F	; 95
    533c:	ff 4f       	sbci	r31, 0xFF	; 255
    533e:	60 81       	ld	r22, Z
    5340:	71 81       	ldd	r23, Z+1	; 0x01
    5342:	82 81       	ldd	r24, Z+2	; 0x02
    5344:	93 81       	ldd	r25, Z+3	; 0x03
    5346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534a:	dc 01       	movw	r26, r24
    534c:	cb 01       	movw	r24, r22
    534e:	f8 01       	movw	r30, r16
    5350:	91 83       	std	Z+1, r25	; 0x01
    5352:	80 83       	st	Z, r24
    5354:	de 01       	movw	r26, r28
    5356:	a5 56       	subi	r26, 0x65	; 101
    5358:	bf 4f       	sbci	r27, 0xFF	; 255
    535a:	fe 01       	movw	r30, r28
    535c:	e1 56       	subi	r30, 0x61	; 97
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	80 81       	ld	r24, Z
    5362:	91 81       	ldd	r25, Z+1	; 0x01
    5364:	8d 93       	st	X+, r24
    5366:	9c 93       	st	X, r25
    5368:	fe 01       	movw	r30, r28
    536a:	e5 56       	subi	r30, 0x65	; 101
    536c:	ff 4f       	sbci	r31, 0xFF	; 255
    536e:	80 81       	ld	r24, Z
    5370:	91 81       	ldd	r25, Z+1	; 0x01
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	f1 f7       	brne	.-4      	; 0x5372 <main+0x2250>
    5376:	fe 01       	movw	r30, r28
    5378:	e5 56       	subi	r30, 0x65	; 101
    537a:	ff 4f       	sbci	r31, 0xFF	; 255
    537c:	91 83       	std	Z+1, r25	; 0x01
    537e:	80 83       	st	Z, r24
				_delay_ms(500);
				MUSART_vTransmitData(A_minutes_counter);
    5380:	80 91 c3 00 	lds	r24, 0x00C3
    5384:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    5388:	fe 01       	movw	r30, r28
    538a:	e9 56       	subi	r30, 0x69	; 105
    538c:	ff 4f       	sbci	r31, 0xFF	; 255
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	aa ef       	ldi	r26, 0xFA	; 250
    5394:	b3 e4       	ldi	r27, 0x43	; 67
    5396:	80 83       	st	Z, r24
    5398:	91 83       	std	Z+1, r25	; 0x01
    539a:	a2 83       	std	Z+2, r26	; 0x02
    539c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    539e:	8e 01       	movw	r16, r28
    53a0:	0d 56       	subi	r16, 0x6D	; 109
    53a2:	1f 4f       	sbci	r17, 0xFF	; 255
    53a4:	fe 01       	movw	r30, r28
    53a6:	e9 56       	subi	r30, 0x69	; 105
    53a8:	ff 4f       	sbci	r31, 0xFF	; 255
    53aa:	60 81       	ld	r22, Z
    53ac:	71 81       	ldd	r23, Z+1	; 0x01
    53ae:	82 81       	ldd	r24, Z+2	; 0x02
    53b0:	93 81       	ldd	r25, Z+3	; 0x03
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	4a ef       	ldi	r20, 0xFA	; 250
    53b8:	54 e4       	ldi	r21, 0x44	; 68
    53ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53be:	dc 01       	movw	r26, r24
    53c0:	cb 01       	movw	r24, r22
    53c2:	f8 01       	movw	r30, r16
    53c4:	80 83       	st	Z, r24
    53c6:	91 83       	std	Z+1, r25	; 0x01
    53c8:	a2 83       	std	Z+2, r26	; 0x02
    53ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53cc:	fe 01       	movw	r30, r28
    53ce:	ed 56       	subi	r30, 0x6D	; 109
    53d0:	ff 4f       	sbci	r31, 0xFF	; 255
    53d2:	60 81       	ld	r22, Z
    53d4:	71 81       	ldd	r23, Z+1	; 0x01
    53d6:	82 81       	ldd	r24, Z+2	; 0x02
    53d8:	93 81       	ldd	r25, Z+3	; 0x03
    53da:	20 e0       	ldi	r18, 0x00	; 0
    53dc:	30 e0       	ldi	r19, 0x00	; 0
    53de:	40 e8       	ldi	r20, 0x80	; 128
    53e0:	5f e3       	ldi	r21, 0x3F	; 63
    53e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53e6:	88 23       	and	r24, r24
    53e8:	44 f4       	brge	.+16     	; 0x53fa <main+0x22d8>
		__ticks = 1;
    53ea:	fe 01       	movw	r30, r28
    53ec:	ef 56       	subi	r30, 0x6F	; 111
    53ee:	ff 4f       	sbci	r31, 0xFF	; 255
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	91 83       	std	Z+1, r25	; 0x01
    53f6:	80 83       	st	Z, r24
    53f8:	64 c0       	rjmp	.+200    	; 0x54c2 <main+0x23a0>
	else if (__tmp > 65535)
    53fa:	fe 01       	movw	r30, r28
    53fc:	ed 56       	subi	r30, 0x6D	; 109
    53fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5400:	60 81       	ld	r22, Z
    5402:	71 81       	ldd	r23, Z+1	; 0x01
    5404:	82 81       	ldd	r24, Z+2	; 0x02
    5406:	93 81       	ldd	r25, Z+3	; 0x03
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	3f ef       	ldi	r19, 0xFF	; 255
    540c:	4f e7       	ldi	r20, 0x7F	; 127
    540e:	57 e4       	ldi	r21, 0x47	; 71
    5410:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5414:	18 16       	cp	r1, r24
    5416:	0c f0       	brlt	.+2      	; 0x541a <main+0x22f8>
    5418:	43 c0       	rjmp	.+134    	; 0x54a0 <main+0x237e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    541a:	fe 01       	movw	r30, r28
    541c:	e9 56       	subi	r30, 0x69	; 105
    541e:	ff 4f       	sbci	r31, 0xFF	; 255
    5420:	60 81       	ld	r22, Z
    5422:	71 81       	ldd	r23, Z+1	; 0x01
    5424:	82 81       	ldd	r24, Z+2	; 0x02
    5426:	93 81       	ldd	r25, Z+3	; 0x03
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	30 e0       	ldi	r19, 0x00	; 0
    542c:	40 e2       	ldi	r20, 0x20	; 32
    542e:	51 e4       	ldi	r21, 0x41	; 65
    5430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5434:	dc 01       	movw	r26, r24
    5436:	cb 01       	movw	r24, r22
    5438:	8e 01       	movw	r16, r28
    543a:	0f 56       	subi	r16, 0x6F	; 111
    543c:	1f 4f       	sbci	r17, 0xFF	; 255
    543e:	bc 01       	movw	r22, r24
    5440:	cd 01       	movw	r24, r26
    5442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5446:	dc 01       	movw	r26, r24
    5448:	cb 01       	movw	r24, r22
    544a:	f8 01       	movw	r30, r16
    544c:	91 83       	std	Z+1, r25	; 0x01
    544e:	80 83       	st	Z, r24
    5450:	1f c0       	rjmp	.+62     	; 0x5490 <main+0x236e>
    5452:	fe 01       	movw	r30, r28
    5454:	e1 57       	subi	r30, 0x71	; 113
    5456:	ff 4f       	sbci	r31, 0xFF	; 255
    5458:	88 ec       	ldi	r24, 0xC8	; 200
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	91 83       	std	Z+1, r25	; 0x01
    545e:	80 83       	st	Z, r24
    5460:	fe 01       	movw	r30, r28
    5462:	e1 57       	subi	r30, 0x71	; 113
    5464:	ff 4f       	sbci	r31, 0xFF	; 255
    5466:	80 81       	ld	r24, Z
    5468:	91 81       	ldd	r25, Z+1	; 0x01
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	f1 f7       	brne	.-4      	; 0x546a <main+0x2348>
    546e:	fe 01       	movw	r30, r28
    5470:	e1 57       	subi	r30, 0x71	; 113
    5472:	ff 4f       	sbci	r31, 0xFF	; 255
    5474:	91 83       	std	Z+1, r25	; 0x01
    5476:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5478:	de 01       	movw	r26, r28
    547a:	af 56       	subi	r26, 0x6F	; 111
    547c:	bf 4f       	sbci	r27, 0xFF	; 255
    547e:	fe 01       	movw	r30, r28
    5480:	ef 56       	subi	r30, 0x6F	; 111
    5482:	ff 4f       	sbci	r31, 0xFF	; 255
    5484:	80 81       	ld	r24, Z
    5486:	91 81       	ldd	r25, Z+1	; 0x01
    5488:	01 97       	sbiw	r24, 0x01	; 1
    548a:	11 96       	adiw	r26, 0x01	; 1
    548c:	9c 93       	st	X, r25
    548e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5490:	fe 01       	movw	r30, r28
    5492:	ef 56       	subi	r30, 0x6F	; 111
    5494:	ff 4f       	sbci	r31, 0xFF	; 255
    5496:	80 81       	ld	r24, Z
    5498:	91 81       	ldd	r25, Z+1	; 0x01
    549a:	00 97       	sbiw	r24, 0x00	; 0
    549c:	d1 f6       	brne	.-76     	; 0x5452 <main+0x2330>
    549e:	f0 c0       	rjmp	.+480    	; 0x5680 <main+0x255e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a0:	8e 01       	movw	r16, r28
    54a2:	0f 56       	subi	r16, 0x6F	; 111
    54a4:	1f 4f       	sbci	r17, 0xFF	; 255
    54a6:	fe 01       	movw	r30, r28
    54a8:	ed 56       	subi	r30, 0x6D	; 109
    54aa:	ff 4f       	sbci	r31, 0xFF	; 255
    54ac:	60 81       	ld	r22, Z
    54ae:	71 81       	ldd	r23, Z+1	; 0x01
    54b0:	82 81       	ldd	r24, Z+2	; 0x02
    54b2:	93 81       	ldd	r25, Z+3	; 0x03
    54b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54b8:	dc 01       	movw	r26, r24
    54ba:	cb 01       	movw	r24, r22
    54bc:	f8 01       	movw	r30, r16
    54be:	91 83       	std	Z+1, r25	; 0x01
    54c0:	80 83       	st	Z, r24
    54c2:	de 01       	movw	r26, r28
    54c4:	a3 57       	subi	r26, 0x73	; 115
    54c6:	bf 4f       	sbci	r27, 0xFF	; 255
    54c8:	fe 01       	movw	r30, r28
    54ca:	ef 56       	subi	r30, 0x6F	; 111
    54cc:	ff 4f       	sbci	r31, 0xFF	; 255
    54ce:	80 81       	ld	r24, Z
    54d0:	91 81       	ldd	r25, Z+1	; 0x01
    54d2:	11 96       	adiw	r26, 0x01	; 1
    54d4:	9c 93       	st	X, r25
    54d6:	8e 93       	st	-X, r24
    54d8:	fe 01       	movw	r30, r28
    54da:	e3 57       	subi	r30, 0x73	; 115
    54dc:	ff 4f       	sbci	r31, 0xFF	; 255
    54de:	80 81       	ld	r24, Z
    54e0:	91 81       	ldd	r25, Z+1	; 0x01
    54e2:	01 97       	sbiw	r24, 0x01	; 1
    54e4:	f1 f7       	brne	.-4      	; 0x54e2 <main+0x23c0>
    54e6:	fe 01       	movw	r30, r28
    54e8:	e3 57       	subi	r30, 0x73	; 115
    54ea:	ff 4f       	sbci	r31, 0xFF	; 255
    54ec:	91 83       	std	Z+1, r25	; 0x01
    54ee:	80 83       	st	Z, r24
    54f0:	c7 c0       	rjmp	.+398    	; 0x5680 <main+0x255e>
				_delay_ms(500);


			}
			else {
				HLCD_vDisplayClear();
    54f2:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
				HLCD_vSendString("Invalid Choice ");
    54f6:	8d e9       	ldi	r24, 0x9D	; 157
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
    54fe:	fe 01       	movw	r30, r28
    5500:	e7 57       	subi	r30, 0x77	; 119
    5502:	ff 4f       	sbci	r31, 0xFF	; 255
    5504:	80 e0       	ldi	r24, 0x00	; 0
    5506:	90 e0       	ldi	r25, 0x00	; 0
    5508:	aa e7       	ldi	r26, 0x7A	; 122
    550a:	b4 e4       	ldi	r27, 0x44	; 68
    550c:	80 83       	st	Z, r24
    550e:	91 83       	std	Z+1, r25	; 0x01
    5510:	a2 83       	std	Z+2, r26	; 0x02
    5512:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5514:	8e 01       	movw	r16, r28
    5516:	0b 57       	subi	r16, 0x7B	; 123
    5518:	1f 4f       	sbci	r17, 0xFF	; 255
    551a:	fe 01       	movw	r30, r28
    551c:	e7 57       	subi	r30, 0x77	; 119
    551e:	ff 4f       	sbci	r31, 0xFF	; 255
    5520:	60 81       	ld	r22, Z
    5522:	71 81       	ldd	r23, Z+1	; 0x01
    5524:	82 81       	ldd	r24, Z+2	; 0x02
    5526:	93 81       	ldd	r25, Z+3	; 0x03
    5528:	20 e0       	ldi	r18, 0x00	; 0
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	4a ef       	ldi	r20, 0xFA	; 250
    552e:	54 e4       	ldi	r21, 0x44	; 68
    5530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5534:	dc 01       	movw	r26, r24
    5536:	cb 01       	movw	r24, r22
    5538:	f8 01       	movw	r30, r16
    553a:	80 83       	st	Z, r24
    553c:	91 83       	std	Z+1, r25	; 0x01
    553e:	a2 83       	std	Z+2, r26	; 0x02
    5540:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5542:	fe 01       	movw	r30, r28
    5544:	eb 57       	subi	r30, 0x7B	; 123
    5546:	ff 4f       	sbci	r31, 0xFF	; 255
    5548:	60 81       	ld	r22, Z
    554a:	71 81       	ldd	r23, Z+1	; 0x01
    554c:	82 81       	ldd	r24, Z+2	; 0x02
    554e:	93 81       	ldd	r25, Z+3	; 0x03
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	40 e8       	ldi	r20, 0x80	; 128
    5556:	5f e3       	ldi	r21, 0x3F	; 63
    5558:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    555c:	88 23       	and	r24, r24
    555e:	44 f4       	brge	.+16     	; 0x5570 <main+0x244e>
		__ticks = 1;
    5560:	fe 01       	movw	r30, r28
    5562:	ed 57       	subi	r30, 0x7D	; 125
    5564:	ff 4f       	sbci	r31, 0xFF	; 255
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	91 83       	std	Z+1, r25	; 0x01
    556c:	80 83       	st	Z, r24
    556e:	64 c0       	rjmp	.+200    	; 0x5638 <main+0x2516>
	else if (__tmp > 65535)
    5570:	fe 01       	movw	r30, r28
    5572:	eb 57       	subi	r30, 0x7B	; 123
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	60 81       	ld	r22, Z
    5578:	71 81       	ldd	r23, Z+1	; 0x01
    557a:	82 81       	ldd	r24, Z+2	; 0x02
    557c:	93 81       	ldd	r25, Z+3	; 0x03
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	3f ef       	ldi	r19, 0xFF	; 255
    5582:	4f e7       	ldi	r20, 0x7F	; 127
    5584:	57 e4       	ldi	r21, 0x47	; 71
    5586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    558a:	18 16       	cp	r1, r24
    558c:	0c f0       	brlt	.+2      	; 0x5590 <main+0x246e>
    558e:	43 c0       	rjmp	.+134    	; 0x5616 <main+0x24f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5590:	fe 01       	movw	r30, r28
    5592:	e7 57       	subi	r30, 0x77	; 119
    5594:	ff 4f       	sbci	r31, 0xFF	; 255
    5596:	60 81       	ld	r22, Z
    5598:	71 81       	ldd	r23, Z+1	; 0x01
    559a:	82 81       	ldd	r24, Z+2	; 0x02
    559c:	93 81       	ldd	r25, Z+3	; 0x03
    559e:	20 e0       	ldi	r18, 0x00	; 0
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	40 e2       	ldi	r20, 0x20	; 32
    55a4:	51 e4       	ldi	r21, 0x41	; 65
    55a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	8e 01       	movw	r16, r28
    55b0:	0d 57       	subi	r16, 0x7D	; 125
    55b2:	1f 4f       	sbci	r17, 0xFF	; 255
    55b4:	bc 01       	movw	r22, r24
    55b6:	cd 01       	movw	r24, r26
    55b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55bc:	dc 01       	movw	r26, r24
    55be:	cb 01       	movw	r24, r22
    55c0:	f8 01       	movw	r30, r16
    55c2:	91 83       	std	Z+1, r25	; 0x01
    55c4:	80 83       	st	Z, r24
    55c6:	1f c0       	rjmp	.+62     	; 0x5606 <main+0x24e4>
    55c8:	fe 01       	movw	r30, r28
    55ca:	ef 57       	subi	r30, 0x7F	; 127
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	88 ec       	ldi	r24, 0xC8	; 200
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	91 83       	std	Z+1, r25	; 0x01
    55d4:	80 83       	st	Z, r24
    55d6:	fe 01       	movw	r30, r28
    55d8:	ef 57       	subi	r30, 0x7F	; 127
    55da:	ff 4f       	sbci	r31, 0xFF	; 255
    55dc:	80 81       	ld	r24, Z
    55de:	91 81       	ldd	r25, Z+1	; 0x01
    55e0:	01 97       	sbiw	r24, 0x01	; 1
    55e2:	f1 f7       	brne	.-4      	; 0x55e0 <main+0x24be>
    55e4:	fe 01       	movw	r30, r28
    55e6:	ef 57       	subi	r30, 0x7F	; 127
    55e8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ee:	de 01       	movw	r26, r28
    55f0:	ad 57       	subi	r26, 0x7D	; 125
    55f2:	bf 4f       	sbci	r27, 0xFF	; 255
    55f4:	fe 01       	movw	r30, r28
    55f6:	ed 57       	subi	r30, 0x7D	; 125
    55f8:	ff 4f       	sbci	r31, 0xFF	; 255
    55fa:	80 81       	ld	r24, Z
    55fc:	91 81       	ldd	r25, Z+1	; 0x01
    55fe:	01 97       	sbiw	r24, 0x01	; 1
    5600:	11 96       	adiw	r26, 0x01	; 1
    5602:	9c 93       	st	X, r25
    5604:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5606:	fe 01       	movw	r30, r28
    5608:	ed 57       	subi	r30, 0x7D	; 125
    560a:	ff 4f       	sbci	r31, 0xFF	; 255
    560c:	80 81       	ld	r24, Z
    560e:	91 81       	ldd	r25, Z+1	; 0x01
    5610:	00 97       	sbiw	r24, 0x00	; 0
    5612:	d1 f6       	brne	.-76     	; 0x55c8 <main+0x24a6>
    5614:	27 c0       	rjmp	.+78     	; 0x5664 <main+0x2542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5616:	8e 01       	movw	r16, r28
    5618:	0d 57       	subi	r16, 0x7D	; 125
    561a:	1f 4f       	sbci	r17, 0xFF	; 255
    561c:	fe 01       	movw	r30, r28
    561e:	eb 57       	subi	r30, 0x7B	; 123
    5620:	ff 4f       	sbci	r31, 0xFF	; 255
    5622:	60 81       	ld	r22, Z
    5624:	71 81       	ldd	r23, Z+1	; 0x01
    5626:	82 81       	ldd	r24, Z+2	; 0x02
    5628:	93 81       	ldd	r25, Z+3	; 0x03
    562a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    562e:	dc 01       	movw	r26, r24
    5630:	cb 01       	movw	r24, r22
    5632:	f8 01       	movw	r30, r16
    5634:	91 83       	std	Z+1, r25	; 0x01
    5636:	80 83       	st	Z, r24
    5638:	de 01       	movw	r26, r28
    563a:	a1 58       	subi	r26, 0x81	; 129
    563c:	bf 4f       	sbci	r27, 0xFF	; 255
    563e:	fe 01       	movw	r30, r28
    5640:	ed 57       	subi	r30, 0x7D	; 125
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	80 81       	ld	r24, Z
    5646:	91 81       	ldd	r25, Z+1	; 0x01
    5648:	8d 93       	st	X+, r24
    564a:	9c 93       	st	X, r25
    564c:	fe 01       	movw	r30, r28
    564e:	e1 58       	subi	r30, 0x81	; 129
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	80 81       	ld	r24, Z
    5654:	91 81       	ldd	r25, Z+1	; 0x01
    5656:	01 97       	sbiw	r24, 0x01	; 1
    5658:	f1 f7       	brne	.-4      	; 0x5656 <main+0x2534>
    565a:	fe 01       	movw	r30, r28
    565c:	e1 58       	subi	r30, 0x81	; 129
    565e:	ff 4f       	sbci	r31, 0xFF	; 255
    5660:	91 83       	std	Z+1, r25	; 0x01
    5662:	80 83       	st	Z, r24
				_delay_ms(1000);
				HLCD_vDisplayClear();
    5664:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
				HLCD_vSendString("1: Set Clock");
    5668:	80 e6       	ldi	r24, 0x60	; 96
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
				HLCD_vMoveTo(1,0);
    5670:	81 e0       	ldi	r24, 0x01	; 1
    5672:	60 e0       	ldi	r22, 0x00	; 0
    5674:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
				HLCD_vSendString("2: Set Alarm");
    5678:	8d e6       	ldi	r24, 0x6D	; 109
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
			}

			  }
		if(hours_counter==A_hours_counter && minutes_counter==A_minutes_counter && seconds_counter<3){
    5680:	90 91 f3 00 	lds	r25, 0x00F3
    5684:	80 91 c2 00 	lds	r24, 0x00C2
    5688:	98 17       	cp	r25, r24
    568a:	09 f0       	breq	.+2      	; 0x568e <main+0x256c>
    568c:	c7 c0       	rjmp	.+398    	; 0x581c <main+0x26fa>
    568e:	90 91 f2 00 	lds	r25, 0x00F2
    5692:	80 91 c3 00 	lds	r24, 0x00C3
    5696:	98 17       	cp	r25, r24
    5698:	09 f0       	breq	.+2      	; 0x569c <main+0x257a>
    569a:	c0 c0       	rjmp	.+384    	; 0x581c <main+0x26fa>
    569c:	80 91 f1 00 	lds	r24, 0x00F1
    56a0:	83 30       	cpi	r24, 0x03	; 3
    56a2:	08 f0       	brcs	.+2      	; 0x56a6 <main+0x2584>
    56a4:	bb c0       	rjmp	.+374    	; 0x581c <main+0x26fa>
					MDIO_vSetPinValue(PORT_B,7,HIGH);
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	67 e0       	ldi	r22, 0x07	; 7
    56aa:	41 e0       	ldi	r20, 0x01	; 1
    56ac:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
					MUSART_vTransmitData(77);
    56b0:	8d e4       	ldi	r24, 0x4D	; 77
    56b2:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    56b6:	fe 01       	movw	r30, r28
    56b8:	e5 58       	subi	r30, 0x85	; 133
    56ba:	ff 4f       	sbci	r31, 0xFF	; 255
    56bc:	80 e0       	ldi	r24, 0x00	; 0
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	aa ef       	ldi	r26, 0xFA	; 250
    56c2:	b4 e4       	ldi	r27, 0x44	; 68
    56c4:	80 83       	st	Z, r24
    56c6:	91 83       	std	Z+1, r25	; 0x01
    56c8:	a2 83       	std	Z+2, r26	; 0x02
    56ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56cc:	8e 01       	movw	r16, r28
    56ce:	09 58       	subi	r16, 0x89	; 137
    56d0:	1f 4f       	sbci	r17, 0xFF	; 255
    56d2:	fe 01       	movw	r30, r28
    56d4:	e5 58       	subi	r30, 0x85	; 133
    56d6:	ff 4f       	sbci	r31, 0xFF	; 255
    56d8:	60 81       	ld	r22, Z
    56da:	71 81       	ldd	r23, Z+1	; 0x01
    56dc:	82 81       	ldd	r24, Z+2	; 0x02
    56de:	93 81       	ldd	r25, Z+3	; 0x03
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	4a ef       	ldi	r20, 0xFA	; 250
    56e6:	54 e4       	ldi	r21, 0x44	; 68
    56e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56ec:	dc 01       	movw	r26, r24
    56ee:	cb 01       	movw	r24, r22
    56f0:	f8 01       	movw	r30, r16
    56f2:	80 83       	st	Z, r24
    56f4:	91 83       	std	Z+1, r25	; 0x01
    56f6:	a2 83       	std	Z+2, r26	; 0x02
    56f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56fa:	fe 01       	movw	r30, r28
    56fc:	e9 58       	subi	r30, 0x89	; 137
    56fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5700:	60 81       	ld	r22, Z
    5702:	71 81       	ldd	r23, Z+1	; 0x01
    5704:	82 81       	ldd	r24, Z+2	; 0x02
    5706:	93 81       	ldd	r25, Z+3	; 0x03
    5708:	20 e0       	ldi	r18, 0x00	; 0
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	40 e8       	ldi	r20, 0x80	; 128
    570e:	5f e3       	ldi	r21, 0x3F	; 63
    5710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5714:	88 23       	and	r24, r24
    5716:	44 f4       	brge	.+16     	; 0x5728 <main+0x2606>
		__ticks = 1;
    5718:	fe 01       	movw	r30, r28
    571a:	eb 58       	subi	r30, 0x8B	; 139
    571c:	ff 4f       	sbci	r31, 0xFF	; 255
    571e:	81 e0       	ldi	r24, 0x01	; 1
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	80 83       	st	Z, r24
    5726:	64 c0       	rjmp	.+200    	; 0x57f0 <main+0x26ce>
	else if (__tmp > 65535)
    5728:	fe 01       	movw	r30, r28
    572a:	e9 58       	subi	r30, 0x89	; 137
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	60 81       	ld	r22, Z
    5730:	71 81       	ldd	r23, Z+1	; 0x01
    5732:	82 81       	ldd	r24, Z+2	; 0x02
    5734:	93 81       	ldd	r25, Z+3	; 0x03
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	3f ef       	ldi	r19, 0xFF	; 255
    573a:	4f e7       	ldi	r20, 0x7F	; 127
    573c:	57 e4       	ldi	r21, 0x47	; 71
    573e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5742:	18 16       	cp	r1, r24
    5744:	0c f0       	brlt	.+2      	; 0x5748 <main+0x2626>
    5746:	43 c0       	rjmp	.+134    	; 0x57ce <main+0x26ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5748:	fe 01       	movw	r30, r28
    574a:	e5 58       	subi	r30, 0x85	; 133
    574c:	ff 4f       	sbci	r31, 0xFF	; 255
    574e:	60 81       	ld	r22, Z
    5750:	71 81       	ldd	r23, Z+1	; 0x01
    5752:	82 81       	ldd	r24, Z+2	; 0x02
    5754:	93 81       	ldd	r25, Z+3	; 0x03
    5756:	20 e0       	ldi	r18, 0x00	; 0
    5758:	30 e0       	ldi	r19, 0x00	; 0
    575a:	40 e2       	ldi	r20, 0x20	; 32
    575c:	51 e4       	ldi	r21, 0x41	; 65
    575e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5762:	dc 01       	movw	r26, r24
    5764:	cb 01       	movw	r24, r22
    5766:	8e 01       	movw	r16, r28
    5768:	0b 58       	subi	r16, 0x8B	; 139
    576a:	1f 4f       	sbci	r17, 0xFF	; 255
    576c:	bc 01       	movw	r22, r24
    576e:	cd 01       	movw	r24, r26
    5770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5774:	dc 01       	movw	r26, r24
    5776:	cb 01       	movw	r24, r22
    5778:	f8 01       	movw	r30, r16
    577a:	91 83       	std	Z+1, r25	; 0x01
    577c:	80 83       	st	Z, r24
    577e:	1f c0       	rjmp	.+62     	; 0x57be <main+0x269c>
    5780:	fe 01       	movw	r30, r28
    5782:	ed 58       	subi	r30, 0x8D	; 141
    5784:	ff 4f       	sbci	r31, 0xFF	; 255
    5786:	88 ec       	ldi	r24, 0xC8	; 200
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	91 83       	std	Z+1, r25	; 0x01
    578c:	80 83       	st	Z, r24
    578e:	fe 01       	movw	r30, r28
    5790:	ed 58       	subi	r30, 0x8D	; 141
    5792:	ff 4f       	sbci	r31, 0xFF	; 255
    5794:	80 81       	ld	r24, Z
    5796:	91 81       	ldd	r25, Z+1	; 0x01
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	f1 f7       	brne	.-4      	; 0x5798 <main+0x2676>
    579c:	fe 01       	movw	r30, r28
    579e:	ed 58       	subi	r30, 0x8D	; 141
    57a0:	ff 4f       	sbci	r31, 0xFF	; 255
    57a2:	91 83       	std	Z+1, r25	; 0x01
    57a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57a6:	de 01       	movw	r26, r28
    57a8:	ab 58       	subi	r26, 0x8B	; 139
    57aa:	bf 4f       	sbci	r27, 0xFF	; 255
    57ac:	fe 01       	movw	r30, r28
    57ae:	eb 58       	subi	r30, 0x8B	; 139
    57b0:	ff 4f       	sbci	r31, 0xFF	; 255
    57b2:	80 81       	ld	r24, Z
    57b4:	91 81       	ldd	r25, Z+1	; 0x01
    57b6:	01 97       	sbiw	r24, 0x01	; 1
    57b8:	11 96       	adiw	r26, 0x01	; 1
    57ba:	9c 93       	st	X, r25
    57bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57be:	fe 01       	movw	r30, r28
    57c0:	eb 58       	subi	r30, 0x8B	; 139
    57c2:	ff 4f       	sbci	r31, 0xFF	; 255
    57c4:	80 81       	ld	r24, Z
    57c6:	91 81       	ldd	r25, Z+1	; 0x01
    57c8:	00 97       	sbiw	r24, 0x00	; 0
    57ca:	d1 f6       	brne	.-76     	; 0x5780 <main+0x265e>
    57cc:	27 c0       	rjmp	.+78     	; 0x581c <main+0x26fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ce:	8e 01       	movw	r16, r28
    57d0:	0b 58       	subi	r16, 0x8B	; 139
    57d2:	1f 4f       	sbci	r17, 0xFF	; 255
    57d4:	fe 01       	movw	r30, r28
    57d6:	e9 58       	subi	r30, 0x89	; 137
    57d8:	ff 4f       	sbci	r31, 0xFF	; 255
    57da:	60 81       	ld	r22, Z
    57dc:	71 81       	ldd	r23, Z+1	; 0x01
    57de:	82 81       	ldd	r24, Z+2	; 0x02
    57e0:	93 81       	ldd	r25, Z+3	; 0x03
    57e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	f8 01       	movw	r30, r16
    57ec:	91 83       	std	Z+1, r25	; 0x01
    57ee:	80 83       	st	Z, r24
    57f0:	de 01       	movw	r26, r28
    57f2:	af 58       	subi	r26, 0x8F	; 143
    57f4:	bf 4f       	sbci	r27, 0xFF	; 255
    57f6:	fe 01       	movw	r30, r28
    57f8:	eb 58       	subi	r30, 0x8B	; 139
    57fa:	ff 4f       	sbci	r31, 0xFF	; 255
    57fc:	80 81       	ld	r24, Z
    57fe:	91 81       	ldd	r25, Z+1	; 0x01
    5800:	8d 93       	st	X+, r24
    5802:	9c 93       	st	X, r25
    5804:	fe 01       	movw	r30, r28
    5806:	ef 58       	subi	r30, 0x8F	; 143
    5808:	ff 4f       	sbci	r31, 0xFF	; 255
    580a:	80 81       	ld	r24, Z
    580c:	91 81       	ldd	r25, Z+1	; 0x01
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	f1 f7       	brne	.-4      	; 0x580e <main+0x26ec>
    5812:	fe 01       	movw	r30, r28
    5814:	ef 58       	subi	r30, 0x8F	; 143
    5816:	ff 4f       	sbci	r31, 0xFF	; 255
    5818:	91 83       	std	Z+1, r25	; 0x01
    581a:	80 83       	st	Z, r24
					_delay_ms(2000);

				}

			MDIO_vSetPinValue(PORT_D,2,HIGH);
    581c:	83 e0       	ldi	r24, 0x03	; 3
    581e:	62 e0       	ldi	r22, 0x02	; 2
    5820:	41 e0       	ldi	r20, 0x01	; 1
    5822:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,3,HIGH);
    5826:	83 e0       	ldi	r24, 0x03	; 3
    5828:	63 e0       	ldi	r22, 0x03	; 3
    582a:	41 e0       	ldi	r20, 0x01	; 1
    582c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,4,HIGH);
    5830:	83 e0       	ldi	r24, 0x03	; 3
    5832:	64 e0       	ldi	r22, 0x04	; 4
    5834:	41 e0       	ldi	r20, 0x01	; 1
    5836:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,5,HIGH);
    583a:	83 e0       	ldi	r24, 0x03	; 3
    583c:	65 e0       	ldi	r22, 0x05	; 5
    583e:	41 e0       	ldi	r20, 0x01	; 1
    5840:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,6,HIGH);
    5844:	83 e0       	ldi	r24, 0x03	; 3
    5846:	66 e0       	ldi	r22, 0x06	; 6
    5848:	41 e0       	ldi	r20, 0x01	; 1
    584a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,7,LOW);
    584e:	83 e0       	ldi	r24, 0x03	; 3
    5850:	67 e0       	ldi	r22, 0x07	; 7
    5852:	40 e0       	ldi	r20, 0x00	; 0
    5854:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPortValue(PORT_B,seconds_counter%10);
    5858:	80 91 f1 00 	lds	r24, 0x00F1
    585c:	9a e0       	ldi	r25, 0x0A	; 10
    585e:	69 2f       	mov	r22, r25
    5860:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__udivmodqi4>
    5864:	89 2f       	mov	r24, r25
    5866:	98 2f       	mov	r25, r24
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	69 2f       	mov	r22, r25
    586c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
    5870:	fe 01       	movw	r30, r28
    5872:	e3 59       	subi	r30, 0x93	; 147
    5874:	ff 4f       	sbci	r31, 0xFF	; 255
    5876:	80 e0       	ldi	r24, 0x00	; 0
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	a0 ea       	ldi	r26, 0xA0	; 160
    587c:	b0 e4       	ldi	r27, 0x40	; 64
    587e:	80 83       	st	Z, r24
    5880:	91 83       	std	Z+1, r25	; 0x01
    5882:	a2 83       	std	Z+2, r26	; 0x02
    5884:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5886:	8e 01       	movw	r16, r28
    5888:	07 59       	subi	r16, 0x97	; 151
    588a:	1f 4f       	sbci	r17, 0xFF	; 255
    588c:	fe 01       	movw	r30, r28
    588e:	e3 59       	subi	r30, 0x93	; 147
    5890:	ff 4f       	sbci	r31, 0xFF	; 255
    5892:	60 81       	ld	r22, Z
    5894:	71 81       	ldd	r23, Z+1	; 0x01
    5896:	82 81       	ldd	r24, Z+2	; 0x02
    5898:	93 81       	ldd	r25, Z+3	; 0x03
    589a:	20 e0       	ldi	r18, 0x00	; 0
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	4a ef       	ldi	r20, 0xFA	; 250
    58a0:	54 e4       	ldi	r21, 0x44	; 68
    58a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	f8 01       	movw	r30, r16
    58ac:	80 83       	st	Z, r24
    58ae:	91 83       	std	Z+1, r25	; 0x01
    58b0:	a2 83       	std	Z+2, r26	; 0x02
    58b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58b4:	fe 01       	movw	r30, r28
    58b6:	e7 59       	subi	r30, 0x97	; 151
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ba:	60 81       	ld	r22, Z
    58bc:	71 81       	ldd	r23, Z+1	; 0x01
    58be:	82 81       	ldd	r24, Z+2	; 0x02
    58c0:	93 81       	ldd	r25, Z+3	; 0x03
    58c2:	20 e0       	ldi	r18, 0x00	; 0
    58c4:	30 e0       	ldi	r19, 0x00	; 0
    58c6:	40 e8       	ldi	r20, 0x80	; 128
    58c8:	5f e3       	ldi	r21, 0x3F	; 63
    58ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    58ce:	88 23       	and	r24, r24
    58d0:	44 f4       	brge	.+16     	; 0x58e2 <main+0x27c0>
		__ticks = 1;
    58d2:	fe 01       	movw	r30, r28
    58d4:	e9 59       	subi	r30, 0x99	; 153
    58d6:	ff 4f       	sbci	r31, 0xFF	; 255
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	91 83       	std	Z+1, r25	; 0x01
    58de:	80 83       	st	Z, r24
    58e0:	64 c0       	rjmp	.+200    	; 0x59aa <main+0x2888>
	else if (__tmp > 65535)
    58e2:	fe 01       	movw	r30, r28
    58e4:	e7 59       	subi	r30, 0x97	; 151
    58e6:	ff 4f       	sbci	r31, 0xFF	; 255
    58e8:	60 81       	ld	r22, Z
    58ea:	71 81       	ldd	r23, Z+1	; 0x01
    58ec:	82 81       	ldd	r24, Z+2	; 0x02
    58ee:	93 81       	ldd	r25, Z+3	; 0x03
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	3f ef       	ldi	r19, 0xFF	; 255
    58f4:	4f e7       	ldi	r20, 0x7F	; 127
    58f6:	57 e4       	ldi	r21, 0x47	; 71
    58f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    58fc:	18 16       	cp	r1, r24
    58fe:	0c f0       	brlt	.+2      	; 0x5902 <main+0x27e0>
    5900:	43 c0       	rjmp	.+134    	; 0x5988 <main+0x2866>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5902:	fe 01       	movw	r30, r28
    5904:	e3 59       	subi	r30, 0x93	; 147
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	60 81       	ld	r22, Z
    590a:	71 81       	ldd	r23, Z+1	; 0x01
    590c:	82 81       	ldd	r24, Z+2	; 0x02
    590e:	93 81       	ldd	r25, Z+3	; 0x03
    5910:	20 e0       	ldi	r18, 0x00	; 0
    5912:	30 e0       	ldi	r19, 0x00	; 0
    5914:	40 e2       	ldi	r20, 0x20	; 32
    5916:	51 e4       	ldi	r21, 0x41	; 65
    5918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    591c:	dc 01       	movw	r26, r24
    591e:	cb 01       	movw	r24, r22
    5920:	8e 01       	movw	r16, r28
    5922:	09 59       	subi	r16, 0x99	; 153
    5924:	1f 4f       	sbci	r17, 0xFF	; 255
    5926:	bc 01       	movw	r22, r24
    5928:	cd 01       	movw	r24, r26
    592a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	f8 01       	movw	r30, r16
    5934:	91 83       	std	Z+1, r25	; 0x01
    5936:	80 83       	st	Z, r24
    5938:	1f c0       	rjmp	.+62     	; 0x5978 <main+0x2856>
    593a:	fe 01       	movw	r30, r28
    593c:	eb 59       	subi	r30, 0x9B	; 155
    593e:	ff 4f       	sbci	r31, 0xFF	; 255
    5940:	88 ec       	ldi	r24, 0xC8	; 200
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	91 83       	std	Z+1, r25	; 0x01
    5946:	80 83       	st	Z, r24
    5948:	fe 01       	movw	r30, r28
    594a:	eb 59       	subi	r30, 0x9B	; 155
    594c:	ff 4f       	sbci	r31, 0xFF	; 255
    594e:	80 81       	ld	r24, Z
    5950:	91 81       	ldd	r25, Z+1	; 0x01
    5952:	01 97       	sbiw	r24, 0x01	; 1
    5954:	f1 f7       	brne	.-4      	; 0x5952 <main+0x2830>
    5956:	fe 01       	movw	r30, r28
    5958:	eb 59       	subi	r30, 0x9B	; 155
    595a:	ff 4f       	sbci	r31, 0xFF	; 255
    595c:	91 83       	std	Z+1, r25	; 0x01
    595e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5960:	de 01       	movw	r26, r28
    5962:	a9 59       	subi	r26, 0x99	; 153
    5964:	bf 4f       	sbci	r27, 0xFF	; 255
    5966:	fe 01       	movw	r30, r28
    5968:	e9 59       	subi	r30, 0x99	; 153
    596a:	ff 4f       	sbci	r31, 0xFF	; 255
    596c:	80 81       	ld	r24, Z
    596e:	91 81       	ldd	r25, Z+1	; 0x01
    5970:	01 97       	sbiw	r24, 0x01	; 1
    5972:	11 96       	adiw	r26, 0x01	; 1
    5974:	9c 93       	st	X, r25
    5976:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5978:	fe 01       	movw	r30, r28
    597a:	e9 59       	subi	r30, 0x99	; 153
    597c:	ff 4f       	sbci	r31, 0xFF	; 255
    597e:	80 81       	ld	r24, Z
    5980:	91 81       	ldd	r25, Z+1	; 0x01
    5982:	00 97       	sbiw	r24, 0x00	; 0
    5984:	d1 f6       	brne	.-76     	; 0x593a <main+0x2818>
    5986:	27 c0       	rjmp	.+78     	; 0x59d6 <main+0x28b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5988:	8e 01       	movw	r16, r28
    598a:	09 59       	subi	r16, 0x99	; 153
    598c:	1f 4f       	sbci	r17, 0xFF	; 255
    598e:	fe 01       	movw	r30, r28
    5990:	e7 59       	subi	r30, 0x97	; 151
    5992:	ff 4f       	sbci	r31, 0xFF	; 255
    5994:	60 81       	ld	r22, Z
    5996:	71 81       	ldd	r23, Z+1	; 0x01
    5998:	82 81       	ldd	r24, Z+2	; 0x02
    599a:	93 81       	ldd	r25, Z+3	; 0x03
    599c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59a0:	dc 01       	movw	r26, r24
    59a2:	cb 01       	movw	r24, r22
    59a4:	f8 01       	movw	r30, r16
    59a6:	91 83       	std	Z+1, r25	; 0x01
    59a8:	80 83       	st	Z, r24
    59aa:	de 01       	movw	r26, r28
    59ac:	ad 59       	subi	r26, 0x9D	; 157
    59ae:	bf 4f       	sbci	r27, 0xFF	; 255
    59b0:	fe 01       	movw	r30, r28
    59b2:	e9 59       	subi	r30, 0x99	; 153
    59b4:	ff 4f       	sbci	r31, 0xFF	; 255
    59b6:	80 81       	ld	r24, Z
    59b8:	91 81       	ldd	r25, Z+1	; 0x01
    59ba:	8d 93       	st	X+, r24
    59bc:	9c 93       	st	X, r25
    59be:	fe 01       	movw	r30, r28
    59c0:	ed 59       	subi	r30, 0x9D	; 157
    59c2:	ff 4f       	sbci	r31, 0xFF	; 255
    59c4:	80 81       	ld	r24, Z
    59c6:	91 81       	ldd	r25, Z+1	; 0x01
    59c8:	01 97       	sbiw	r24, 0x01	; 1
    59ca:	f1 f7       	brne	.-4      	; 0x59c8 <main+0x28a6>
    59cc:	fe 01       	movw	r30, r28
    59ce:	ed 59       	subi	r30, 0x9D	; 157
    59d0:	ff 4f       	sbci	r31, 0xFF	; 255
    59d2:	91 83       	std	Z+1, r25	; 0x01
    59d4:	80 83       	st	Z, r24
			_delay_ms(5);

			MDIO_vSetPinValue(PORT_D,2,HIGH);
    59d6:	83 e0       	ldi	r24, 0x03	; 3
    59d8:	62 e0       	ldi	r22, 0x02	; 2
    59da:	41 e0       	ldi	r20, 0x01	; 1
    59dc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,3,HIGH);
    59e0:	83 e0       	ldi	r24, 0x03	; 3
    59e2:	63 e0       	ldi	r22, 0x03	; 3
    59e4:	41 e0       	ldi	r20, 0x01	; 1
    59e6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,4,HIGH);
    59ea:	83 e0       	ldi	r24, 0x03	; 3
    59ec:	64 e0       	ldi	r22, 0x04	; 4
    59ee:	41 e0       	ldi	r20, 0x01	; 1
    59f0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,5,HIGH);
    59f4:	83 e0       	ldi	r24, 0x03	; 3
    59f6:	65 e0       	ldi	r22, 0x05	; 5
    59f8:	41 e0       	ldi	r20, 0x01	; 1
    59fa:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,6,LOW);
    59fe:	83 e0       	ldi	r24, 0x03	; 3
    5a00:	66 e0       	ldi	r22, 0x06	; 6
    5a02:	40 e0       	ldi	r20, 0x00	; 0
    5a04:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,7,HIGH);
    5a08:	83 e0       	ldi	r24, 0x03	; 3
    5a0a:	67 e0       	ldi	r22, 0x07	; 7
    5a0c:	41 e0       	ldi	r20, 0x01	; 1
    5a0e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPortValue(PORT_B,seconds_counter/10);
    5a12:	80 91 f1 00 	lds	r24, 0x00F1
    5a16:	9a e0       	ldi	r25, 0x0A	; 10
    5a18:	69 2f       	mov	r22, r25
    5a1a:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__udivmodqi4>
    5a1e:	98 2f       	mov	r25, r24
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	69 2f       	mov	r22, r25
    5a24:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
    5a28:	fe 01       	movw	r30, r28
    5a2a:	e1 5a       	subi	r30, 0xA1	; 161
    5a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2e:	80 e0       	ldi	r24, 0x00	; 0
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	a0 ea       	ldi	r26, 0xA0	; 160
    5a34:	b0 e4       	ldi	r27, 0x40	; 64
    5a36:	80 83       	st	Z, r24
    5a38:	91 83       	std	Z+1, r25	; 0x01
    5a3a:	a2 83       	std	Z+2, r26	; 0x02
    5a3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a3e:	8e 01       	movw	r16, r28
    5a40:	05 5a       	subi	r16, 0xA5	; 165
    5a42:	1f 4f       	sbci	r17, 0xFF	; 255
    5a44:	fe 01       	movw	r30, r28
    5a46:	e1 5a       	subi	r30, 0xA1	; 161
    5a48:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4a:	60 81       	ld	r22, Z
    5a4c:	71 81       	ldd	r23, Z+1	; 0x01
    5a4e:	82 81       	ldd	r24, Z+2	; 0x02
    5a50:	93 81       	ldd	r25, Z+3	; 0x03
    5a52:	20 e0       	ldi	r18, 0x00	; 0
    5a54:	30 e0       	ldi	r19, 0x00	; 0
    5a56:	4a ef       	ldi	r20, 0xFA	; 250
    5a58:	54 e4       	ldi	r21, 0x44	; 68
    5a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a5e:	dc 01       	movw	r26, r24
    5a60:	cb 01       	movw	r24, r22
    5a62:	f8 01       	movw	r30, r16
    5a64:	80 83       	st	Z, r24
    5a66:	91 83       	std	Z+1, r25	; 0x01
    5a68:	a2 83       	std	Z+2, r26	; 0x02
    5a6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a6c:	fe 01       	movw	r30, r28
    5a6e:	e5 5a       	subi	r30, 0xA5	; 165
    5a70:	ff 4f       	sbci	r31, 0xFF	; 255
    5a72:	60 81       	ld	r22, Z
    5a74:	71 81       	ldd	r23, Z+1	; 0x01
    5a76:	82 81       	ldd	r24, Z+2	; 0x02
    5a78:	93 81       	ldd	r25, Z+3	; 0x03
    5a7a:	20 e0       	ldi	r18, 0x00	; 0
    5a7c:	30 e0       	ldi	r19, 0x00	; 0
    5a7e:	40 e8       	ldi	r20, 0x80	; 128
    5a80:	5f e3       	ldi	r21, 0x3F	; 63
    5a82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a86:	88 23       	and	r24, r24
    5a88:	44 f4       	brge	.+16     	; 0x5a9a <main+0x2978>
		__ticks = 1;
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	e7 5a       	subi	r30, 0xA7	; 167
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	91 83       	std	Z+1, r25	; 0x01
    5a96:	80 83       	st	Z, r24
    5a98:	64 c0       	rjmp	.+200    	; 0x5b62 <main+0x2a40>
	else if (__tmp > 65535)
    5a9a:	fe 01       	movw	r30, r28
    5a9c:	e5 5a       	subi	r30, 0xA5	; 165
    5a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa0:	60 81       	ld	r22, Z
    5aa2:	71 81       	ldd	r23, Z+1	; 0x01
    5aa4:	82 81       	ldd	r24, Z+2	; 0x02
    5aa6:	93 81       	ldd	r25, Z+3	; 0x03
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
    5aaa:	3f ef       	ldi	r19, 0xFF	; 255
    5aac:	4f e7       	ldi	r20, 0x7F	; 127
    5aae:	57 e4       	ldi	r21, 0x47	; 71
    5ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ab4:	18 16       	cp	r1, r24
    5ab6:	0c f0       	brlt	.+2      	; 0x5aba <main+0x2998>
    5ab8:	43 c0       	rjmp	.+134    	; 0x5b40 <main+0x2a1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aba:	fe 01       	movw	r30, r28
    5abc:	e1 5a       	subi	r30, 0xA1	; 161
    5abe:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac0:	60 81       	ld	r22, Z
    5ac2:	71 81       	ldd	r23, Z+1	; 0x01
    5ac4:	82 81       	ldd	r24, Z+2	; 0x02
    5ac6:	93 81       	ldd	r25, Z+3	; 0x03
    5ac8:	20 e0       	ldi	r18, 0x00	; 0
    5aca:	30 e0       	ldi	r19, 0x00	; 0
    5acc:	40 e2       	ldi	r20, 0x20	; 32
    5ace:	51 e4       	ldi	r21, 0x41	; 65
    5ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ad4:	dc 01       	movw	r26, r24
    5ad6:	cb 01       	movw	r24, r22
    5ad8:	8e 01       	movw	r16, r28
    5ada:	07 5a       	subi	r16, 0xA7	; 167
    5adc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ade:	bc 01       	movw	r22, r24
    5ae0:	cd 01       	movw	r24, r26
    5ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ae6:	dc 01       	movw	r26, r24
    5ae8:	cb 01       	movw	r24, r22
    5aea:	f8 01       	movw	r30, r16
    5aec:	91 83       	std	Z+1, r25	; 0x01
    5aee:	80 83       	st	Z, r24
    5af0:	1f c0       	rjmp	.+62     	; 0x5b30 <main+0x2a0e>
    5af2:	fe 01       	movw	r30, r28
    5af4:	e9 5a       	subi	r30, 0xA9	; 169
    5af6:	ff 4f       	sbci	r31, 0xFF	; 255
    5af8:	88 ec       	ldi	r24, 0xC8	; 200
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	91 83       	std	Z+1, r25	; 0x01
    5afe:	80 83       	st	Z, r24
    5b00:	fe 01       	movw	r30, r28
    5b02:	e9 5a       	subi	r30, 0xA9	; 169
    5b04:	ff 4f       	sbci	r31, 0xFF	; 255
    5b06:	80 81       	ld	r24, Z
    5b08:	91 81       	ldd	r25, Z+1	; 0x01
    5b0a:	01 97       	sbiw	r24, 0x01	; 1
    5b0c:	f1 f7       	brne	.-4      	; 0x5b0a <main+0x29e8>
    5b0e:	fe 01       	movw	r30, r28
    5b10:	e9 5a       	subi	r30, 0xA9	; 169
    5b12:	ff 4f       	sbci	r31, 0xFF	; 255
    5b14:	91 83       	std	Z+1, r25	; 0x01
    5b16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b18:	de 01       	movw	r26, r28
    5b1a:	a7 5a       	subi	r26, 0xA7	; 167
    5b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b1e:	fe 01       	movw	r30, r28
    5b20:	e7 5a       	subi	r30, 0xA7	; 167
    5b22:	ff 4f       	sbci	r31, 0xFF	; 255
    5b24:	80 81       	ld	r24, Z
    5b26:	91 81       	ldd	r25, Z+1	; 0x01
    5b28:	01 97       	sbiw	r24, 0x01	; 1
    5b2a:	11 96       	adiw	r26, 0x01	; 1
    5b2c:	9c 93       	st	X, r25
    5b2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b30:	fe 01       	movw	r30, r28
    5b32:	e7 5a       	subi	r30, 0xA7	; 167
    5b34:	ff 4f       	sbci	r31, 0xFF	; 255
    5b36:	80 81       	ld	r24, Z
    5b38:	91 81       	ldd	r25, Z+1	; 0x01
    5b3a:	00 97       	sbiw	r24, 0x00	; 0
    5b3c:	d1 f6       	brne	.-76     	; 0x5af2 <main+0x29d0>
    5b3e:	27 c0       	rjmp	.+78     	; 0x5b8e <main+0x2a6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b40:	8e 01       	movw	r16, r28
    5b42:	07 5a       	subi	r16, 0xA7	; 167
    5b44:	1f 4f       	sbci	r17, 0xFF	; 255
    5b46:	fe 01       	movw	r30, r28
    5b48:	e5 5a       	subi	r30, 0xA5	; 165
    5b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4c:	60 81       	ld	r22, Z
    5b4e:	71 81       	ldd	r23, Z+1	; 0x01
    5b50:	82 81       	ldd	r24, Z+2	; 0x02
    5b52:	93 81       	ldd	r25, Z+3	; 0x03
    5b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b58:	dc 01       	movw	r26, r24
    5b5a:	cb 01       	movw	r24, r22
    5b5c:	f8 01       	movw	r30, r16
    5b5e:	91 83       	std	Z+1, r25	; 0x01
    5b60:	80 83       	st	Z, r24
    5b62:	de 01       	movw	r26, r28
    5b64:	ab 5a       	subi	r26, 0xAB	; 171
    5b66:	bf 4f       	sbci	r27, 0xFF	; 255
    5b68:	fe 01       	movw	r30, r28
    5b6a:	e7 5a       	subi	r30, 0xA7	; 167
    5b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6e:	80 81       	ld	r24, Z
    5b70:	91 81       	ldd	r25, Z+1	; 0x01
    5b72:	8d 93       	st	X+, r24
    5b74:	9c 93       	st	X, r25
    5b76:	fe 01       	movw	r30, r28
    5b78:	eb 5a       	subi	r30, 0xAB	; 171
    5b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b7c:	80 81       	ld	r24, Z
    5b7e:	91 81       	ldd	r25, Z+1	; 0x01
    5b80:	01 97       	sbiw	r24, 0x01	; 1
    5b82:	f1 f7       	brne	.-4      	; 0x5b80 <main+0x2a5e>
    5b84:	fe 01       	movw	r30, r28
    5b86:	eb 5a       	subi	r30, 0xAB	; 171
    5b88:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8a:	91 83       	std	Z+1, r25	; 0x01
    5b8c:	80 83       	st	Z, r24
			_delay_ms(5);

			MDIO_vSetPinValue(PORT_D,2,HIGH);
    5b8e:	83 e0       	ldi	r24, 0x03	; 3
    5b90:	62 e0       	ldi	r22, 0x02	; 2
    5b92:	41 e0       	ldi	r20, 0x01	; 1
    5b94:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,3,HIGH);
    5b98:	83 e0       	ldi	r24, 0x03	; 3
    5b9a:	63 e0       	ldi	r22, 0x03	; 3
    5b9c:	41 e0       	ldi	r20, 0x01	; 1
    5b9e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,4,HIGH);
    5ba2:	83 e0       	ldi	r24, 0x03	; 3
    5ba4:	64 e0       	ldi	r22, 0x04	; 4
    5ba6:	41 e0       	ldi	r20, 0x01	; 1
    5ba8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,5,LOW);
    5bac:	83 e0       	ldi	r24, 0x03	; 3
    5bae:	65 e0       	ldi	r22, 0x05	; 5
    5bb0:	40 e0       	ldi	r20, 0x00	; 0
    5bb2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,6,HIGH);
    5bb6:	83 e0       	ldi	r24, 0x03	; 3
    5bb8:	66 e0       	ldi	r22, 0x06	; 6
    5bba:	41 e0       	ldi	r20, 0x01	; 1
    5bbc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,7,HIGH);
    5bc0:	83 e0       	ldi	r24, 0x03	; 3
    5bc2:	67 e0       	ldi	r22, 0x07	; 7
    5bc4:	41 e0       	ldi	r20, 0x01	; 1
    5bc6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPortValue(PORT_B,minutes_counter%10);
    5bca:	80 91 f2 00 	lds	r24, 0x00F2
    5bce:	9a e0       	ldi	r25, 0x0A	; 10
    5bd0:	69 2f       	mov	r22, r25
    5bd2:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__udivmodqi4>
    5bd6:	89 2f       	mov	r24, r25
    5bd8:	98 2f       	mov	r25, r24
    5bda:	81 e0       	ldi	r24, 0x01	; 1
    5bdc:	69 2f       	mov	r22, r25
    5bde:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
    5be2:	fe 01       	movw	r30, r28
    5be4:	ef 5a       	subi	r30, 0xAF	; 175
    5be6:	ff 4f       	sbci	r31, 0xFF	; 255
    5be8:	80 e0       	ldi	r24, 0x00	; 0
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	a0 ea       	ldi	r26, 0xA0	; 160
    5bee:	b0 e4       	ldi	r27, 0x40	; 64
    5bf0:	80 83       	st	Z, r24
    5bf2:	91 83       	std	Z+1, r25	; 0x01
    5bf4:	a2 83       	std	Z+2, r26	; 0x02
    5bf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5bf8:	8e 01       	movw	r16, r28
    5bfa:	03 5b       	subi	r16, 0xB3	; 179
    5bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bfe:	fe 01       	movw	r30, r28
    5c00:	ef 5a       	subi	r30, 0xAF	; 175
    5c02:	ff 4f       	sbci	r31, 0xFF	; 255
    5c04:	60 81       	ld	r22, Z
    5c06:	71 81       	ldd	r23, Z+1	; 0x01
    5c08:	82 81       	ldd	r24, Z+2	; 0x02
    5c0a:	93 81       	ldd	r25, Z+3	; 0x03
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	4a ef       	ldi	r20, 0xFA	; 250
    5c12:	54 e4       	ldi	r21, 0x44	; 68
    5c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	f8 01       	movw	r30, r16
    5c1e:	80 83       	st	Z, r24
    5c20:	91 83       	std	Z+1, r25	; 0x01
    5c22:	a2 83       	std	Z+2, r26	; 0x02
    5c24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c26:	fe 01       	movw	r30, r28
    5c28:	e3 5b       	subi	r30, 0xB3	; 179
    5c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2c:	60 81       	ld	r22, Z
    5c2e:	71 81       	ldd	r23, Z+1	; 0x01
    5c30:	82 81       	ldd	r24, Z+2	; 0x02
    5c32:	93 81       	ldd	r25, Z+3	; 0x03
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	30 e0       	ldi	r19, 0x00	; 0
    5c38:	40 e8       	ldi	r20, 0x80	; 128
    5c3a:	5f e3       	ldi	r21, 0x3F	; 63
    5c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c40:	88 23       	and	r24, r24
    5c42:	44 f4       	brge	.+16     	; 0x5c54 <main+0x2b32>
		__ticks = 1;
    5c44:	fe 01       	movw	r30, r28
    5c46:	e5 5b       	subi	r30, 0xB5	; 181
    5c48:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4a:	81 e0       	ldi	r24, 0x01	; 1
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	91 83       	std	Z+1, r25	; 0x01
    5c50:	80 83       	st	Z, r24
    5c52:	64 c0       	rjmp	.+200    	; 0x5d1c <main+0x2bfa>
	else if (__tmp > 65535)
    5c54:	fe 01       	movw	r30, r28
    5c56:	e3 5b       	subi	r30, 0xB3	; 179
    5c58:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5a:	60 81       	ld	r22, Z
    5c5c:	71 81       	ldd	r23, Z+1	; 0x01
    5c5e:	82 81       	ldd	r24, Z+2	; 0x02
    5c60:	93 81       	ldd	r25, Z+3	; 0x03
    5c62:	20 e0       	ldi	r18, 0x00	; 0
    5c64:	3f ef       	ldi	r19, 0xFF	; 255
    5c66:	4f e7       	ldi	r20, 0x7F	; 127
    5c68:	57 e4       	ldi	r21, 0x47	; 71
    5c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5c6e:	18 16       	cp	r1, r24
    5c70:	0c f0       	brlt	.+2      	; 0x5c74 <main+0x2b52>
    5c72:	43 c0       	rjmp	.+134    	; 0x5cfa <main+0x2bd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c74:	fe 01       	movw	r30, r28
    5c76:	ef 5a       	subi	r30, 0xAF	; 175
    5c78:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7a:	60 81       	ld	r22, Z
    5c7c:	71 81       	ldd	r23, Z+1	; 0x01
    5c7e:	82 81       	ldd	r24, Z+2	; 0x02
    5c80:	93 81       	ldd	r25, Z+3	; 0x03
    5c82:	20 e0       	ldi	r18, 0x00	; 0
    5c84:	30 e0       	ldi	r19, 0x00	; 0
    5c86:	40 e2       	ldi	r20, 0x20	; 32
    5c88:	51 e4       	ldi	r21, 0x41	; 65
    5c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c8e:	dc 01       	movw	r26, r24
    5c90:	cb 01       	movw	r24, r22
    5c92:	8e 01       	movw	r16, r28
    5c94:	05 5b       	subi	r16, 0xB5	; 181
    5c96:	1f 4f       	sbci	r17, 0xFF	; 255
    5c98:	bc 01       	movw	r22, r24
    5c9a:	cd 01       	movw	r24, r26
    5c9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ca0:	dc 01       	movw	r26, r24
    5ca2:	cb 01       	movw	r24, r22
    5ca4:	f8 01       	movw	r30, r16
    5ca6:	91 83       	std	Z+1, r25	; 0x01
    5ca8:	80 83       	st	Z, r24
    5caa:	1f c0       	rjmp	.+62     	; 0x5cea <main+0x2bc8>
    5cac:	fe 01       	movw	r30, r28
    5cae:	e7 5b       	subi	r30, 0xB7	; 183
    5cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb2:	88 ec       	ldi	r24, 0xC8	; 200
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	91 83       	std	Z+1, r25	; 0x01
    5cb8:	80 83       	st	Z, r24
    5cba:	fe 01       	movw	r30, r28
    5cbc:	e7 5b       	subi	r30, 0xB7	; 183
    5cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc0:	80 81       	ld	r24, Z
    5cc2:	91 81       	ldd	r25, Z+1	; 0x01
    5cc4:	01 97       	sbiw	r24, 0x01	; 1
    5cc6:	f1 f7       	brne	.-4      	; 0x5cc4 <main+0x2ba2>
    5cc8:	fe 01       	movw	r30, r28
    5cca:	e7 5b       	subi	r30, 0xB7	; 183
    5ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cce:	91 83       	std	Z+1, r25	; 0x01
    5cd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cd2:	de 01       	movw	r26, r28
    5cd4:	a5 5b       	subi	r26, 0xB5	; 181
    5cd6:	bf 4f       	sbci	r27, 0xFF	; 255
    5cd8:	fe 01       	movw	r30, r28
    5cda:	e5 5b       	subi	r30, 0xB5	; 181
    5cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cde:	80 81       	ld	r24, Z
    5ce0:	91 81       	ldd	r25, Z+1	; 0x01
    5ce2:	01 97       	sbiw	r24, 0x01	; 1
    5ce4:	11 96       	adiw	r26, 0x01	; 1
    5ce6:	9c 93       	st	X, r25
    5ce8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cea:	fe 01       	movw	r30, r28
    5cec:	e5 5b       	subi	r30, 0xB5	; 181
    5cee:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf0:	80 81       	ld	r24, Z
    5cf2:	91 81       	ldd	r25, Z+1	; 0x01
    5cf4:	00 97       	sbiw	r24, 0x00	; 0
    5cf6:	d1 f6       	brne	.-76     	; 0x5cac <main+0x2b8a>
    5cf8:	27 c0       	rjmp	.+78     	; 0x5d48 <main+0x2c26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cfa:	8e 01       	movw	r16, r28
    5cfc:	05 5b       	subi	r16, 0xB5	; 181
    5cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    5d00:	fe 01       	movw	r30, r28
    5d02:	e3 5b       	subi	r30, 0xB3	; 179
    5d04:	ff 4f       	sbci	r31, 0xFF	; 255
    5d06:	60 81       	ld	r22, Z
    5d08:	71 81       	ldd	r23, Z+1	; 0x01
    5d0a:	82 81       	ldd	r24, Z+2	; 0x02
    5d0c:	93 81       	ldd	r25, Z+3	; 0x03
    5d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d12:	dc 01       	movw	r26, r24
    5d14:	cb 01       	movw	r24, r22
    5d16:	f8 01       	movw	r30, r16
    5d18:	91 83       	std	Z+1, r25	; 0x01
    5d1a:	80 83       	st	Z, r24
    5d1c:	de 01       	movw	r26, r28
    5d1e:	a9 5b       	subi	r26, 0xB9	; 185
    5d20:	bf 4f       	sbci	r27, 0xFF	; 255
    5d22:	fe 01       	movw	r30, r28
    5d24:	e5 5b       	subi	r30, 0xB5	; 181
    5d26:	ff 4f       	sbci	r31, 0xFF	; 255
    5d28:	80 81       	ld	r24, Z
    5d2a:	91 81       	ldd	r25, Z+1	; 0x01
    5d2c:	8d 93       	st	X+, r24
    5d2e:	9c 93       	st	X, r25
    5d30:	fe 01       	movw	r30, r28
    5d32:	e9 5b       	subi	r30, 0xB9	; 185
    5d34:	ff 4f       	sbci	r31, 0xFF	; 255
    5d36:	80 81       	ld	r24, Z
    5d38:	91 81       	ldd	r25, Z+1	; 0x01
    5d3a:	01 97       	sbiw	r24, 0x01	; 1
    5d3c:	f1 f7       	brne	.-4      	; 0x5d3a <main+0x2c18>
    5d3e:	fe 01       	movw	r30, r28
    5d40:	e9 5b       	subi	r30, 0xB9	; 185
    5d42:	ff 4f       	sbci	r31, 0xFF	; 255
    5d44:	91 83       	std	Z+1, r25	; 0x01
    5d46:	80 83       	st	Z, r24
			_delay_ms(5);

			MDIO_vSetPinValue(PORT_D,2,HIGH);
    5d48:	83 e0       	ldi	r24, 0x03	; 3
    5d4a:	62 e0       	ldi	r22, 0x02	; 2
    5d4c:	41 e0       	ldi	r20, 0x01	; 1
    5d4e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,3,HIGH);
    5d52:	83 e0       	ldi	r24, 0x03	; 3
    5d54:	63 e0       	ldi	r22, 0x03	; 3
    5d56:	41 e0       	ldi	r20, 0x01	; 1
    5d58:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,4,LOW);
    5d5c:	83 e0       	ldi	r24, 0x03	; 3
    5d5e:	64 e0       	ldi	r22, 0x04	; 4
    5d60:	40 e0       	ldi	r20, 0x00	; 0
    5d62:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,5,HIGH);
    5d66:	83 e0       	ldi	r24, 0x03	; 3
    5d68:	65 e0       	ldi	r22, 0x05	; 5
    5d6a:	41 e0       	ldi	r20, 0x01	; 1
    5d6c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,6,HIGH);
    5d70:	83 e0       	ldi	r24, 0x03	; 3
    5d72:	66 e0       	ldi	r22, 0x06	; 6
    5d74:	41 e0       	ldi	r20, 0x01	; 1
    5d76:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,7,HIGH);
    5d7a:	83 e0       	ldi	r24, 0x03	; 3
    5d7c:	67 e0       	ldi	r22, 0x07	; 7
    5d7e:	41 e0       	ldi	r20, 0x01	; 1
    5d80:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPortValue(PORT_B,minutes_counter/10);
    5d84:	80 91 f2 00 	lds	r24, 0x00F2
    5d88:	9a e0       	ldi	r25, 0x0A	; 10
    5d8a:	69 2f       	mov	r22, r25
    5d8c:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__udivmodqi4>
    5d90:	98 2f       	mov	r25, r24
    5d92:	81 e0       	ldi	r24, 0x01	; 1
    5d94:	69 2f       	mov	r22, r25
    5d96:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
    5d9a:	fe 01       	movw	r30, r28
    5d9c:	ed 5b       	subi	r30, 0xBD	; 189
    5d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5da0:	80 e0       	ldi	r24, 0x00	; 0
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	a0 ea       	ldi	r26, 0xA0	; 160
    5da6:	b0 e4       	ldi	r27, 0x40	; 64
    5da8:	80 83       	st	Z, r24
    5daa:	91 83       	std	Z+1, r25	; 0x01
    5dac:	a2 83       	std	Z+2, r26	; 0x02
    5dae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5db0:	8e 01       	movw	r16, r28
    5db2:	01 5c       	subi	r16, 0xC1	; 193
    5db4:	1f 4f       	sbci	r17, 0xFF	; 255
    5db6:	fe 01       	movw	r30, r28
    5db8:	ed 5b       	subi	r30, 0xBD	; 189
    5dba:	ff 4f       	sbci	r31, 0xFF	; 255
    5dbc:	60 81       	ld	r22, Z
    5dbe:	71 81       	ldd	r23, Z+1	; 0x01
    5dc0:	82 81       	ldd	r24, Z+2	; 0x02
    5dc2:	93 81       	ldd	r25, Z+3	; 0x03
    5dc4:	20 e0       	ldi	r18, 0x00	; 0
    5dc6:	30 e0       	ldi	r19, 0x00	; 0
    5dc8:	4a ef       	ldi	r20, 0xFA	; 250
    5dca:	54 e4       	ldi	r21, 0x44	; 68
    5dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dd0:	dc 01       	movw	r26, r24
    5dd2:	cb 01       	movw	r24, r22
    5dd4:	f8 01       	movw	r30, r16
    5dd6:	80 83       	st	Z, r24
    5dd8:	91 83       	std	Z+1, r25	; 0x01
    5dda:	a2 83       	std	Z+2, r26	; 0x02
    5ddc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dde:	fe 01       	movw	r30, r28
    5de0:	ff 96       	adiw	r30, 0x3f	; 63
    5de2:	60 81       	ld	r22, Z
    5de4:	71 81       	ldd	r23, Z+1	; 0x01
    5de6:	82 81       	ldd	r24, Z+2	; 0x02
    5de8:	93 81       	ldd	r25, Z+3	; 0x03
    5dea:	20 e0       	ldi	r18, 0x00	; 0
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	40 e8       	ldi	r20, 0x80	; 128
    5df0:	5f e3       	ldi	r21, 0x3F	; 63
    5df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5df6:	88 23       	and	r24, r24
    5df8:	2c f4       	brge	.+10     	; 0x5e04 <main+0x2ce2>
		__ticks = 1;
    5dfa:	81 e0       	ldi	r24, 0x01	; 1
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	9e af       	std	Y+62, r25	; 0x3e
    5e00:	8d af       	std	Y+61, r24	; 0x3d
    5e02:	46 c0       	rjmp	.+140    	; 0x5e90 <main+0x2d6e>
	else if (__tmp > 65535)
    5e04:	fe 01       	movw	r30, r28
    5e06:	ff 96       	adiw	r30, 0x3f	; 63
    5e08:	60 81       	ld	r22, Z
    5e0a:	71 81       	ldd	r23, Z+1	; 0x01
    5e0c:	82 81       	ldd	r24, Z+2	; 0x02
    5e0e:	93 81       	ldd	r25, Z+3	; 0x03
    5e10:	20 e0       	ldi	r18, 0x00	; 0
    5e12:	3f ef       	ldi	r19, 0xFF	; 255
    5e14:	4f e7       	ldi	r20, 0x7F	; 127
    5e16:	57 e4       	ldi	r21, 0x47	; 71
    5e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e1c:	18 16       	cp	r1, r24
    5e1e:	64 f5       	brge	.+88     	; 0x5e78 <main+0x2d56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e20:	fe 01       	movw	r30, r28
    5e22:	ed 5b       	subi	r30, 0xBD	; 189
    5e24:	ff 4f       	sbci	r31, 0xFF	; 255
    5e26:	60 81       	ld	r22, Z
    5e28:	71 81       	ldd	r23, Z+1	; 0x01
    5e2a:	82 81       	ldd	r24, Z+2	; 0x02
    5e2c:	93 81       	ldd	r25, Z+3	; 0x03
    5e2e:	20 e0       	ldi	r18, 0x00	; 0
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	40 e2       	ldi	r20, 0x20	; 32
    5e34:	51 e4       	ldi	r21, 0x41	; 65
    5e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e3a:	dc 01       	movw	r26, r24
    5e3c:	cb 01       	movw	r24, r22
    5e3e:	bc 01       	movw	r22, r24
    5e40:	cd 01       	movw	r24, r26
    5e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e46:	dc 01       	movw	r26, r24
    5e48:	cb 01       	movw	r24, r22
    5e4a:	9e af       	std	Y+62, r25	; 0x3e
    5e4c:	8d af       	std	Y+61, r24	; 0x3d
    5e4e:	0f c0       	rjmp	.+30     	; 0x5e6e <main+0x2d4c>
    5e50:	88 ec       	ldi	r24, 0xC8	; 200
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	9c af       	std	Y+60, r25	; 0x3c
    5e56:	8b af       	std	Y+59, r24	; 0x3b
    5e58:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e5a:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e5c:	01 97       	sbiw	r24, 0x01	; 1
    5e5e:	f1 f7       	brne	.-4      	; 0x5e5c <main+0x2d3a>
    5e60:	9c af       	std	Y+60, r25	; 0x3c
    5e62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e64:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e66:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e68:	01 97       	sbiw	r24, 0x01	; 1
    5e6a:	9e af       	std	Y+62, r25	; 0x3e
    5e6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e70:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e72:	00 97       	sbiw	r24, 0x00	; 0
    5e74:	69 f7       	brne	.-38     	; 0x5e50 <main+0x2d2e>
    5e76:	16 c0       	rjmp	.+44     	; 0x5ea4 <main+0x2d82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e78:	fe 01       	movw	r30, r28
    5e7a:	ff 96       	adiw	r30, 0x3f	; 63
    5e7c:	60 81       	ld	r22, Z
    5e7e:	71 81       	ldd	r23, Z+1	; 0x01
    5e80:	82 81       	ldd	r24, Z+2	; 0x02
    5e82:	93 81       	ldd	r25, Z+3	; 0x03
    5e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e88:	dc 01       	movw	r26, r24
    5e8a:	cb 01       	movw	r24, r22
    5e8c:	9e af       	std	Y+62, r25	; 0x3e
    5e8e:	8d af       	std	Y+61, r24	; 0x3d
    5e90:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e92:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e94:	9a af       	std	Y+58, r25	; 0x3a
    5e96:	89 af       	std	Y+57, r24	; 0x39
    5e98:	89 ad       	ldd	r24, Y+57	; 0x39
    5e9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e9c:	01 97       	sbiw	r24, 0x01	; 1
    5e9e:	f1 f7       	brne	.-4      	; 0x5e9c <main+0x2d7a>
    5ea0:	9a af       	std	Y+58, r25	; 0x3a
    5ea2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(5);

			MDIO_vSetPinValue(PORT_D,2,HIGH);
    5ea4:	83 e0       	ldi	r24, 0x03	; 3
    5ea6:	62 e0       	ldi	r22, 0x02	; 2
    5ea8:	41 e0       	ldi	r20, 0x01	; 1
    5eaa:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,3,LOW);
    5eae:	83 e0       	ldi	r24, 0x03	; 3
    5eb0:	63 e0       	ldi	r22, 0x03	; 3
    5eb2:	40 e0       	ldi	r20, 0x00	; 0
    5eb4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,4,HIGH);
    5eb8:	83 e0       	ldi	r24, 0x03	; 3
    5eba:	64 e0       	ldi	r22, 0x04	; 4
    5ebc:	41 e0       	ldi	r20, 0x01	; 1
    5ebe:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,5,HIGH);
    5ec2:	83 e0       	ldi	r24, 0x03	; 3
    5ec4:	65 e0       	ldi	r22, 0x05	; 5
    5ec6:	41 e0       	ldi	r20, 0x01	; 1
    5ec8:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,6,HIGH);
    5ecc:	83 e0       	ldi	r24, 0x03	; 3
    5ece:	66 e0       	ldi	r22, 0x06	; 6
    5ed0:	41 e0       	ldi	r20, 0x01	; 1
    5ed2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,7,HIGH);
    5ed6:	83 e0       	ldi	r24, 0x03	; 3
    5ed8:	67 e0       	ldi	r22, 0x07	; 7
    5eda:	41 e0       	ldi	r20, 0x01	; 1
    5edc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPortValue(PORT_B,hours_counter%10);
    5ee0:	80 91 f3 00 	lds	r24, 0x00F3
    5ee4:	9a e0       	ldi	r25, 0x0A	; 10
    5ee6:	69 2f       	mov	r22, r25
    5ee8:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__udivmodqi4>
    5eec:	89 2f       	mov	r24, r25
    5eee:	98 2f       	mov	r25, r24
    5ef0:	81 e0       	ldi	r24, 0x01	; 1
    5ef2:	69 2f       	mov	r22, r25
    5ef4:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
    5ef8:	80 e0       	ldi	r24, 0x00	; 0
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	a0 ea       	ldi	r26, 0xA0	; 160
    5efe:	b0 e4       	ldi	r27, 0x40	; 64
    5f00:	8d ab       	std	Y+53, r24	; 0x35
    5f02:	9e ab       	std	Y+54, r25	; 0x36
    5f04:	af ab       	std	Y+55, r26	; 0x37
    5f06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f08:	6d a9       	ldd	r22, Y+53	; 0x35
    5f0a:	7e a9       	ldd	r23, Y+54	; 0x36
    5f0c:	8f a9       	ldd	r24, Y+55	; 0x37
    5f0e:	98 ad       	ldd	r25, Y+56	; 0x38
    5f10:	20 e0       	ldi	r18, 0x00	; 0
    5f12:	30 e0       	ldi	r19, 0x00	; 0
    5f14:	4a ef       	ldi	r20, 0xFA	; 250
    5f16:	54 e4       	ldi	r21, 0x44	; 68
    5f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f1c:	dc 01       	movw	r26, r24
    5f1e:	cb 01       	movw	r24, r22
    5f20:	89 ab       	std	Y+49, r24	; 0x31
    5f22:	9a ab       	std	Y+50, r25	; 0x32
    5f24:	ab ab       	std	Y+51, r26	; 0x33
    5f26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f28:	69 a9       	ldd	r22, Y+49	; 0x31
    5f2a:	7a a9       	ldd	r23, Y+50	; 0x32
    5f2c:	8b a9       	ldd	r24, Y+51	; 0x33
    5f2e:	9c a9       	ldd	r25, Y+52	; 0x34
    5f30:	20 e0       	ldi	r18, 0x00	; 0
    5f32:	30 e0       	ldi	r19, 0x00	; 0
    5f34:	40 e8       	ldi	r20, 0x80	; 128
    5f36:	5f e3       	ldi	r21, 0x3F	; 63
    5f38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5f3c:	88 23       	and	r24, r24
    5f3e:	2c f4       	brge	.+10     	; 0x5f4a <main+0x2e28>
		__ticks = 1;
    5f40:	81 e0       	ldi	r24, 0x01	; 1
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	98 ab       	std	Y+48, r25	; 0x30
    5f46:	8f a7       	std	Y+47, r24	; 0x2f
    5f48:	3f c0       	rjmp	.+126    	; 0x5fc8 <main+0x2ea6>
	else if (__tmp > 65535)
    5f4a:	69 a9       	ldd	r22, Y+49	; 0x31
    5f4c:	7a a9       	ldd	r23, Y+50	; 0x32
    5f4e:	8b a9       	ldd	r24, Y+51	; 0x33
    5f50:	9c a9       	ldd	r25, Y+52	; 0x34
    5f52:	20 e0       	ldi	r18, 0x00	; 0
    5f54:	3f ef       	ldi	r19, 0xFF	; 255
    5f56:	4f e7       	ldi	r20, 0x7F	; 127
    5f58:	57 e4       	ldi	r21, 0x47	; 71
    5f5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5f5e:	18 16       	cp	r1, r24
    5f60:	4c f5       	brge	.+82     	; 0x5fb4 <main+0x2e92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f62:	6d a9       	ldd	r22, Y+53	; 0x35
    5f64:	7e a9       	ldd	r23, Y+54	; 0x36
    5f66:	8f a9       	ldd	r24, Y+55	; 0x37
    5f68:	98 ad       	ldd	r25, Y+56	; 0x38
    5f6a:	20 e0       	ldi	r18, 0x00	; 0
    5f6c:	30 e0       	ldi	r19, 0x00	; 0
    5f6e:	40 e2       	ldi	r20, 0x20	; 32
    5f70:	51 e4       	ldi	r21, 0x41	; 65
    5f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f76:	dc 01       	movw	r26, r24
    5f78:	cb 01       	movw	r24, r22
    5f7a:	bc 01       	movw	r22, r24
    5f7c:	cd 01       	movw	r24, r26
    5f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f82:	dc 01       	movw	r26, r24
    5f84:	cb 01       	movw	r24, r22
    5f86:	98 ab       	std	Y+48, r25	; 0x30
    5f88:	8f a7       	std	Y+47, r24	; 0x2f
    5f8a:	0f c0       	rjmp	.+30     	; 0x5faa <main+0x2e88>
    5f8c:	88 ec       	ldi	r24, 0xC8	; 200
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	9e a7       	std	Y+46, r25	; 0x2e
    5f92:	8d a7       	std	Y+45, r24	; 0x2d
    5f94:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f96:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f98:	01 97       	sbiw	r24, 0x01	; 1
    5f9a:	f1 f7       	brne	.-4      	; 0x5f98 <main+0x2e76>
    5f9c:	9e a7       	std	Y+46, r25	; 0x2e
    5f9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fa2:	98 a9       	ldd	r25, Y+48	; 0x30
    5fa4:	01 97       	sbiw	r24, 0x01	; 1
    5fa6:	98 ab       	std	Y+48, r25	; 0x30
    5fa8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fac:	98 a9       	ldd	r25, Y+48	; 0x30
    5fae:	00 97       	sbiw	r24, 0x00	; 0
    5fb0:	69 f7       	brne	.-38     	; 0x5f8c <main+0x2e6a>
    5fb2:	14 c0       	rjmp	.+40     	; 0x5fdc <main+0x2eba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fb4:	69 a9       	ldd	r22, Y+49	; 0x31
    5fb6:	7a a9       	ldd	r23, Y+50	; 0x32
    5fb8:	8b a9       	ldd	r24, Y+51	; 0x33
    5fba:	9c a9       	ldd	r25, Y+52	; 0x34
    5fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fc0:	dc 01       	movw	r26, r24
    5fc2:	cb 01       	movw	r24, r22
    5fc4:	98 ab       	std	Y+48, r25	; 0x30
    5fc6:	8f a7       	std	Y+47, r24	; 0x2f
    5fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5fca:	98 a9       	ldd	r25, Y+48	; 0x30
    5fcc:	9c a7       	std	Y+44, r25	; 0x2c
    5fce:	8b a7       	std	Y+43, r24	; 0x2b
    5fd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    5fd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    5fd4:	01 97       	sbiw	r24, 0x01	; 1
    5fd6:	f1 f7       	brne	.-4      	; 0x5fd4 <main+0x2eb2>
    5fd8:	9c a7       	std	Y+44, r25	; 0x2c
    5fda:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5);

			MDIO_vSetPinValue(PORT_D,2,LOW);
    5fdc:	83 e0       	ldi	r24, 0x03	; 3
    5fde:	62 e0       	ldi	r22, 0x02	; 2
    5fe0:	40 e0       	ldi	r20, 0x00	; 0
    5fe2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,3,HIGH);
    5fe6:	83 e0       	ldi	r24, 0x03	; 3
    5fe8:	63 e0       	ldi	r22, 0x03	; 3
    5fea:	41 e0       	ldi	r20, 0x01	; 1
    5fec:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,4,HIGH);
    5ff0:	83 e0       	ldi	r24, 0x03	; 3
    5ff2:	64 e0       	ldi	r22, 0x04	; 4
    5ff4:	41 e0       	ldi	r20, 0x01	; 1
    5ff6:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,5,HIGH);
    5ffa:	83 e0       	ldi	r24, 0x03	; 3
    5ffc:	65 e0       	ldi	r22, 0x05	; 5
    5ffe:	41 e0       	ldi	r20, 0x01	; 1
    6000:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,6,HIGH);
    6004:	83 e0       	ldi	r24, 0x03	; 3
    6006:	66 e0       	ldi	r22, 0x06	; 6
    6008:	41 e0       	ldi	r20, 0x01	; 1
    600a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPinValue(PORT_D,7,HIGH);
    600e:	83 e0       	ldi	r24, 0x03	; 3
    6010:	67 e0       	ldi	r22, 0x07	; 7
    6012:	41 e0       	ldi	r20, 0x01	; 1
    6014:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <MDIO_vSetPinValue>
			MDIO_vSetPortValue(PORT_B,hours_counter/10);
    6018:	80 91 f3 00 	lds	r24, 0x00F3
    601c:	9a e0       	ldi	r25, 0x0A	; 10
    601e:	69 2f       	mov	r22, r25
    6020:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__udivmodqi4>
    6024:	98 2f       	mov	r25, r24
    6026:	81 e0       	ldi	r24, 0x01	; 1
    6028:	69 2f       	mov	r22, r25
    602a:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <MDIO_vSetPortValue>
    602e:	80 e0       	ldi	r24, 0x00	; 0
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	a0 ea       	ldi	r26, 0xA0	; 160
    6034:	b0 e4       	ldi	r27, 0x40	; 64
    6036:	8f a3       	std	Y+39, r24	; 0x27
    6038:	98 a7       	std	Y+40, r25	; 0x28
    603a:	a9 a7       	std	Y+41, r26	; 0x29
    603c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    603e:	6f a1       	ldd	r22, Y+39	; 0x27
    6040:	78 a5       	ldd	r23, Y+40	; 0x28
    6042:	89 a5       	ldd	r24, Y+41	; 0x29
    6044:	9a a5       	ldd	r25, Y+42	; 0x2a
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	4a ef       	ldi	r20, 0xFA	; 250
    604c:	54 e4       	ldi	r21, 0x44	; 68
    604e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6052:	dc 01       	movw	r26, r24
    6054:	cb 01       	movw	r24, r22
    6056:	8b a3       	std	Y+35, r24	; 0x23
    6058:	9c a3       	std	Y+36, r25	; 0x24
    605a:	ad a3       	std	Y+37, r26	; 0x25
    605c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    605e:	6b a1       	ldd	r22, Y+35	; 0x23
    6060:	7c a1       	ldd	r23, Y+36	; 0x24
    6062:	8d a1       	ldd	r24, Y+37	; 0x25
    6064:	9e a1       	ldd	r25, Y+38	; 0x26
    6066:	20 e0       	ldi	r18, 0x00	; 0
    6068:	30 e0       	ldi	r19, 0x00	; 0
    606a:	40 e8       	ldi	r20, 0x80	; 128
    606c:	5f e3       	ldi	r21, 0x3F	; 63
    606e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6072:	88 23       	and	r24, r24
    6074:	2c f4       	brge	.+10     	; 0x6080 <main+0x2f5e>
		__ticks = 1;
    6076:	81 e0       	ldi	r24, 0x01	; 1
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	9a a3       	std	Y+34, r25	; 0x22
    607c:	89 a3       	std	Y+33, r24	; 0x21
    607e:	3f c0       	rjmp	.+126    	; 0x60fe <main+0x2fdc>
	else if (__tmp > 65535)
    6080:	6b a1       	ldd	r22, Y+35	; 0x23
    6082:	7c a1       	ldd	r23, Y+36	; 0x24
    6084:	8d a1       	ldd	r24, Y+37	; 0x25
    6086:	9e a1       	ldd	r25, Y+38	; 0x26
    6088:	20 e0       	ldi	r18, 0x00	; 0
    608a:	3f ef       	ldi	r19, 0xFF	; 255
    608c:	4f e7       	ldi	r20, 0x7F	; 127
    608e:	57 e4       	ldi	r21, 0x47	; 71
    6090:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6094:	18 16       	cp	r1, r24
    6096:	4c f5       	brge	.+82     	; 0x60ea <main+0x2fc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6098:	6f a1       	ldd	r22, Y+39	; 0x27
    609a:	78 a5       	ldd	r23, Y+40	; 0x28
    609c:	89 a5       	ldd	r24, Y+41	; 0x29
    609e:	9a a5       	ldd	r25, Y+42	; 0x2a
    60a0:	20 e0       	ldi	r18, 0x00	; 0
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	40 e2       	ldi	r20, 0x20	; 32
    60a6:	51 e4       	ldi	r21, 0x41	; 65
    60a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	bc 01       	movw	r22, r24
    60b2:	cd 01       	movw	r24, r26
    60b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60b8:	dc 01       	movw	r26, r24
    60ba:	cb 01       	movw	r24, r22
    60bc:	9a a3       	std	Y+34, r25	; 0x22
    60be:	89 a3       	std	Y+33, r24	; 0x21
    60c0:	0f c0       	rjmp	.+30     	; 0x60e0 <main+0x2fbe>
    60c2:	88 ec       	ldi	r24, 0xC8	; 200
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	98 a3       	std	Y+32, r25	; 0x20
    60c8:	8f 8f       	std	Y+31, r24	; 0x1f
    60ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60cc:	98 a1       	ldd	r25, Y+32	; 0x20
    60ce:	01 97       	sbiw	r24, 0x01	; 1
    60d0:	f1 f7       	brne	.-4      	; 0x60ce <main+0x2fac>
    60d2:	98 a3       	std	Y+32, r25	; 0x20
    60d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60d6:	89 a1       	ldd	r24, Y+33	; 0x21
    60d8:	9a a1       	ldd	r25, Y+34	; 0x22
    60da:	01 97       	sbiw	r24, 0x01	; 1
    60dc:	9a a3       	std	Y+34, r25	; 0x22
    60de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60e0:	89 a1       	ldd	r24, Y+33	; 0x21
    60e2:	9a a1       	ldd	r25, Y+34	; 0x22
    60e4:	00 97       	sbiw	r24, 0x00	; 0
    60e6:	69 f7       	brne	.-38     	; 0x60c2 <main+0x2fa0>
    60e8:	14 c0       	rjmp	.+40     	; 0x6112 <main+0x2ff0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ea:	6b a1       	ldd	r22, Y+35	; 0x23
    60ec:	7c a1       	ldd	r23, Y+36	; 0x24
    60ee:	8d a1       	ldd	r24, Y+37	; 0x25
    60f0:	9e a1       	ldd	r25, Y+38	; 0x26
    60f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f6:	dc 01       	movw	r26, r24
    60f8:	cb 01       	movw	r24, r22
    60fa:	9a a3       	std	Y+34, r25	; 0x22
    60fc:	89 a3       	std	Y+33, r24	; 0x21
    60fe:	89 a1       	ldd	r24, Y+33	; 0x21
    6100:	9a a1       	ldd	r25, Y+34	; 0x22
    6102:	9e 8f       	std	Y+30, r25	; 0x1e
    6104:	8d 8f       	std	Y+29, r24	; 0x1d
    6106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6108:	9e 8d       	ldd	r25, Y+30	; 0x1e
    610a:	01 97       	sbiw	r24, 0x01	; 1
    610c:	f1 f7       	brne	.-4      	; 0x610a <main+0x2fe8>
    610e:	9e 8f       	std	Y+30, r25	; 0x1e
    6110:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);



			if (seconds_counter==60)
    6112:	80 91 f1 00 	lds	r24, 0x00F1
    6116:	8c 33       	cpi	r24, 0x3C	; 60
    6118:	39 f4       	brne	.+14     	; 0x6128 <main+0x3006>
					{
						seconds_counter=0;
    611a:	10 92 f1 00 	sts	0x00F1, r1
						minutes_counter++;
    611e:	80 91 f2 00 	lds	r24, 0x00F2
    6122:	8f 5f       	subi	r24, 0xFF	; 255
    6124:	80 93 f2 00 	sts	0x00F2, r24
					}
					if (minutes_counter==60)
    6128:	80 91 f2 00 	lds	r24, 0x00F2
    612c:	8c 33       	cpi	r24, 0x3C	; 60
    612e:	39 f4       	brne	.+14     	; 0x613e <main+0x301c>
					{
						minutes_counter=0;
    6130:	10 92 f2 00 	sts	0x00F2, r1
						hours_counter++;
    6134:	80 91 f3 00 	lds	r24, 0x00F3
    6138:	8f 5f       	subi	r24, 0xFF	; 255
    613a:	80 93 f3 00 	sts	0x00F3, r24
					}
					if (hours_counter==24)
    613e:	80 91 f3 00 	lds	r24, 0x00F3
    6142:	88 31       	cpi	r24, 0x18	; 24
    6144:	11 f4       	brne	.+4      	; 0x614a <main+0x3028>
					{
						hours_counter=0;
    6146:	10 92 f3 00 	sts	0x00F3, r1
					}

					if (seconds_counter>60 || minutes_counter>60 || hours_counter>24 ){
    614a:	80 91 f1 00 	lds	r24, 0x00F1
    614e:	8d 33       	cpi	r24, 0x3D	; 61
    6150:	48 f4       	brcc	.+18     	; 0x6164 <main+0x3042>
    6152:	80 91 f2 00 	lds	r24, 0x00F2
    6156:	8d 33       	cpi	r24, 0x3D	; 61
    6158:	28 f4       	brcc	.+10     	; 0x6164 <main+0x3042>
    615a:	80 91 f3 00 	lds	r24, 0x00F3
    615e:	89 31       	cpi	r24, 0x19	; 25
    6160:	08 f4       	brcc	.+2      	; 0x6164 <main+0x3042>
    6162:	8f c0       	rjmp	.+286    	; 0x6282 <main+0x3160>
						HLCD_vDisplayClear();
    6164:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
						MUSART_vTransmitData(66);
    6168:	82 e4       	ldi	r24, 0x42	; 66
    616a:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
						HLCD_vSendString("Invalid Time");
    616e:	8d ea       	ldi	r24, 0xAD	; 173
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
    6176:	80 e0       	ldi	r24, 0x00	; 0
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	aa ef       	ldi	r26, 0xFA	; 250
    617c:	b4 e4       	ldi	r27, 0x44	; 68
    617e:	89 8f       	std	Y+25, r24	; 0x19
    6180:	9a 8f       	std	Y+26, r25	; 0x1a
    6182:	ab 8f       	std	Y+27, r26	; 0x1b
    6184:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6186:	69 8d       	ldd	r22, Y+25	; 0x19
    6188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    618a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    618c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    618e:	20 e0       	ldi	r18, 0x00	; 0
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	4a ef       	ldi	r20, 0xFA	; 250
    6194:	54 e4       	ldi	r21, 0x44	; 68
    6196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    619a:	dc 01       	movw	r26, r24
    619c:	cb 01       	movw	r24, r22
    619e:	8d 8b       	std	Y+21, r24	; 0x15
    61a0:	9e 8b       	std	Y+22, r25	; 0x16
    61a2:	af 8b       	std	Y+23, r26	; 0x17
    61a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    61a6:	6d 89       	ldd	r22, Y+21	; 0x15
    61a8:	7e 89       	ldd	r23, Y+22	; 0x16
    61aa:	8f 89       	ldd	r24, Y+23	; 0x17
    61ac:	98 8d       	ldd	r25, Y+24	; 0x18
    61ae:	20 e0       	ldi	r18, 0x00	; 0
    61b0:	30 e0       	ldi	r19, 0x00	; 0
    61b2:	40 e8       	ldi	r20, 0x80	; 128
    61b4:	5f e3       	ldi	r21, 0x3F	; 63
    61b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    61ba:	88 23       	and	r24, r24
    61bc:	2c f4       	brge	.+10     	; 0x61c8 <main+0x30a6>
		__ticks = 1;
    61be:	81 e0       	ldi	r24, 0x01	; 1
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	9c 8b       	std	Y+20, r25	; 0x14
    61c4:	8b 8b       	std	Y+19, r24	; 0x13
    61c6:	3f c0       	rjmp	.+126    	; 0x6246 <main+0x3124>
	else if (__tmp > 65535)
    61c8:	6d 89       	ldd	r22, Y+21	; 0x15
    61ca:	7e 89       	ldd	r23, Y+22	; 0x16
    61cc:	8f 89       	ldd	r24, Y+23	; 0x17
    61ce:	98 8d       	ldd	r25, Y+24	; 0x18
    61d0:	20 e0       	ldi	r18, 0x00	; 0
    61d2:	3f ef       	ldi	r19, 0xFF	; 255
    61d4:	4f e7       	ldi	r20, 0x7F	; 127
    61d6:	57 e4       	ldi	r21, 0x47	; 71
    61d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    61dc:	18 16       	cp	r1, r24
    61de:	4c f5       	brge	.+82     	; 0x6232 <main+0x3110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61e0:	69 8d       	ldd	r22, Y+25	; 0x19
    61e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61e8:	20 e0       	ldi	r18, 0x00	; 0
    61ea:	30 e0       	ldi	r19, 0x00	; 0
    61ec:	40 e2       	ldi	r20, 0x20	; 32
    61ee:	51 e4       	ldi	r21, 0x41	; 65
    61f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61f4:	dc 01       	movw	r26, r24
    61f6:	cb 01       	movw	r24, r22
    61f8:	bc 01       	movw	r22, r24
    61fa:	cd 01       	movw	r24, r26
    61fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6200:	dc 01       	movw	r26, r24
    6202:	cb 01       	movw	r24, r22
    6204:	9c 8b       	std	Y+20, r25	; 0x14
    6206:	8b 8b       	std	Y+19, r24	; 0x13
    6208:	0f c0       	rjmp	.+30     	; 0x6228 <main+0x3106>
    620a:	88 ec       	ldi	r24, 0xC8	; 200
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	9a 8b       	std	Y+18, r25	; 0x12
    6210:	89 8b       	std	Y+17, r24	; 0x11
    6212:	89 89       	ldd	r24, Y+17	; 0x11
    6214:	9a 89       	ldd	r25, Y+18	; 0x12
    6216:	01 97       	sbiw	r24, 0x01	; 1
    6218:	f1 f7       	brne	.-4      	; 0x6216 <main+0x30f4>
    621a:	9a 8b       	std	Y+18, r25	; 0x12
    621c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    621e:	8b 89       	ldd	r24, Y+19	; 0x13
    6220:	9c 89       	ldd	r25, Y+20	; 0x14
    6222:	01 97       	sbiw	r24, 0x01	; 1
    6224:	9c 8b       	std	Y+20, r25	; 0x14
    6226:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6228:	8b 89       	ldd	r24, Y+19	; 0x13
    622a:	9c 89       	ldd	r25, Y+20	; 0x14
    622c:	00 97       	sbiw	r24, 0x00	; 0
    622e:	69 f7       	brne	.-38     	; 0x620a <main+0x30e8>
    6230:	14 c0       	rjmp	.+40     	; 0x625a <main+0x3138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6232:	6d 89       	ldd	r22, Y+21	; 0x15
    6234:	7e 89       	ldd	r23, Y+22	; 0x16
    6236:	8f 89       	ldd	r24, Y+23	; 0x17
    6238:	98 8d       	ldd	r25, Y+24	; 0x18
    623a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    623e:	dc 01       	movw	r26, r24
    6240:	cb 01       	movw	r24, r22
    6242:	9c 8b       	std	Y+20, r25	; 0x14
    6244:	8b 8b       	std	Y+19, r24	; 0x13
    6246:	8b 89       	ldd	r24, Y+19	; 0x13
    6248:	9c 89       	ldd	r25, Y+20	; 0x14
    624a:	98 8b       	std	Y+16, r25	; 0x10
    624c:	8f 87       	std	Y+15, r24	; 0x0f
    624e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6250:	98 89       	ldd	r25, Y+16	; 0x10
    6252:	01 97       	sbiw	r24, 0x01	; 1
    6254:	f1 f7       	brne	.-4      	; 0x6252 <main+0x3130>
    6256:	98 8b       	std	Y+16, r25	; 0x10
    6258:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(2000);
						seconds_counter=0;
    625a:	10 92 f1 00 	sts	0x00F1, r1
						minutes_counter=0;
    625e:	10 92 f2 00 	sts	0x00F2, r1
						hours_counter=0;
    6262:	10 92 f3 00 	sts	0x00F3, r1
						HLCD_vDisplayClear();
    6266:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
						HLCD_vSendString("1: Set Clock");
    626a:	80 e6       	ldi	r24, 0x60	; 96
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
						HLCD_vMoveTo(1,0);
    6272:	81 e0       	ldi	r24, 0x01	; 1
    6274:	60 e0       	ldi	r22, 0x00	; 0
    6276:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
						HLCD_vSendString("2: Set Alarm");
    627a:	8d e6       	ldi	r24, 0x6D	; 109
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
					}

					if (A_minutes_counter>60 || A_hours_counter>24 ){
    6282:	80 91 c3 00 	lds	r24, 0x00C3
    6286:	8d 33       	cpi	r24, 0x3D	; 61
    6288:	30 f4       	brcc	.+12     	; 0x6296 <main+0x3174>
    628a:	80 91 c2 00 	lds	r24, 0x00C2
    628e:	89 31       	cpi	r24, 0x19	; 25
    6290:	10 f4       	brcc	.+4      	; 0x6296 <main+0x3174>
    6292:	0c 94 42 19 	jmp	0x3284	; 0x3284 <main+0x162>
						HLCD_vDisplayClear();
    6296:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
						HLCD_vSendString("Invalid Time");
    629a:	8d ea       	ldi	r24, 0xAD	; 173
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
						MUSART_vTransmitData(65);
    62a2:	81 e4       	ldi	r24, 0x41	; 65
    62a4:	0e 94 f7 06 	call	0xdee	; 0xdee <MUSART_vTransmitData>
    62a8:	80 e0       	ldi	r24, 0x00	; 0
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	aa ef       	ldi	r26, 0xFA	; 250
    62ae:	b4 e4       	ldi	r27, 0x44	; 68
    62b0:	8b 87       	std	Y+11, r24	; 0x0b
    62b2:	9c 87       	std	Y+12, r25	; 0x0c
    62b4:	ad 87       	std	Y+13, r26	; 0x0d
    62b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    62ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    62bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    62be:	9e 85       	ldd	r25, Y+14	; 0x0e
    62c0:	20 e0       	ldi	r18, 0x00	; 0
    62c2:	30 e0       	ldi	r19, 0x00	; 0
    62c4:	4a ef       	ldi	r20, 0xFA	; 250
    62c6:	54 e4       	ldi	r21, 0x44	; 68
    62c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62cc:	dc 01       	movw	r26, r24
    62ce:	cb 01       	movw	r24, r22
    62d0:	8f 83       	std	Y+7, r24	; 0x07
    62d2:	98 87       	std	Y+8, r25	; 0x08
    62d4:	a9 87       	std	Y+9, r26	; 0x09
    62d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    62d8:	6f 81       	ldd	r22, Y+7	; 0x07
    62da:	78 85       	ldd	r23, Y+8	; 0x08
    62dc:	89 85       	ldd	r24, Y+9	; 0x09
    62de:	9a 85       	ldd	r25, Y+10	; 0x0a
    62e0:	20 e0       	ldi	r18, 0x00	; 0
    62e2:	30 e0       	ldi	r19, 0x00	; 0
    62e4:	40 e8       	ldi	r20, 0x80	; 128
    62e6:	5f e3       	ldi	r21, 0x3F	; 63
    62e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    62ec:	88 23       	and	r24, r24
    62ee:	2c f4       	brge	.+10     	; 0x62fa <main+0x31d8>
		__ticks = 1;
    62f0:	81 e0       	ldi	r24, 0x01	; 1
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	9e 83       	std	Y+6, r25	; 0x06
    62f6:	8d 83       	std	Y+5, r24	; 0x05
    62f8:	3f c0       	rjmp	.+126    	; 0x6378 <main+0x3256>
	else if (__tmp > 65535)
    62fa:	6f 81       	ldd	r22, Y+7	; 0x07
    62fc:	78 85       	ldd	r23, Y+8	; 0x08
    62fe:	89 85       	ldd	r24, Y+9	; 0x09
    6300:	9a 85       	ldd	r25, Y+10	; 0x0a
    6302:	20 e0       	ldi	r18, 0x00	; 0
    6304:	3f ef       	ldi	r19, 0xFF	; 255
    6306:	4f e7       	ldi	r20, 0x7F	; 127
    6308:	57 e4       	ldi	r21, 0x47	; 71
    630a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    630e:	18 16       	cp	r1, r24
    6310:	4c f5       	brge	.+82     	; 0x6364 <main+0x3242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6312:	6b 85       	ldd	r22, Y+11	; 0x0b
    6314:	7c 85       	ldd	r23, Y+12	; 0x0c
    6316:	8d 85       	ldd	r24, Y+13	; 0x0d
    6318:	9e 85       	ldd	r25, Y+14	; 0x0e
    631a:	20 e0       	ldi	r18, 0x00	; 0
    631c:	30 e0       	ldi	r19, 0x00	; 0
    631e:	40 e2       	ldi	r20, 0x20	; 32
    6320:	51 e4       	ldi	r21, 0x41	; 65
    6322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6326:	dc 01       	movw	r26, r24
    6328:	cb 01       	movw	r24, r22
    632a:	bc 01       	movw	r22, r24
    632c:	cd 01       	movw	r24, r26
    632e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6332:	dc 01       	movw	r26, r24
    6334:	cb 01       	movw	r24, r22
    6336:	9e 83       	std	Y+6, r25	; 0x06
    6338:	8d 83       	std	Y+5, r24	; 0x05
    633a:	0f c0       	rjmp	.+30     	; 0x635a <main+0x3238>
    633c:	88 ec       	ldi	r24, 0xC8	; 200
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	9c 83       	std	Y+4, r25	; 0x04
    6342:	8b 83       	std	Y+3, r24	; 0x03
    6344:	8b 81       	ldd	r24, Y+3	; 0x03
    6346:	9c 81       	ldd	r25, Y+4	; 0x04
    6348:	01 97       	sbiw	r24, 0x01	; 1
    634a:	f1 f7       	brne	.-4      	; 0x6348 <main+0x3226>
    634c:	9c 83       	std	Y+4, r25	; 0x04
    634e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6350:	8d 81       	ldd	r24, Y+5	; 0x05
    6352:	9e 81       	ldd	r25, Y+6	; 0x06
    6354:	01 97       	sbiw	r24, 0x01	; 1
    6356:	9e 83       	std	Y+6, r25	; 0x06
    6358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    635a:	8d 81       	ldd	r24, Y+5	; 0x05
    635c:	9e 81       	ldd	r25, Y+6	; 0x06
    635e:	00 97       	sbiw	r24, 0x00	; 0
    6360:	69 f7       	brne	.-38     	; 0x633c <main+0x321a>
    6362:	14 c0       	rjmp	.+40     	; 0x638c <main+0x326a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6364:	6f 81       	ldd	r22, Y+7	; 0x07
    6366:	78 85       	ldd	r23, Y+8	; 0x08
    6368:	89 85       	ldd	r24, Y+9	; 0x09
    636a:	9a 85       	ldd	r25, Y+10	; 0x0a
    636c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6370:	dc 01       	movw	r26, r24
    6372:	cb 01       	movw	r24, r22
    6374:	9e 83       	std	Y+6, r25	; 0x06
    6376:	8d 83       	std	Y+5, r24	; 0x05
    6378:	8d 81       	ldd	r24, Y+5	; 0x05
    637a:	9e 81       	ldd	r25, Y+6	; 0x06
    637c:	9a 83       	std	Y+2, r25	; 0x02
    637e:	89 83       	std	Y+1, r24	; 0x01
    6380:	89 81       	ldd	r24, Y+1	; 0x01
    6382:	9a 81       	ldd	r25, Y+2	; 0x02
    6384:	01 97       	sbiw	r24, 0x01	; 1
    6386:	f1 f7       	brne	.-4      	; 0x6384 <main+0x3262>
    6388:	9a 83       	std	Y+2, r25	; 0x02
    638a:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2000);
						A_minutes_counter=60;
    638c:	8c e3       	ldi	r24, 0x3C	; 60
    638e:	80 93 c3 00 	sts	0x00C3, r24
						A_hours_counter=24;
    6392:	88 e1       	ldi	r24, 0x18	; 24
    6394:	80 93 c2 00 	sts	0x00C2, r24
						HLCD_vDisplayClear();
    6398:	0e 94 09 16 	call	0x2c12	; 0x2c12 <HLCD_vDisplayClear>
						HLCD_vSendString("1: Set Clock");
    639c:	80 e6       	ldi	r24, 0x60	; 96
    639e:	90 e0       	ldi	r25, 0x00	; 0
    63a0:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
						HLCD_vMoveTo(1,0);
    63a4:	81 e0       	ldi	r24, 0x01	; 1
    63a6:	60 e0       	ldi	r22, 0x00	; 0
    63a8:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <HLCD_vMoveTo>
						HLCD_vSendString("2: Set Alarm");
    63ac:	8d e6       	ldi	r24, 0x6D	; 109
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HLCD_vSendString>
    63b4:	0c 94 42 19 	jmp	0x3284	; 0x3284 <main+0x162>

000063b8 <__mulsi3>:
    63b8:	62 9f       	mul	r22, r18
    63ba:	d0 01       	movw	r26, r0
    63bc:	73 9f       	mul	r23, r19
    63be:	f0 01       	movw	r30, r0
    63c0:	82 9f       	mul	r24, r18
    63c2:	e0 0d       	add	r30, r0
    63c4:	f1 1d       	adc	r31, r1
    63c6:	64 9f       	mul	r22, r20
    63c8:	e0 0d       	add	r30, r0
    63ca:	f1 1d       	adc	r31, r1
    63cc:	92 9f       	mul	r25, r18
    63ce:	f0 0d       	add	r31, r0
    63d0:	83 9f       	mul	r24, r19
    63d2:	f0 0d       	add	r31, r0
    63d4:	74 9f       	mul	r23, r20
    63d6:	f0 0d       	add	r31, r0
    63d8:	65 9f       	mul	r22, r21
    63da:	f0 0d       	add	r31, r0
    63dc:	99 27       	eor	r25, r25
    63de:	72 9f       	mul	r23, r18
    63e0:	b0 0d       	add	r27, r0
    63e2:	e1 1d       	adc	r30, r1
    63e4:	f9 1f       	adc	r31, r25
    63e6:	63 9f       	mul	r22, r19
    63e8:	b0 0d       	add	r27, r0
    63ea:	e1 1d       	adc	r30, r1
    63ec:	f9 1f       	adc	r31, r25
    63ee:	bd 01       	movw	r22, r26
    63f0:	cf 01       	movw	r24, r30
    63f2:	11 24       	eor	r1, r1
    63f4:	08 95       	ret

000063f6 <__udivmodqi4>:
    63f6:	99 1b       	sub	r25, r25
    63f8:	79 e0       	ldi	r23, 0x09	; 9
    63fa:	04 c0       	rjmp	.+8      	; 0x6404 <__udivmodqi4_ep>

000063fc <__udivmodqi4_loop>:
    63fc:	99 1f       	adc	r25, r25
    63fe:	96 17       	cp	r25, r22
    6400:	08 f0       	brcs	.+2      	; 0x6404 <__udivmodqi4_ep>
    6402:	96 1b       	sub	r25, r22

00006404 <__udivmodqi4_ep>:
    6404:	88 1f       	adc	r24, r24
    6406:	7a 95       	dec	r23
    6408:	c9 f7       	brne	.-14     	; 0x63fc <__udivmodqi4_loop>
    640a:	80 95       	com	r24
    640c:	08 95       	ret

0000640e <__udivmodhi4>:
    640e:	aa 1b       	sub	r26, r26
    6410:	bb 1b       	sub	r27, r27
    6412:	51 e1       	ldi	r21, 0x11	; 17
    6414:	07 c0       	rjmp	.+14     	; 0x6424 <__udivmodhi4_ep>

00006416 <__udivmodhi4_loop>:
    6416:	aa 1f       	adc	r26, r26
    6418:	bb 1f       	adc	r27, r27
    641a:	a6 17       	cp	r26, r22
    641c:	b7 07       	cpc	r27, r23
    641e:	10 f0       	brcs	.+4      	; 0x6424 <__udivmodhi4_ep>
    6420:	a6 1b       	sub	r26, r22
    6422:	b7 0b       	sbc	r27, r23

00006424 <__udivmodhi4_ep>:
    6424:	88 1f       	adc	r24, r24
    6426:	99 1f       	adc	r25, r25
    6428:	5a 95       	dec	r21
    642a:	a9 f7       	brne	.-22     	; 0x6416 <__udivmodhi4_loop>
    642c:	80 95       	com	r24
    642e:	90 95       	com	r25
    6430:	bc 01       	movw	r22, r24
    6432:	cd 01       	movw	r24, r26
    6434:	08 95       	ret

00006436 <__divmodsi4>:
    6436:	97 fb       	bst	r25, 7
    6438:	09 2e       	mov	r0, r25
    643a:	05 26       	eor	r0, r21
    643c:	0e d0       	rcall	.+28     	; 0x645a <__divmodsi4_neg1>
    643e:	57 fd       	sbrc	r21, 7
    6440:	04 d0       	rcall	.+8      	; 0x644a <__divmodsi4_neg2>
    6442:	14 d0       	rcall	.+40     	; 0x646c <__udivmodsi4>
    6444:	0a d0       	rcall	.+20     	; 0x645a <__divmodsi4_neg1>
    6446:	00 1c       	adc	r0, r0
    6448:	38 f4       	brcc	.+14     	; 0x6458 <__divmodsi4_exit>

0000644a <__divmodsi4_neg2>:
    644a:	50 95       	com	r21
    644c:	40 95       	com	r20
    644e:	30 95       	com	r19
    6450:	21 95       	neg	r18
    6452:	3f 4f       	sbci	r19, 0xFF	; 255
    6454:	4f 4f       	sbci	r20, 0xFF	; 255
    6456:	5f 4f       	sbci	r21, 0xFF	; 255

00006458 <__divmodsi4_exit>:
    6458:	08 95       	ret

0000645a <__divmodsi4_neg1>:
    645a:	f6 f7       	brtc	.-4      	; 0x6458 <__divmodsi4_exit>
    645c:	90 95       	com	r25
    645e:	80 95       	com	r24
    6460:	70 95       	com	r23
    6462:	61 95       	neg	r22
    6464:	7f 4f       	sbci	r23, 0xFF	; 255
    6466:	8f 4f       	sbci	r24, 0xFF	; 255
    6468:	9f 4f       	sbci	r25, 0xFF	; 255
    646a:	08 95       	ret

0000646c <__udivmodsi4>:
    646c:	a1 e2       	ldi	r26, 0x21	; 33
    646e:	1a 2e       	mov	r1, r26
    6470:	aa 1b       	sub	r26, r26
    6472:	bb 1b       	sub	r27, r27
    6474:	fd 01       	movw	r30, r26
    6476:	0d c0       	rjmp	.+26     	; 0x6492 <__udivmodsi4_ep>

00006478 <__udivmodsi4_loop>:
    6478:	aa 1f       	adc	r26, r26
    647a:	bb 1f       	adc	r27, r27
    647c:	ee 1f       	adc	r30, r30
    647e:	ff 1f       	adc	r31, r31
    6480:	a2 17       	cp	r26, r18
    6482:	b3 07       	cpc	r27, r19
    6484:	e4 07       	cpc	r30, r20
    6486:	f5 07       	cpc	r31, r21
    6488:	20 f0       	brcs	.+8      	; 0x6492 <__udivmodsi4_ep>
    648a:	a2 1b       	sub	r26, r18
    648c:	b3 0b       	sbc	r27, r19
    648e:	e4 0b       	sbc	r30, r20
    6490:	f5 0b       	sbc	r31, r21

00006492 <__udivmodsi4_ep>:
    6492:	66 1f       	adc	r22, r22
    6494:	77 1f       	adc	r23, r23
    6496:	88 1f       	adc	r24, r24
    6498:	99 1f       	adc	r25, r25
    649a:	1a 94       	dec	r1
    649c:	69 f7       	brne	.-38     	; 0x6478 <__udivmodsi4_loop>
    649e:	60 95       	com	r22
    64a0:	70 95       	com	r23
    64a2:	80 95       	com	r24
    64a4:	90 95       	com	r25
    64a6:	9b 01       	movw	r18, r22
    64a8:	ac 01       	movw	r20, r24
    64aa:	bd 01       	movw	r22, r26
    64ac:	cf 01       	movw	r24, r30
    64ae:	08 95       	ret

000064b0 <__prologue_saves__>:
    64b0:	2f 92       	push	r2
    64b2:	3f 92       	push	r3
    64b4:	4f 92       	push	r4
    64b6:	5f 92       	push	r5
    64b8:	6f 92       	push	r6
    64ba:	7f 92       	push	r7
    64bc:	8f 92       	push	r8
    64be:	9f 92       	push	r9
    64c0:	af 92       	push	r10
    64c2:	bf 92       	push	r11
    64c4:	cf 92       	push	r12
    64c6:	df 92       	push	r13
    64c8:	ef 92       	push	r14
    64ca:	ff 92       	push	r15
    64cc:	0f 93       	push	r16
    64ce:	1f 93       	push	r17
    64d0:	cf 93       	push	r28
    64d2:	df 93       	push	r29
    64d4:	cd b7       	in	r28, 0x3d	; 61
    64d6:	de b7       	in	r29, 0x3e	; 62
    64d8:	ca 1b       	sub	r28, r26
    64da:	db 0b       	sbc	r29, r27
    64dc:	0f b6       	in	r0, 0x3f	; 63
    64de:	f8 94       	cli
    64e0:	de bf       	out	0x3e, r29	; 62
    64e2:	0f be       	out	0x3f, r0	; 63
    64e4:	cd bf       	out	0x3d, r28	; 61
    64e6:	09 94       	ijmp

000064e8 <__epilogue_restores__>:
    64e8:	2a 88       	ldd	r2, Y+18	; 0x12
    64ea:	39 88       	ldd	r3, Y+17	; 0x11
    64ec:	48 88       	ldd	r4, Y+16	; 0x10
    64ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    64f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    64f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    64f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    64f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    64f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    64fa:	b9 84       	ldd	r11, Y+9	; 0x09
    64fc:	c8 84       	ldd	r12, Y+8	; 0x08
    64fe:	df 80       	ldd	r13, Y+7	; 0x07
    6500:	ee 80       	ldd	r14, Y+6	; 0x06
    6502:	fd 80       	ldd	r15, Y+5	; 0x05
    6504:	0c 81       	ldd	r16, Y+4	; 0x04
    6506:	1b 81       	ldd	r17, Y+3	; 0x03
    6508:	aa 81       	ldd	r26, Y+2	; 0x02
    650a:	b9 81       	ldd	r27, Y+1	; 0x01
    650c:	ce 0f       	add	r28, r30
    650e:	d1 1d       	adc	r29, r1
    6510:	0f b6       	in	r0, 0x3f	; 63
    6512:	f8 94       	cli
    6514:	de bf       	out	0x3e, r29	; 62
    6516:	0f be       	out	0x3f, r0	; 63
    6518:	cd bf       	out	0x3d, r28	; 61
    651a:	ed 01       	movw	r28, r26
    651c:	08 95       	ret

0000651e <_exit>:
    651e:	f8 94       	cli

00006520 <__stop_program>:
    6520:	ff cf       	rjmp	.-2      	; 0x6520 <__stop_program>
